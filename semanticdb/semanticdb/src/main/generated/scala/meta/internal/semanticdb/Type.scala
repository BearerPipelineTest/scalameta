// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package scala.meta.internal.semanticdb

sealed trait Type {
  final def isEmpty = this.isInstanceOf[scala.meta.internal.semanticdb.Type.Empty.type]
  final def isDefined = !isEmpty
  final def asMessage: scala.meta.internal.semanticdb.TypeMessage = scala.meta.internal.semanticdb.Type.TypeTypeMapper.toBase(this)
}

object Type {
  case object Empty extends scala.meta.internal.semanticdb.Type
  
  def defaultInstance: scala.meta.internal.semanticdb.Type = Empty
  
  implicit val TypeTypeMapper: _root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TypeMessage, scala.meta.internal.semanticdb.Type] = new _root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TypeMessage, scala.meta.internal.semanticdb.Type] {
    override def toCustom(__base: scala.meta.internal.semanticdb.TypeMessage): scala.meta.internal.semanticdb.Type = __base.sealedValue match {
      case __v: scala.meta.internal.semanticdb.TypeMessage.SealedValue.TypeRef => __v.value
      case __v: scala.meta.internal.semanticdb.TypeMessage.SealedValue.SingleType => __v.value
      case __v: scala.meta.internal.semanticdb.TypeMessage.SealedValue.ThisType => __v.value
      case __v: scala.meta.internal.semanticdb.TypeMessage.SealedValue.SuperType => __v.value
      case __v: scala.meta.internal.semanticdb.TypeMessage.SealedValue.ConstantType => __v.value
      case __v: scala.meta.internal.semanticdb.TypeMessage.SealedValue.IntersectionType => __v.value
      case __v: scala.meta.internal.semanticdb.TypeMessage.SealedValue.UnionType => __v.value
      case __v: scala.meta.internal.semanticdb.TypeMessage.SealedValue.WithType => __v.value
      case __v: scala.meta.internal.semanticdb.TypeMessage.SealedValue.StructuralType => __v.value
      case __v: scala.meta.internal.semanticdb.TypeMessage.SealedValue.AnnotatedType => __v.value
      case __v: scala.meta.internal.semanticdb.TypeMessage.SealedValue.ExistentialType => __v.value
      case __v: scala.meta.internal.semanticdb.TypeMessage.SealedValue.UniversalType => __v.value
      case __v: scala.meta.internal.semanticdb.TypeMessage.SealedValue.ByNameType => __v.value
      case __v: scala.meta.internal.semanticdb.TypeMessage.SealedValue.RepeatedType => __v.value
      case scala.meta.internal.semanticdb.TypeMessage.SealedValue.Empty => Empty
    }
    override def toBase(__custom: scala.meta.internal.semanticdb.Type): scala.meta.internal.semanticdb.TypeMessage = scala.meta.internal.semanticdb.TypeMessage(__custom match {
      case __v: scala.meta.internal.semanticdb.TypeRef => scala.meta.internal.semanticdb.TypeMessage.SealedValue.TypeRef(__v)
      case __v: scala.meta.internal.semanticdb.SingleType => scala.meta.internal.semanticdb.TypeMessage.SealedValue.SingleType(__v)
      case __v: scala.meta.internal.semanticdb.ThisType => scala.meta.internal.semanticdb.TypeMessage.SealedValue.ThisType(__v)
      case __v: scala.meta.internal.semanticdb.SuperType => scala.meta.internal.semanticdb.TypeMessage.SealedValue.SuperType(__v)
      case __v: scala.meta.internal.semanticdb.ConstantType => scala.meta.internal.semanticdb.TypeMessage.SealedValue.ConstantType(__v)
      case __v: scala.meta.internal.semanticdb.IntersectionType => scala.meta.internal.semanticdb.TypeMessage.SealedValue.IntersectionType(__v)
      case __v: scala.meta.internal.semanticdb.UnionType => scala.meta.internal.semanticdb.TypeMessage.SealedValue.UnionType(__v)
      case __v: scala.meta.internal.semanticdb.WithType => scala.meta.internal.semanticdb.TypeMessage.SealedValue.WithType(__v)
      case __v: scala.meta.internal.semanticdb.StructuralType => scala.meta.internal.semanticdb.TypeMessage.SealedValue.StructuralType(__v)
      case __v: scala.meta.internal.semanticdb.AnnotatedType => scala.meta.internal.semanticdb.TypeMessage.SealedValue.AnnotatedType(__v)
      case __v: scala.meta.internal.semanticdb.ExistentialType => scala.meta.internal.semanticdb.TypeMessage.SealedValue.ExistentialType(__v)
      case __v: scala.meta.internal.semanticdb.UniversalType => scala.meta.internal.semanticdb.TypeMessage.SealedValue.UniversalType(__v)
      case __v: scala.meta.internal.semanticdb.ByNameType => scala.meta.internal.semanticdb.TypeMessage.SealedValue.ByNameType(__v)
      case __v: scala.meta.internal.semanticdb.RepeatedType => scala.meta.internal.semanticdb.TypeMessage.SealedValue.RepeatedType(__v)
      case Empty => scala.meta.internal.semanticdb.TypeMessage.SealedValue.Empty
    })
  }
}
@SerialVersionUID(0L)
final case class TypeMessage(
    sealedValue: scala.meta.internal.semanticdb.TypeMessage.SealedValue = scala.meta.internal.semanticdb.TypeMessage.SealedValue.Empty
    ) extends scalapb.GeneratedMessage with scalapb.Message[TypeMessage] with scalapb.lenses.Updatable[TypeMessage] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (sealedValue.typeRef.isDefined) {
        val __value = sealedValue.typeRef.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (sealedValue.singleType.isDefined) {
        val __value = sealedValue.singleType.get
        __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (sealedValue.thisType.isDefined) {
        val __value = sealedValue.thisType.get
        __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (sealedValue.superType.isDefined) {
        val __value = sealedValue.superType.get
        __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (sealedValue.constantType.isDefined) {
        val __value = sealedValue.constantType.get
        __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (sealedValue.intersectionType.isDefined) {
        val __value = sealedValue.intersectionType.get
        __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (sealedValue.unionType.isDefined) {
        val __value = sealedValue.unionType.get
        __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (sealedValue.withType.isDefined) {
        val __value = sealedValue.withType.get
        __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (sealedValue.structuralType.isDefined) {
        val __value = sealedValue.structuralType.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (sealedValue.annotatedType.isDefined) {
        val __value = sealedValue.annotatedType.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (sealedValue.existentialType.isDefined) {
        val __value = sealedValue.existentialType.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (sealedValue.universalType.isDefined) {
        val __value = sealedValue.universalType.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (sealedValue.byNameType.isDefined) {
        val __value = sealedValue.byNameType.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (sealedValue.repeatedType.isDefined) {
        val __value = sealedValue.repeatedType.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      sealedValue.typeRef.foreach { __v =>
        val __m = __v
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      sealedValue.structuralType.foreach { __v =>
        val __m = __v
        _output__.writeTag(7, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      sealedValue.annotatedType.foreach { __v =>
        val __m = __v
        _output__.writeTag(8, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      sealedValue.existentialType.foreach { __v =>
        val __m = __v
        _output__.writeTag(9, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      sealedValue.universalType.foreach { __v =>
        val __m = __v
        _output__.writeTag(10, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      sealedValue.byNameType.foreach { __v =>
        val __m = __v
        _output__.writeTag(13, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      sealedValue.repeatedType.foreach { __v =>
        val __m = __v
        _output__.writeTag(14, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      sealedValue.intersectionType.foreach { __v =>
        val __m = __v
        _output__.writeTag(17, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      sealedValue.unionType.foreach { __v =>
        val __m = __v
        _output__.writeTag(18, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      sealedValue.withType.foreach { __v =>
        val __m = __v
        _output__.writeTag(19, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      sealedValue.singleType.foreach { __v =>
        val __m = __v
        _output__.writeTag(20, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      sealedValue.thisType.foreach { __v =>
        val __m = __v
        _output__.writeTag(21, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      sealedValue.superType.foreach { __v =>
        val __m = __v
        _output__.writeTag(22, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      sealedValue.constantType.foreach { __v =>
        val __m = __v
        _output__.writeTag(23, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.TypeMessage = {
      var __sealedValue = this.sealedValue
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 18 =>
            __sealedValue = scala.meta.internal.semanticdb.TypeMessage.SealedValue.TypeRef(_root_.scalapb.LiteParser.readMessage(_input__, sealedValue.typeRef.getOrElse(scala.meta.internal.semanticdb.TypeRef.defaultInstance)))
          case 162 =>
            __sealedValue = scala.meta.internal.semanticdb.TypeMessage.SealedValue.SingleType(_root_.scalapb.LiteParser.readMessage(_input__, sealedValue.singleType.getOrElse(scala.meta.internal.semanticdb.SingleType.defaultInstance)))
          case 170 =>
            __sealedValue = scala.meta.internal.semanticdb.TypeMessage.SealedValue.ThisType(_root_.scalapb.LiteParser.readMessage(_input__, sealedValue.thisType.getOrElse(scala.meta.internal.semanticdb.ThisType.defaultInstance)))
          case 178 =>
            __sealedValue = scala.meta.internal.semanticdb.TypeMessage.SealedValue.SuperType(_root_.scalapb.LiteParser.readMessage(_input__, sealedValue.superType.getOrElse(scala.meta.internal.semanticdb.SuperType.defaultInstance)))
          case 186 =>
            __sealedValue = scala.meta.internal.semanticdb.TypeMessage.SealedValue.ConstantType(_root_.scalapb.LiteParser.readMessage(_input__, sealedValue.constantType.getOrElse(scala.meta.internal.semanticdb.ConstantType.defaultInstance)))
          case 138 =>
            __sealedValue = scala.meta.internal.semanticdb.TypeMessage.SealedValue.IntersectionType(_root_.scalapb.LiteParser.readMessage(_input__, sealedValue.intersectionType.getOrElse(scala.meta.internal.semanticdb.IntersectionType.defaultInstance)))
          case 146 =>
            __sealedValue = scala.meta.internal.semanticdb.TypeMessage.SealedValue.UnionType(_root_.scalapb.LiteParser.readMessage(_input__, sealedValue.unionType.getOrElse(scala.meta.internal.semanticdb.UnionType.defaultInstance)))
          case 154 =>
            __sealedValue = scala.meta.internal.semanticdb.TypeMessage.SealedValue.WithType(_root_.scalapb.LiteParser.readMessage(_input__, sealedValue.withType.getOrElse(scala.meta.internal.semanticdb.WithType.defaultInstance)))
          case 58 =>
            __sealedValue = scala.meta.internal.semanticdb.TypeMessage.SealedValue.StructuralType(_root_.scalapb.LiteParser.readMessage(_input__, sealedValue.structuralType.getOrElse(scala.meta.internal.semanticdb.StructuralType.defaultInstance)))
          case 66 =>
            __sealedValue = scala.meta.internal.semanticdb.TypeMessage.SealedValue.AnnotatedType(_root_.scalapb.LiteParser.readMessage(_input__, sealedValue.annotatedType.getOrElse(scala.meta.internal.semanticdb.AnnotatedType.defaultInstance)))
          case 74 =>
            __sealedValue = scala.meta.internal.semanticdb.TypeMessage.SealedValue.ExistentialType(_root_.scalapb.LiteParser.readMessage(_input__, sealedValue.existentialType.getOrElse(scala.meta.internal.semanticdb.ExistentialType.defaultInstance)))
          case 82 =>
            __sealedValue = scala.meta.internal.semanticdb.TypeMessage.SealedValue.UniversalType(_root_.scalapb.LiteParser.readMessage(_input__, sealedValue.universalType.getOrElse(scala.meta.internal.semanticdb.UniversalType.defaultInstance)))
          case 106 =>
            __sealedValue = scala.meta.internal.semanticdb.TypeMessage.SealedValue.ByNameType(_root_.scalapb.LiteParser.readMessage(_input__, sealedValue.byNameType.getOrElse(scala.meta.internal.semanticdb.ByNameType.defaultInstance)))
          case 114 =>
            __sealedValue = scala.meta.internal.semanticdb.TypeMessage.SealedValue.RepeatedType(_root_.scalapb.LiteParser.readMessage(_input__, sealedValue.repeatedType.getOrElse(scala.meta.internal.semanticdb.RepeatedType.defaultInstance)))
          case tag => _input__.skipField(tag)
        }
      }
      scala.meta.internal.semanticdb.TypeMessage(
          sealedValue = __sealedValue
      )
    }
    def getTypeRef: scala.meta.internal.semanticdb.TypeRef = sealedValue.typeRef.getOrElse(scala.meta.internal.semanticdb.TypeRef.defaultInstance)
    def withTypeRef(__v: scala.meta.internal.semanticdb.TypeRef): TypeMessage = copy(sealedValue = scala.meta.internal.semanticdb.TypeMessage.SealedValue.TypeRef(__v))
    def getSingleType: scala.meta.internal.semanticdb.SingleType = sealedValue.singleType.getOrElse(scala.meta.internal.semanticdb.SingleType.defaultInstance)
    def withSingleType(__v: scala.meta.internal.semanticdb.SingleType): TypeMessage = copy(sealedValue = scala.meta.internal.semanticdb.TypeMessage.SealedValue.SingleType(__v))
    def getThisType: scala.meta.internal.semanticdb.ThisType = sealedValue.thisType.getOrElse(scala.meta.internal.semanticdb.ThisType.defaultInstance)
    def withThisType(__v: scala.meta.internal.semanticdb.ThisType): TypeMessage = copy(sealedValue = scala.meta.internal.semanticdb.TypeMessage.SealedValue.ThisType(__v))
    def getSuperType: scala.meta.internal.semanticdb.SuperType = sealedValue.superType.getOrElse(scala.meta.internal.semanticdb.SuperType.defaultInstance)
    def withSuperType(__v: scala.meta.internal.semanticdb.SuperType): TypeMessage = copy(sealedValue = scala.meta.internal.semanticdb.TypeMessage.SealedValue.SuperType(__v))
    def getConstantType: scala.meta.internal.semanticdb.ConstantType = sealedValue.constantType.getOrElse(scala.meta.internal.semanticdb.ConstantType.defaultInstance)
    def withConstantType(__v: scala.meta.internal.semanticdb.ConstantType): TypeMessage = copy(sealedValue = scala.meta.internal.semanticdb.TypeMessage.SealedValue.ConstantType(__v))
    def getIntersectionType: scala.meta.internal.semanticdb.IntersectionType = sealedValue.intersectionType.getOrElse(scala.meta.internal.semanticdb.IntersectionType.defaultInstance)
    def withIntersectionType(__v: scala.meta.internal.semanticdb.IntersectionType): TypeMessage = copy(sealedValue = scala.meta.internal.semanticdb.TypeMessage.SealedValue.IntersectionType(__v))
    def getUnionType: scala.meta.internal.semanticdb.UnionType = sealedValue.unionType.getOrElse(scala.meta.internal.semanticdb.UnionType.defaultInstance)
    def withUnionType(__v: scala.meta.internal.semanticdb.UnionType): TypeMessage = copy(sealedValue = scala.meta.internal.semanticdb.TypeMessage.SealedValue.UnionType(__v))
    def getWithType: scala.meta.internal.semanticdb.WithType = sealedValue.withType.getOrElse(scala.meta.internal.semanticdb.WithType.defaultInstance)
    def withWithType(__v: scala.meta.internal.semanticdb.WithType): TypeMessage = copy(sealedValue = scala.meta.internal.semanticdb.TypeMessage.SealedValue.WithType(__v))
    def getStructuralType: scala.meta.internal.semanticdb.StructuralType = sealedValue.structuralType.getOrElse(scala.meta.internal.semanticdb.StructuralType.defaultInstance)
    def withStructuralType(__v: scala.meta.internal.semanticdb.StructuralType): TypeMessage = copy(sealedValue = scala.meta.internal.semanticdb.TypeMessage.SealedValue.StructuralType(__v))
    def getAnnotatedType: scala.meta.internal.semanticdb.AnnotatedType = sealedValue.annotatedType.getOrElse(scala.meta.internal.semanticdb.AnnotatedType.defaultInstance)
    def withAnnotatedType(__v: scala.meta.internal.semanticdb.AnnotatedType): TypeMessage = copy(sealedValue = scala.meta.internal.semanticdb.TypeMessage.SealedValue.AnnotatedType(__v))
    def getExistentialType: scala.meta.internal.semanticdb.ExistentialType = sealedValue.existentialType.getOrElse(scala.meta.internal.semanticdb.ExistentialType.defaultInstance)
    def withExistentialType(__v: scala.meta.internal.semanticdb.ExistentialType): TypeMessage = copy(sealedValue = scala.meta.internal.semanticdb.TypeMessage.SealedValue.ExistentialType(__v))
    def getUniversalType: scala.meta.internal.semanticdb.UniversalType = sealedValue.universalType.getOrElse(scala.meta.internal.semanticdb.UniversalType.defaultInstance)
    def withUniversalType(__v: scala.meta.internal.semanticdb.UniversalType): TypeMessage = copy(sealedValue = scala.meta.internal.semanticdb.TypeMessage.SealedValue.UniversalType(__v))
    def getByNameType: scala.meta.internal.semanticdb.ByNameType = sealedValue.byNameType.getOrElse(scala.meta.internal.semanticdb.ByNameType.defaultInstance)
    def withByNameType(__v: scala.meta.internal.semanticdb.ByNameType): TypeMessage = copy(sealedValue = scala.meta.internal.semanticdb.TypeMessage.SealedValue.ByNameType(__v))
    def getRepeatedType: scala.meta.internal.semanticdb.RepeatedType = sealedValue.repeatedType.getOrElse(scala.meta.internal.semanticdb.RepeatedType.defaultInstance)
    def withRepeatedType(__v: scala.meta.internal.semanticdb.RepeatedType): TypeMessage = copy(sealedValue = scala.meta.internal.semanticdb.TypeMessage.SealedValue.RepeatedType(__v))
    def clearSealedValue: TypeMessage = copy(sealedValue = scala.meta.internal.semanticdb.TypeMessage.SealedValue.Empty)
    def withSealedValue(__v: scala.meta.internal.semanticdb.TypeMessage.SealedValue): TypeMessage = copy(sealedValue = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 2 => sealedValue.typeRef.orNull
        case 20 => sealedValue.singleType.orNull
        case 21 => sealedValue.thisType.orNull
        case 22 => sealedValue.superType.orNull
        case 23 => sealedValue.constantType.orNull
        case 17 => sealedValue.intersectionType.orNull
        case 18 => sealedValue.unionType.orNull
        case 19 => sealedValue.withType.orNull
        case 7 => sealedValue.structuralType.orNull
        case 8 => sealedValue.annotatedType.orNull
        case 9 => sealedValue.existentialType.orNull
        case 10 => sealedValue.universalType.orNull
        case 13 => sealedValue.byNameType.orNull
        case 14 => sealedValue.repeatedType.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 2 => sealedValue.typeRef.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 20 => sealedValue.singleType.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 21 => sealedValue.thisType.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 22 => sealedValue.superType.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 23 => sealedValue.constantType.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 17 => sealedValue.intersectionType.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 18 => sealedValue.unionType.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 19 => sealedValue.withType.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 7 => sealedValue.structuralType.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 8 => sealedValue.annotatedType.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 9 => sealedValue.existentialType.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 10 => sealedValue.universalType.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 13 => sealedValue.byNameType.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 14 => sealedValue.repeatedType.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = scala.meta.internal.semanticdb.TypeMessage
    def toType: scala.meta.internal.semanticdb.Type = scala.meta.internal.semanticdb.Type.TypeTypeMapper.toCustom(this)
}

object TypeMessage extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.TypeMessage] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.TypeMessage] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): scala.meta.internal.semanticdb.TypeMessage = {
    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    scala.meta.internal.semanticdb.TypeMessage(
      sealedValue = __fieldsMap.get(__fields.get(0)).asInstanceOf[_root_.scala.Option[scala.meta.internal.semanticdb.TypeRef]].map(scala.meta.internal.semanticdb.TypeMessage.SealedValue.TypeRef)
    .orElse[scala.meta.internal.semanticdb.TypeMessage.SealedValue](__fieldsMap.get(__fields.get(1)).asInstanceOf[_root_.scala.Option[scala.meta.internal.semanticdb.SingleType]].map(scala.meta.internal.semanticdb.TypeMessage.SealedValue.SingleType))
    .orElse[scala.meta.internal.semanticdb.TypeMessage.SealedValue](__fieldsMap.get(__fields.get(2)).asInstanceOf[_root_.scala.Option[scala.meta.internal.semanticdb.ThisType]].map(scala.meta.internal.semanticdb.TypeMessage.SealedValue.ThisType))
    .orElse[scala.meta.internal.semanticdb.TypeMessage.SealedValue](__fieldsMap.get(__fields.get(3)).asInstanceOf[_root_.scala.Option[scala.meta.internal.semanticdb.SuperType]].map(scala.meta.internal.semanticdb.TypeMessage.SealedValue.SuperType))
    .orElse[scala.meta.internal.semanticdb.TypeMessage.SealedValue](__fieldsMap.get(__fields.get(4)).asInstanceOf[_root_.scala.Option[scala.meta.internal.semanticdb.ConstantType]].map(scala.meta.internal.semanticdb.TypeMessage.SealedValue.ConstantType))
    .orElse[scala.meta.internal.semanticdb.TypeMessage.SealedValue](__fieldsMap.get(__fields.get(5)).asInstanceOf[_root_.scala.Option[scala.meta.internal.semanticdb.IntersectionType]].map(scala.meta.internal.semanticdb.TypeMessage.SealedValue.IntersectionType))
    .orElse[scala.meta.internal.semanticdb.TypeMessage.SealedValue](__fieldsMap.get(__fields.get(6)).asInstanceOf[_root_.scala.Option[scala.meta.internal.semanticdb.UnionType]].map(scala.meta.internal.semanticdb.TypeMessage.SealedValue.UnionType))
    .orElse[scala.meta.internal.semanticdb.TypeMessage.SealedValue](__fieldsMap.get(__fields.get(7)).asInstanceOf[_root_.scala.Option[scala.meta.internal.semanticdb.WithType]].map(scala.meta.internal.semanticdb.TypeMessage.SealedValue.WithType))
    .orElse[scala.meta.internal.semanticdb.TypeMessage.SealedValue](__fieldsMap.get(__fields.get(8)).asInstanceOf[_root_.scala.Option[scala.meta.internal.semanticdb.StructuralType]].map(scala.meta.internal.semanticdb.TypeMessage.SealedValue.StructuralType))
    .orElse[scala.meta.internal.semanticdb.TypeMessage.SealedValue](__fieldsMap.get(__fields.get(9)).asInstanceOf[_root_.scala.Option[scala.meta.internal.semanticdb.AnnotatedType]].map(scala.meta.internal.semanticdb.TypeMessage.SealedValue.AnnotatedType))
    .orElse[scala.meta.internal.semanticdb.TypeMessage.SealedValue](__fieldsMap.get(__fields.get(10)).asInstanceOf[_root_.scala.Option[scala.meta.internal.semanticdb.ExistentialType]].map(scala.meta.internal.semanticdb.TypeMessage.SealedValue.ExistentialType))
    .orElse[scala.meta.internal.semanticdb.TypeMessage.SealedValue](__fieldsMap.get(__fields.get(11)).asInstanceOf[_root_.scala.Option[scala.meta.internal.semanticdb.UniversalType]].map(scala.meta.internal.semanticdb.TypeMessage.SealedValue.UniversalType))
    .orElse[scala.meta.internal.semanticdb.TypeMessage.SealedValue](__fieldsMap.get(__fields.get(12)).asInstanceOf[_root_.scala.Option[scala.meta.internal.semanticdb.ByNameType]].map(scala.meta.internal.semanticdb.TypeMessage.SealedValue.ByNameType))
    .orElse[scala.meta.internal.semanticdb.TypeMessage.SealedValue](__fieldsMap.get(__fields.get(13)).asInstanceOf[_root_.scala.Option[scala.meta.internal.semanticdb.RepeatedType]].map(scala.meta.internal.semanticdb.TypeMessage.SealedValue.RepeatedType))
    .getOrElse(scala.meta.internal.semanticdb.TypeMessage.SealedValue.Empty)
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb.TypeMessage] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      scala.meta.internal.semanticdb.TypeMessage(
        sealedValue = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb.TypeRef]]).map(scala.meta.internal.semanticdb.TypeMessage.SealedValue.TypeRef)
    .orElse[scala.meta.internal.semanticdb.TypeMessage.SealedValue](__fieldsMap.get(scalaDescriptor.findFieldByNumber(20).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb.SingleType]]).map(scala.meta.internal.semanticdb.TypeMessage.SealedValue.SingleType))
    .orElse[scala.meta.internal.semanticdb.TypeMessage.SealedValue](__fieldsMap.get(scalaDescriptor.findFieldByNumber(21).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb.ThisType]]).map(scala.meta.internal.semanticdb.TypeMessage.SealedValue.ThisType))
    .orElse[scala.meta.internal.semanticdb.TypeMessage.SealedValue](__fieldsMap.get(scalaDescriptor.findFieldByNumber(22).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb.SuperType]]).map(scala.meta.internal.semanticdb.TypeMessage.SealedValue.SuperType))
    .orElse[scala.meta.internal.semanticdb.TypeMessage.SealedValue](__fieldsMap.get(scalaDescriptor.findFieldByNumber(23).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb.ConstantType]]).map(scala.meta.internal.semanticdb.TypeMessage.SealedValue.ConstantType))
    .orElse[scala.meta.internal.semanticdb.TypeMessage.SealedValue](__fieldsMap.get(scalaDescriptor.findFieldByNumber(17).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb.IntersectionType]]).map(scala.meta.internal.semanticdb.TypeMessage.SealedValue.IntersectionType))
    .orElse[scala.meta.internal.semanticdb.TypeMessage.SealedValue](__fieldsMap.get(scalaDescriptor.findFieldByNumber(18).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb.UnionType]]).map(scala.meta.internal.semanticdb.TypeMessage.SealedValue.UnionType))
    .orElse[scala.meta.internal.semanticdb.TypeMessage.SealedValue](__fieldsMap.get(scalaDescriptor.findFieldByNumber(19).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb.WithType]]).map(scala.meta.internal.semanticdb.TypeMessage.SealedValue.WithType))
    .orElse[scala.meta.internal.semanticdb.TypeMessage.SealedValue](__fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb.StructuralType]]).map(scala.meta.internal.semanticdb.TypeMessage.SealedValue.StructuralType))
    .orElse[scala.meta.internal.semanticdb.TypeMessage.SealedValue](__fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb.AnnotatedType]]).map(scala.meta.internal.semanticdb.TypeMessage.SealedValue.AnnotatedType))
    .orElse[scala.meta.internal.semanticdb.TypeMessage.SealedValue](__fieldsMap.get(scalaDescriptor.findFieldByNumber(9).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb.ExistentialType]]).map(scala.meta.internal.semanticdb.TypeMessage.SealedValue.ExistentialType))
    .orElse[scala.meta.internal.semanticdb.TypeMessage.SealedValue](__fieldsMap.get(scalaDescriptor.findFieldByNumber(10).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb.UniversalType]]).map(scala.meta.internal.semanticdb.TypeMessage.SealedValue.UniversalType))
    .orElse[scala.meta.internal.semanticdb.TypeMessage.SealedValue](__fieldsMap.get(scalaDescriptor.findFieldByNumber(13).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb.ByNameType]]).map(scala.meta.internal.semanticdb.TypeMessage.SealedValue.ByNameType))
    .orElse[scala.meta.internal.semanticdb.TypeMessage.SealedValue](__fieldsMap.get(scalaDescriptor.findFieldByNumber(14).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb.RepeatedType]]).map(scala.meta.internal.semanticdb.TypeMessage.SealedValue.RepeatedType))
    .getOrElse(scala.meta.internal.semanticdb.TypeMessage.SealedValue.Empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticdbProto.javaDescriptor.getMessageTypes.get(5)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticdbProto.scalaDescriptor.messages(5)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 2 => __out = scala.meta.internal.semanticdb.TypeRef
      case 20 => __out = scala.meta.internal.semanticdb.SingleType
      case 21 => __out = scala.meta.internal.semanticdb.ThisType
      case 22 => __out = scala.meta.internal.semanticdb.SuperType
      case 23 => __out = scala.meta.internal.semanticdb.ConstantType
      case 17 => __out = scala.meta.internal.semanticdb.IntersectionType
      case 18 => __out = scala.meta.internal.semanticdb.UnionType
      case 19 => __out = scala.meta.internal.semanticdb.WithType
      case 7 => __out = scala.meta.internal.semanticdb.StructuralType
      case 8 => __out = scala.meta.internal.semanticdb.AnnotatedType
      case 9 => __out = scala.meta.internal.semanticdb.ExistentialType
      case 10 => __out = scala.meta.internal.semanticdb.UniversalType
      case 13 => __out = scala.meta.internal.semanticdb.ByNameType
      case 14 => __out = scala.meta.internal.semanticdb.RepeatedType
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = scala.meta.internal.semanticdb.TypeMessage(
  )
  sealed trait SealedValue extends _root_.scalapb.GeneratedOneof {
    def isEmpty: _root_.scala.Boolean = false
    def isDefined: _root_.scala.Boolean = true
    def isTypeRef: _root_.scala.Boolean = false
    def isSingleType: _root_.scala.Boolean = false
    def isThisType: _root_.scala.Boolean = false
    def isSuperType: _root_.scala.Boolean = false
    def isConstantType: _root_.scala.Boolean = false
    def isIntersectionType: _root_.scala.Boolean = false
    def isUnionType: _root_.scala.Boolean = false
    def isWithType: _root_.scala.Boolean = false
    def isStructuralType: _root_.scala.Boolean = false
    def isAnnotatedType: _root_.scala.Boolean = false
    def isExistentialType: _root_.scala.Boolean = false
    def isUniversalType: _root_.scala.Boolean = false
    def isByNameType: _root_.scala.Boolean = false
    def isRepeatedType: _root_.scala.Boolean = false
    def typeRef: _root_.scala.Option[scala.meta.internal.semanticdb.TypeRef] = None
    def singleType: _root_.scala.Option[scala.meta.internal.semanticdb.SingleType] = None
    def thisType: _root_.scala.Option[scala.meta.internal.semanticdb.ThisType] = None
    def superType: _root_.scala.Option[scala.meta.internal.semanticdb.SuperType] = None
    def constantType: _root_.scala.Option[scala.meta.internal.semanticdb.ConstantType] = None
    def intersectionType: _root_.scala.Option[scala.meta.internal.semanticdb.IntersectionType] = None
    def unionType: _root_.scala.Option[scala.meta.internal.semanticdb.UnionType] = None
    def withType: _root_.scala.Option[scala.meta.internal.semanticdb.WithType] = None
    def structuralType: _root_.scala.Option[scala.meta.internal.semanticdb.StructuralType] = None
    def annotatedType: _root_.scala.Option[scala.meta.internal.semanticdb.AnnotatedType] = None
    def existentialType: _root_.scala.Option[scala.meta.internal.semanticdb.ExistentialType] = None
    def universalType: _root_.scala.Option[scala.meta.internal.semanticdb.UniversalType] = None
    def byNameType: _root_.scala.Option[scala.meta.internal.semanticdb.ByNameType] = None
    def repeatedType: _root_.scala.Option[scala.meta.internal.semanticdb.RepeatedType] = None
  }
  object SealedValue extends {
    @SerialVersionUID(0L)
    case object Empty extends scala.meta.internal.semanticdb.TypeMessage.SealedValue {
      type ValueType = _root_.scala.Nothing
      override def isEmpty: _root_.scala.Boolean = true
      override def isDefined: _root_.scala.Boolean = false
      override def number: _root_.scala.Int = 0
      override def value: _root_.scala.Nothing = throw new java.util.NoSuchElementException("Empty.value")
    }
  
    @SerialVersionUID(0L)
    final case class TypeRef(value: scala.meta.internal.semanticdb.TypeRef) extends scala.meta.internal.semanticdb.TypeMessage.SealedValue {
      type ValueType = scala.meta.internal.semanticdb.TypeRef
      override def isTypeRef: _root_.scala.Boolean = true
      override def typeRef: _root_.scala.Option[scala.meta.internal.semanticdb.TypeRef] = Some(value)
      override def number: _root_.scala.Int = 2
    }
    @SerialVersionUID(0L)
    final case class SingleType(value: scala.meta.internal.semanticdb.SingleType) extends scala.meta.internal.semanticdb.TypeMessage.SealedValue {
      type ValueType = scala.meta.internal.semanticdb.SingleType
      override def isSingleType: _root_.scala.Boolean = true
      override def singleType: _root_.scala.Option[scala.meta.internal.semanticdb.SingleType] = Some(value)
      override def number: _root_.scala.Int = 20
    }
    @SerialVersionUID(0L)
    final case class ThisType(value: scala.meta.internal.semanticdb.ThisType) extends scala.meta.internal.semanticdb.TypeMessage.SealedValue {
      type ValueType = scala.meta.internal.semanticdb.ThisType
      override def isThisType: _root_.scala.Boolean = true
      override def thisType: _root_.scala.Option[scala.meta.internal.semanticdb.ThisType] = Some(value)
      override def number: _root_.scala.Int = 21
    }
    @SerialVersionUID(0L)
    final case class SuperType(value: scala.meta.internal.semanticdb.SuperType) extends scala.meta.internal.semanticdb.TypeMessage.SealedValue {
      type ValueType = scala.meta.internal.semanticdb.SuperType
      override def isSuperType: _root_.scala.Boolean = true
      override def superType: _root_.scala.Option[scala.meta.internal.semanticdb.SuperType] = Some(value)
      override def number: _root_.scala.Int = 22
    }
    @SerialVersionUID(0L)
    final case class ConstantType(value: scala.meta.internal.semanticdb.ConstantType) extends scala.meta.internal.semanticdb.TypeMessage.SealedValue {
      type ValueType = scala.meta.internal.semanticdb.ConstantType
      override def isConstantType: _root_.scala.Boolean = true
      override def constantType: _root_.scala.Option[scala.meta.internal.semanticdb.ConstantType] = Some(value)
      override def number: _root_.scala.Int = 23
    }
    @SerialVersionUID(0L)
    final case class IntersectionType(value: scala.meta.internal.semanticdb.IntersectionType) extends scala.meta.internal.semanticdb.TypeMessage.SealedValue {
      type ValueType = scala.meta.internal.semanticdb.IntersectionType
      override def isIntersectionType: _root_.scala.Boolean = true
      override def intersectionType: _root_.scala.Option[scala.meta.internal.semanticdb.IntersectionType] = Some(value)
      override def number: _root_.scala.Int = 17
    }
    @SerialVersionUID(0L)
    final case class UnionType(value: scala.meta.internal.semanticdb.UnionType) extends scala.meta.internal.semanticdb.TypeMessage.SealedValue {
      type ValueType = scala.meta.internal.semanticdb.UnionType
      override def isUnionType: _root_.scala.Boolean = true
      override def unionType: _root_.scala.Option[scala.meta.internal.semanticdb.UnionType] = Some(value)
      override def number: _root_.scala.Int = 18
    }
    @SerialVersionUID(0L)
    final case class WithType(value: scala.meta.internal.semanticdb.WithType) extends scala.meta.internal.semanticdb.TypeMessage.SealedValue {
      type ValueType = scala.meta.internal.semanticdb.WithType
      override def isWithType: _root_.scala.Boolean = true
      override def withType: _root_.scala.Option[scala.meta.internal.semanticdb.WithType] = Some(value)
      override def number: _root_.scala.Int = 19
    }
    @SerialVersionUID(0L)
    final case class StructuralType(value: scala.meta.internal.semanticdb.StructuralType) extends scala.meta.internal.semanticdb.TypeMessage.SealedValue {
      type ValueType = scala.meta.internal.semanticdb.StructuralType
      override def isStructuralType: _root_.scala.Boolean = true
      override def structuralType: _root_.scala.Option[scala.meta.internal.semanticdb.StructuralType] = Some(value)
      override def number: _root_.scala.Int = 7
    }
    @SerialVersionUID(0L)
    final case class AnnotatedType(value: scala.meta.internal.semanticdb.AnnotatedType) extends scala.meta.internal.semanticdb.TypeMessage.SealedValue {
      type ValueType = scala.meta.internal.semanticdb.AnnotatedType
      override def isAnnotatedType: _root_.scala.Boolean = true
      override def annotatedType: _root_.scala.Option[scala.meta.internal.semanticdb.AnnotatedType] = Some(value)
      override def number: _root_.scala.Int = 8
    }
    @SerialVersionUID(0L)
    final case class ExistentialType(value: scala.meta.internal.semanticdb.ExistentialType) extends scala.meta.internal.semanticdb.TypeMessage.SealedValue {
      type ValueType = scala.meta.internal.semanticdb.ExistentialType
      override def isExistentialType: _root_.scala.Boolean = true
      override def existentialType: _root_.scala.Option[scala.meta.internal.semanticdb.ExistentialType] = Some(value)
      override def number: _root_.scala.Int = 9
    }
    @SerialVersionUID(0L)
    final case class UniversalType(value: scala.meta.internal.semanticdb.UniversalType) extends scala.meta.internal.semanticdb.TypeMessage.SealedValue {
      type ValueType = scala.meta.internal.semanticdb.UniversalType
      override def isUniversalType: _root_.scala.Boolean = true
      override def universalType: _root_.scala.Option[scala.meta.internal.semanticdb.UniversalType] = Some(value)
      override def number: _root_.scala.Int = 10
    }
    @SerialVersionUID(0L)
    final case class ByNameType(value: scala.meta.internal.semanticdb.ByNameType) extends scala.meta.internal.semanticdb.TypeMessage.SealedValue {
      type ValueType = scala.meta.internal.semanticdb.ByNameType
      override def isByNameType: _root_.scala.Boolean = true
      override def byNameType: _root_.scala.Option[scala.meta.internal.semanticdb.ByNameType] = Some(value)
      override def number: _root_.scala.Int = 13
    }
    @SerialVersionUID(0L)
    final case class RepeatedType(value: scala.meta.internal.semanticdb.RepeatedType) extends scala.meta.internal.semanticdb.TypeMessage.SealedValue {
      type ValueType = scala.meta.internal.semanticdb.RepeatedType
      override def isRepeatedType: _root_.scala.Boolean = true
      override def repeatedType: _root_.scala.Option[scala.meta.internal.semanticdb.RepeatedType] = Some(value)
      override def number: _root_.scala.Int = 14
    }
  }
  implicit class TypeMessageLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.TypeMessage]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.TypeMessage](_l) {
    def typeRef: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.TypeRef] = field(_.getTypeRef)((c_, f_) => c_.copy(sealedValue = scala.meta.internal.semanticdb.TypeMessage.SealedValue.TypeRef(f_)))
    def singleType: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.SingleType] = field(_.getSingleType)((c_, f_) => c_.copy(sealedValue = scala.meta.internal.semanticdb.TypeMessage.SealedValue.SingleType(f_)))
    def thisType: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.ThisType] = field(_.getThisType)((c_, f_) => c_.copy(sealedValue = scala.meta.internal.semanticdb.TypeMessage.SealedValue.ThisType(f_)))
    def superType: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.SuperType] = field(_.getSuperType)((c_, f_) => c_.copy(sealedValue = scala.meta.internal.semanticdb.TypeMessage.SealedValue.SuperType(f_)))
    def constantType: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.ConstantType] = field(_.getConstantType)((c_, f_) => c_.copy(sealedValue = scala.meta.internal.semanticdb.TypeMessage.SealedValue.ConstantType(f_)))
    def intersectionType: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.IntersectionType] = field(_.getIntersectionType)((c_, f_) => c_.copy(sealedValue = scala.meta.internal.semanticdb.TypeMessage.SealedValue.IntersectionType(f_)))
    def unionType: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.UnionType] = field(_.getUnionType)((c_, f_) => c_.copy(sealedValue = scala.meta.internal.semanticdb.TypeMessage.SealedValue.UnionType(f_)))
    def withType: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.WithType] = field(_.getWithType)((c_, f_) => c_.copy(sealedValue = scala.meta.internal.semanticdb.TypeMessage.SealedValue.WithType(f_)))
    def structuralType: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.StructuralType] = field(_.getStructuralType)((c_, f_) => c_.copy(sealedValue = scala.meta.internal.semanticdb.TypeMessage.SealedValue.StructuralType(f_)))
    def annotatedType: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.AnnotatedType] = field(_.getAnnotatedType)((c_, f_) => c_.copy(sealedValue = scala.meta.internal.semanticdb.TypeMessage.SealedValue.AnnotatedType(f_)))
    def existentialType: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.ExistentialType] = field(_.getExistentialType)((c_, f_) => c_.copy(sealedValue = scala.meta.internal.semanticdb.TypeMessage.SealedValue.ExistentialType(f_)))
    def universalType: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.UniversalType] = field(_.getUniversalType)((c_, f_) => c_.copy(sealedValue = scala.meta.internal.semanticdb.TypeMessage.SealedValue.UniversalType(f_)))
    def byNameType: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.ByNameType] = field(_.getByNameType)((c_, f_) => c_.copy(sealedValue = scala.meta.internal.semanticdb.TypeMessage.SealedValue.ByNameType(f_)))
    def repeatedType: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.RepeatedType] = field(_.getRepeatedType)((c_, f_) => c_.copy(sealedValue = scala.meta.internal.semanticdb.TypeMessage.SealedValue.RepeatedType(f_)))
    def sealedValue: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.TypeMessage.SealedValue] = field(_.sealedValue)((c_, f_) => c_.copy(sealedValue = f_))
  }
  final val TYPEREF_FIELD_NUMBER = 2
  final val SINGLETYPE_FIELD_NUMBER = 20
  final val THISTYPE_FIELD_NUMBER = 21
  final val SUPERTYPE_FIELD_NUMBER = 22
  final val CONSTANTTYPE_FIELD_NUMBER = 23
  final val INTERSECTIONTYPE_FIELD_NUMBER = 17
  final val UNIONTYPE_FIELD_NUMBER = 18
  final val WITHTYPE_FIELD_NUMBER = 19
  final val STRUCTURALTYPE_FIELD_NUMBER = 7
  final val ANNOTATEDTYPE_FIELD_NUMBER = 8
  final val EXISTENTIALTYPE_FIELD_NUMBER = 9
  final val UNIVERSALTYPE_FIELD_NUMBER = 10
  final val BYNAMETYPE_FIELD_NUMBER = 13
  final val REPEATEDTYPE_FIELD_NUMBER = 14
}

@SerialVersionUID(0L)
final case class TypeRef(
    prefix: scala.meta.internal.semanticdb.Type = scala.meta.internal.semanticdb.TypeRef._typemapper_prefix.toCustom(scala.meta.internal.semanticdb.TypeMessage.defaultInstance),
    symbol: _root_.scala.Predef.String = "",
    typeArguments: _root_.scala.collection.Seq[scala.meta.internal.semanticdb.Type] = _root_.scala.collection.Seq.empty
    ) extends scala.meta.internal.semanticdb.Type with scalapb.GeneratedMessage with scalapb.Message[TypeRef] with scalapb.lenses.Updatable[TypeRef] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = scala.meta.internal.semanticdb.TypeRef._typemapper_prefix.toBase(prefix)
        if (__value != scala.meta.internal.semanticdb.TypeMessage.defaultInstance) {
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        }
      };
      
      {
        val __value = symbol
        if (__value != "") {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
        }
      };
      typeArguments.foreach { __item =>
        val __value = scala.meta.internal.semanticdb.TypeRef._typemapper_typeArguments.toBase(__item)
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = scala.meta.internal.semanticdb.TypeRef._typemapper_prefix.toBase(prefix)
        if (__v != scala.meta.internal.semanticdb.TypeMessage.defaultInstance) {
          _output__.writeTag(1, 2)
          _output__.writeUInt32NoTag(__v.serializedSize)
          __v.writeTo(_output__)
        }
      };
      {
        val __v = symbol
        if (__v != "") {
          _output__.writeString(2, __v)
        }
      };
      typeArguments.foreach { __v =>
        val __m = scala.meta.internal.semanticdb.TypeRef._typemapper_typeArguments.toBase(__v)
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.TypeRef = {
      var __prefix = this.prefix
      var __symbol = this.symbol
      val __typeArguments = (_root_.scala.collection.immutable.Vector.newBuilder[scala.meta.internal.semanticdb.Type] ++= this.typeArguments)
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __prefix = scala.meta.internal.semanticdb.TypeRef._typemapper_prefix.toCustom(_root_.scalapb.LiteParser.readMessage(_input__, scala.meta.internal.semanticdb.TypeRef._typemapper_prefix.toBase(__prefix)))
          case 18 =>
            __symbol = _input__.readString()
          case 26 =>
            __typeArguments += scala.meta.internal.semanticdb.TypeRef._typemapper_typeArguments.toCustom(_root_.scalapb.LiteParser.readMessage(_input__, scala.meta.internal.semanticdb.TypeMessage.defaultInstance))
          case tag => _input__.skipField(tag)
        }
      }
      scala.meta.internal.semanticdb.TypeRef(
          prefix = __prefix,
          symbol = __symbol,
          typeArguments = __typeArguments.result()
      )
    }
    def withPrefix(__v: scala.meta.internal.semanticdb.Type): TypeRef = copy(prefix = __v)
    def withSymbol(__v: _root_.scala.Predef.String): TypeRef = copy(symbol = __v)
    def clearTypeArguments = copy(typeArguments = _root_.scala.collection.Seq.empty)
    def addTypeArguments(__vs: scala.meta.internal.semanticdb.Type*): TypeRef = addAllTypeArguments(__vs)
    def addAllTypeArguments(__vs: TraversableOnce[scala.meta.internal.semanticdb.Type]): TypeRef = copy(typeArguments = typeArguments ++ __vs)
    def withTypeArguments(__v: _root_.scala.collection.Seq[scala.meta.internal.semanticdb.Type]): TypeRef = copy(typeArguments = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = scala.meta.internal.semanticdb.TypeRef._typemapper_prefix.toBase(prefix)
          if (__t != scala.meta.internal.semanticdb.TypeMessage.defaultInstance) __t else null
        }
        case 2 => {
          val __t = symbol
          if (__t != "") __t else null
        }
        case 3 => typeArguments.map(scala.meta.internal.semanticdb.TypeRef._typemapper_typeArguments.toBase)(_root_.scala.collection.breakOut)
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => scala.meta.internal.semanticdb.TypeRef._typemapper_prefix.toBase(prefix).toPMessage
        case 2 => _root_.scalapb.descriptors.PString(symbol)
        case 3 => _root_.scalapb.descriptors.PRepeated(typeArguments.map(scala.meta.internal.semanticdb.TypeRef._typemapper_typeArguments.toBase(_).toPMessage)(_root_.scala.collection.breakOut))
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = scala.meta.internal.semanticdb.TypeRef
}

object TypeRef extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.TypeRef] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.TypeRef] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): scala.meta.internal.semanticdb.TypeRef = {
    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    scala.meta.internal.semanticdb.TypeRef(
      scala.meta.internal.semanticdb.TypeRef._typemapper_prefix.toCustom(__fieldsMap.getOrElse(__fields.get(0), scala.meta.internal.semanticdb.TypeMessage.defaultInstance).asInstanceOf[scala.meta.internal.semanticdb.TypeMessage]),
      __fieldsMap.getOrElse(__fields.get(1), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.getOrElse(__fields.get(2), Nil).asInstanceOf[_root_.scala.collection.Seq[scala.meta.internal.semanticdb.TypeMessage]].map(scala.meta.internal.semanticdb.TypeRef._typemapper_typeArguments.toCustom)(_root_.scala.collection.breakOut)
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb.TypeRef] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      scala.meta.internal.semanticdb.TypeRef(
        scala.meta.internal.semanticdb.TypeRef._typemapper_prefix.toCustom(__fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[scala.meta.internal.semanticdb.TypeMessage]).getOrElse(scala.meta.internal.semanticdb.TypeMessage.defaultInstance)),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.collection.Seq[scala.meta.internal.semanticdb.TypeMessage]]).getOrElse(_root_.scala.collection.Seq.empty).map(scala.meta.internal.semanticdb.TypeRef._typemapper_typeArguments.toCustom)(_root_.scala.collection.breakOut)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticdbProto.javaDescriptor.getMessageTypes.get(6)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticdbProto.scalaDescriptor.messages(6)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = scala.meta.internal.semanticdb.TypeMessage
      case 3 => __out = scala.meta.internal.semanticdb.TypeMessage
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = scala.meta.internal.semanticdb.TypeRef(
  )
  implicit class TypeRefLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.TypeRef]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.TypeRef](_l) {
    def prefix: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.Type] = field(_.prefix)((c_, f_) => c_.copy(prefix = f_))
    def symbol: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.symbol)((c_, f_) => c_.copy(symbol = f_))
    def typeArguments: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.Seq[scala.meta.internal.semanticdb.Type]] = field(_.typeArguments)((c_, f_) => c_.copy(typeArguments = f_))
  }
  final val PREFIX_FIELD_NUMBER = 1
  final val SYMBOL_FIELD_NUMBER = 2
  final val TYPE_ARGUMENTS_FIELD_NUMBER = 3
  @transient
  private val _typemapper_prefix: _root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TypeMessage, scala.meta.internal.semanticdb.Type] = implicitly[_root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TypeMessage, scala.meta.internal.semanticdb.Type]]
  @transient
  private val _typemapper_typeArguments: _root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TypeMessage, scala.meta.internal.semanticdb.Type] = implicitly[_root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TypeMessage, scala.meta.internal.semanticdb.Type]]
}

@SerialVersionUID(0L)
final case class SingleType(
    prefix: scala.meta.internal.semanticdb.Type = scala.meta.internal.semanticdb.SingleType._typemapper_prefix.toCustom(scala.meta.internal.semanticdb.TypeMessage.defaultInstance),
    symbol: _root_.scala.Predef.String = ""
    ) extends scala.meta.internal.semanticdb.Type with scalapb.GeneratedMessage with scalapb.Message[SingleType] with scalapb.lenses.Updatable[SingleType] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = scala.meta.internal.semanticdb.SingleType._typemapper_prefix.toBase(prefix)
        if (__value != scala.meta.internal.semanticdb.TypeMessage.defaultInstance) {
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        }
      };
      
      {
        val __value = symbol
        if (__value != "") {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
        }
      };
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = scala.meta.internal.semanticdb.SingleType._typemapper_prefix.toBase(prefix)
        if (__v != scala.meta.internal.semanticdb.TypeMessage.defaultInstance) {
          _output__.writeTag(1, 2)
          _output__.writeUInt32NoTag(__v.serializedSize)
          __v.writeTo(_output__)
        }
      };
      {
        val __v = symbol
        if (__v != "") {
          _output__.writeString(2, __v)
        }
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.SingleType = {
      var __prefix = this.prefix
      var __symbol = this.symbol
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __prefix = scala.meta.internal.semanticdb.SingleType._typemapper_prefix.toCustom(_root_.scalapb.LiteParser.readMessage(_input__, scala.meta.internal.semanticdb.SingleType._typemapper_prefix.toBase(__prefix)))
          case 18 =>
            __symbol = _input__.readString()
          case tag => _input__.skipField(tag)
        }
      }
      scala.meta.internal.semanticdb.SingleType(
          prefix = __prefix,
          symbol = __symbol
      )
    }
    def withPrefix(__v: scala.meta.internal.semanticdb.Type): SingleType = copy(prefix = __v)
    def withSymbol(__v: _root_.scala.Predef.String): SingleType = copy(symbol = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = scala.meta.internal.semanticdb.SingleType._typemapper_prefix.toBase(prefix)
          if (__t != scala.meta.internal.semanticdb.TypeMessage.defaultInstance) __t else null
        }
        case 2 => {
          val __t = symbol
          if (__t != "") __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => scala.meta.internal.semanticdb.SingleType._typemapper_prefix.toBase(prefix).toPMessage
        case 2 => _root_.scalapb.descriptors.PString(symbol)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = scala.meta.internal.semanticdb.SingleType
}

object SingleType extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.SingleType] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.SingleType] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): scala.meta.internal.semanticdb.SingleType = {
    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    scala.meta.internal.semanticdb.SingleType(
      scala.meta.internal.semanticdb.SingleType._typemapper_prefix.toCustom(__fieldsMap.getOrElse(__fields.get(0), scala.meta.internal.semanticdb.TypeMessage.defaultInstance).asInstanceOf[scala.meta.internal.semanticdb.TypeMessage]),
      __fieldsMap.getOrElse(__fields.get(1), "").asInstanceOf[_root_.scala.Predef.String]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb.SingleType] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      scala.meta.internal.semanticdb.SingleType(
        scala.meta.internal.semanticdb.SingleType._typemapper_prefix.toCustom(__fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[scala.meta.internal.semanticdb.TypeMessage]).getOrElse(scala.meta.internal.semanticdb.TypeMessage.defaultInstance)),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse("")
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticdbProto.javaDescriptor.getMessageTypes.get(7)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticdbProto.scalaDescriptor.messages(7)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = scala.meta.internal.semanticdb.TypeMessage
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = scala.meta.internal.semanticdb.SingleType(
  )
  implicit class SingleTypeLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.SingleType]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.SingleType](_l) {
    def prefix: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.Type] = field(_.prefix)((c_, f_) => c_.copy(prefix = f_))
    def symbol: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.symbol)((c_, f_) => c_.copy(symbol = f_))
  }
  final val PREFIX_FIELD_NUMBER = 1
  final val SYMBOL_FIELD_NUMBER = 2
  @transient
  private val _typemapper_prefix: _root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TypeMessage, scala.meta.internal.semanticdb.Type] = implicitly[_root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TypeMessage, scala.meta.internal.semanticdb.Type]]
}

@SerialVersionUID(0L)
final case class ThisType(
    symbol: _root_.scala.Predef.String = ""
    ) extends scala.meta.internal.semanticdb.Type with scalapb.GeneratedMessage with scalapb.Message[ThisType] with scalapb.lenses.Updatable[ThisType] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = symbol
        if (__value != "") {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
        }
      };
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = symbol
        if (__v != "") {
          _output__.writeString(1, __v)
        }
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.ThisType = {
      var __symbol = this.symbol
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __symbol = _input__.readString()
          case tag => _input__.skipField(tag)
        }
      }
      scala.meta.internal.semanticdb.ThisType(
          symbol = __symbol
      )
    }
    def withSymbol(__v: _root_.scala.Predef.String): ThisType = copy(symbol = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = symbol
          if (__t != "") __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(symbol)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = scala.meta.internal.semanticdb.ThisType
}

object ThisType extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.ThisType] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.ThisType] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): scala.meta.internal.semanticdb.ThisType = {
    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    scala.meta.internal.semanticdb.ThisType(
      __fieldsMap.getOrElse(__fields.get(0), "").asInstanceOf[_root_.scala.Predef.String]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb.ThisType] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      scala.meta.internal.semanticdb.ThisType(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse("")
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticdbProto.javaDescriptor.getMessageTypes.get(8)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticdbProto.scalaDescriptor.messages(8)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = scala.meta.internal.semanticdb.ThisType(
  )
  implicit class ThisTypeLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.ThisType]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.ThisType](_l) {
    def symbol: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.symbol)((c_, f_) => c_.copy(symbol = f_))
  }
  final val SYMBOL_FIELD_NUMBER = 1
}

@SerialVersionUID(0L)
final case class SuperType(
    prefix: scala.meta.internal.semanticdb.Type = scala.meta.internal.semanticdb.SuperType._typemapper_prefix.toCustom(scala.meta.internal.semanticdb.TypeMessage.defaultInstance),
    symbol: _root_.scala.Predef.String = ""
    ) extends scala.meta.internal.semanticdb.Type with scalapb.GeneratedMessage with scalapb.Message[SuperType] with scalapb.lenses.Updatable[SuperType] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = scala.meta.internal.semanticdb.SuperType._typemapper_prefix.toBase(prefix)
        if (__value != scala.meta.internal.semanticdb.TypeMessage.defaultInstance) {
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        }
      };
      
      {
        val __value = symbol
        if (__value != "") {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
        }
      };
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = scala.meta.internal.semanticdb.SuperType._typemapper_prefix.toBase(prefix)
        if (__v != scala.meta.internal.semanticdb.TypeMessage.defaultInstance) {
          _output__.writeTag(1, 2)
          _output__.writeUInt32NoTag(__v.serializedSize)
          __v.writeTo(_output__)
        }
      };
      {
        val __v = symbol
        if (__v != "") {
          _output__.writeString(2, __v)
        }
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.SuperType = {
      var __prefix = this.prefix
      var __symbol = this.symbol
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __prefix = scala.meta.internal.semanticdb.SuperType._typemapper_prefix.toCustom(_root_.scalapb.LiteParser.readMessage(_input__, scala.meta.internal.semanticdb.SuperType._typemapper_prefix.toBase(__prefix)))
          case 18 =>
            __symbol = _input__.readString()
          case tag => _input__.skipField(tag)
        }
      }
      scala.meta.internal.semanticdb.SuperType(
          prefix = __prefix,
          symbol = __symbol
      )
    }
    def withPrefix(__v: scala.meta.internal.semanticdb.Type): SuperType = copy(prefix = __v)
    def withSymbol(__v: _root_.scala.Predef.String): SuperType = copy(symbol = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = scala.meta.internal.semanticdb.SuperType._typemapper_prefix.toBase(prefix)
          if (__t != scala.meta.internal.semanticdb.TypeMessage.defaultInstance) __t else null
        }
        case 2 => {
          val __t = symbol
          if (__t != "") __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => scala.meta.internal.semanticdb.SuperType._typemapper_prefix.toBase(prefix).toPMessage
        case 2 => _root_.scalapb.descriptors.PString(symbol)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = scala.meta.internal.semanticdb.SuperType
}

object SuperType extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.SuperType] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.SuperType] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): scala.meta.internal.semanticdb.SuperType = {
    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    scala.meta.internal.semanticdb.SuperType(
      scala.meta.internal.semanticdb.SuperType._typemapper_prefix.toCustom(__fieldsMap.getOrElse(__fields.get(0), scala.meta.internal.semanticdb.TypeMessage.defaultInstance).asInstanceOf[scala.meta.internal.semanticdb.TypeMessage]),
      __fieldsMap.getOrElse(__fields.get(1), "").asInstanceOf[_root_.scala.Predef.String]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb.SuperType] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      scala.meta.internal.semanticdb.SuperType(
        scala.meta.internal.semanticdb.SuperType._typemapper_prefix.toCustom(__fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[scala.meta.internal.semanticdb.TypeMessage]).getOrElse(scala.meta.internal.semanticdb.TypeMessage.defaultInstance)),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse("")
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticdbProto.javaDescriptor.getMessageTypes.get(9)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticdbProto.scalaDescriptor.messages(9)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = scala.meta.internal.semanticdb.TypeMessage
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = scala.meta.internal.semanticdb.SuperType(
  )
  implicit class SuperTypeLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.SuperType]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.SuperType](_l) {
    def prefix: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.Type] = field(_.prefix)((c_, f_) => c_.copy(prefix = f_))
    def symbol: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.symbol)((c_, f_) => c_.copy(symbol = f_))
  }
  final val PREFIX_FIELD_NUMBER = 1
  final val SYMBOL_FIELD_NUMBER = 2
  @transient
  private val _typemapper_prefix: _root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TypeMessage, scala.meta.internal.semanticdb.Type] = implicitly[_root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TypeMessage, scala.meta.internal.semanticdb.Type]]
}

@SerialVersionUID(0L)
final case class ConstantType(
    constant: scala.meta.internal.semanticdb.Constant = scala.meta.internal.semanticdb.ConstantType._typemapper_constant.toCustom(scala.meta.internal.semanticdb.ConstantMessage.defaultInstance)
    ) extends scala.meta.internal.semanticdb.Type with scalapb.GeneratedMessage with scalapb.Message[ConstantType] with scalapb.lenses.Updatable[ConstantType] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = scala.meta.internal.semanticdb.ConstantType._typemapper_constant.toBase(constant)
        if (__value != scala.meta.internal.semanticdb.ConstantMessage.defaultInstance) {
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        }
      };
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = scala.meta.internal.semanticdb.ConstantType._typemapper_constant.toBase(constant)
        if (__v != scala.meta.internal.semanticdb.ConstantMessage.defaultInstance) {
          _output__.writeTag(1, 2)
          _output__.writeUInt32NoTag(__v.serializedSize)
          __v.writeTo(_output__)
        }
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.ConstantType = {
      var __constant = this.constant
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __constant = scala.meta.internal.semanticdb.ConstantType._typemapper_constant.toCustom(_root_.scalapb.LiteParser.readMessage(_input__, scala.meta.internal.semanticdb.ConstantType._typemapper_constant.toBase(__constant)))
          case tag => _input__.skipField(tag)
        }
      }
      scala.meta.internal.semanticdb.ConstantType(
          constant = __constant
      )
    }
    def withConstant(__v: scala.meta.internal.semanticdb.Constant): ConstantType = copy(constant = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = scala.meta.internal.semanticdb.ConstantType._typemapper_constant.toBase(constant)
          if (__t != scala.meta.internal.semanticdb.ConstantMessage.defaultInstance) __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => scala.meta.internal.semanticdb.ConstantType._typemapper_constant.toBase(constant).toPMessage
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = scala.meta.internal.semanticdb.ConstantType
}

object ConstantType extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.ConstantType] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.ConstantType] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): scala.meta.internal.semanticdb.ConstantType = {
    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    scala.meta.internal.semanticdb.ConstantType(
      scala.meta.internal.semanticdb.ConstantType._typemapper_constant.toCustom(__fieldsMap.getOrElse(__fields.get(0), scala.meta.internal.semanticdb.ConstantMessage.defaultInstance).asInstanceOf[scala.meta.internal.semanticdb.ConstantMessage])
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb.ConstantType] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      scala.meta.internal.semanticdb.ConstantType(
        scala.meta.internal.semanticdb.ConstantType._typemapper_constant.toCustom(__fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[scala.meta.internal.semanticdb.ConstantMessage]).getOrElse(scala.meta.internal.semanticdb.ConstantMessage.defaultInstance))
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticdbProto.javaDescriptor.getMessageTypes.get(10)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticdbProto.scalaDescriptor.messages(10)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = scala.meta.internal.semanticdb.ConstantMessage
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = scala.meta.internal.semanticdb.ConstantType(
  )
  implicit class ConstantTypeLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.ConstantType]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.ConstantType](_l) {
    def constant: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.Constant] = field(_.constant)((c_, f_) => c_.copy(constant = f_))
  }
  final val CONSTANT_FIELD_NUMBER = 1
  @transient
  private val _typemapper_constant: _root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.ConstantMessage, scala.meta.internal.semanticdb.Constant] = implicitly[_root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.ConstantMessage, scala.meta.internal.semanticdb.Constant]]
}

@SerialVersionUID(0L)
final case class IntersectionType(
    types: _root_.scala.collection.Seq[scala.meta.internal.semanticdb.Type] = _root_.scala.collection.Seq.empty
    ) extends scala.meta.internal.semanticdb.Type with scalapb.GeneratedMessage with scalapb.Message[IntersectionType] with scalapb.lenses.Updatable[IntersectionType] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      types.foreach { __item =>
        val __value = scala.meta.internal.semanticdb.IntersectionType._typemapper_types.toBase(__item)
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      types.foreach { __v =>
        val __m = scala.meta.internal.semanticdb.IntersectionType._typemapper_types.toBase(__v)
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.IntersectionType = {
      val __types = (_root_.scala.collection.immutable.Vector.newBuilder[scala.meta.internal.semanticdb.Type] ++= this.types)
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __types += scala.meta.internal.semanticdb.IntersectionType._typemapper_types.toCustom(_root_.scalapb.LiteParser.readMessage(_input__, scala.meta.internal.semanticdb.TypeMessage.defaultInstance))
          case tag => _input__.skipField(tag)
        }
      }
      scala.meta.internal.semanticdb.IntersectionType(
          types = __types.result()
      )
    }
    def clearTypes = copy(types = _root_.scala.collection.Seq.empty)
    def addTypes(__vs: scala.meta.internal.semanticdb.Type*): IntersectionType = addAllTypes(__vs)
    def addAllTypes(__vs: TraversableOnce[scala.meta.internal.semanticdb.Type]): IntersectionType = copy(types = types ++ __vs)
    def withTypes(__v: _root_.scala.collection.Seq[scala.meta.internal.semanticdb.Type]): IntersectionType = copy(types = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => types.map(scala.meta.internal.semanticdb.IntersectionType._typemapper_types.toBase)(_root_.scala.collection.breakOut)
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PRepeated(types.map(scala.meta.internal.semanticdb.IntersectionType._typemapper_types.toBase(_).toPMessage)(_root_.scala.collection.breakOut))
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = scala.meta.internal.semanticdb.IntersectionType
}

object IntersectionType extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.IntersectionType] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.IntersectionType] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): scala.meta.internal.semanticdb.IntersectionType = {
    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    scala.meta.internal.semanticdb.IntersectionType(
      __fieldsMap.getOrElse(__fields.get(0), Nil).asInstanceOf[_root_.scala.collection.Seq[scala.meta.internal.semanticdb.TypeMessage]].map(scala.meta.internal.semanticdb.IntersectionType._typemapper_types.toCustom)(_root_.scala.collection.breakOut)
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb.IntersectionType] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      scala.meta.internal.semanticdb.IntersectionType(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.collection.Seq[scala.meta.internal.semanticdb.TypeMessage]]).getOrElse(_root_.scala.collection.Seq.empty).map(scala.meta.internal.semanticdb.IntersectionType._typemapper_types.toCustom)(_root_.scala.collection.breakOut)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticdbProto.javaDescriptor.getMessageTypes.get(11)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticdbProto.scalaDescriptor.messages(11)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = scala.meta.internal.semanticdb.TypeMessage
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = scala.meta.internal.semanticdb.IntersectionType(
  )
  implicit class IntersectionTypeLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.IntersectionType]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.IntersectionType](_l) {
    def types: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.Seq[scala.meta.internal.semanticdb.Type]] = field(_.types)((c_, f_) => c_.copy(types = f_))
  }
  final val TYPES_FIELD_NUMBER = 1
  @transient
  private val _typemapper_types: _root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TypeMessage, scala.meta.internal.semanticdb.Type] = implicitly[_root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TypeMessage, scala.meta.internal.semanticdb.Type]]
}

@SerialVersionUID(0L)
final case class UnionType(
    types: _root_.scala.collection.Seq[scala.meta.internal.semanticdb.Type] = _root_.scala.collection.Seq.empty
    ) extends scala.meta.internal.semanticdb.Type with scalapb.GeneratedMessage with scalapb.Message[UnionType] with scalapb.lenses.Updatable[UnionType] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      types.foreach { __item =>
        val __value = scala.meta.internal.semanticdb.UnionType._typemapper_types.toBase(__item)
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      types.foreach { __v =>
        val __m = scala.meta.internal.semanticdb.UnionType._typemapper_types.toBase(__v)
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.UnionType = {
      val __types = (_root_.scala.collection.immutable.Vector.newBuilder[scala.meta.internal.semanticdb.Type] ++= this.types)
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __types += scala.meta.internal.semanticdb.UnionType._typemapper_types.toCustom(_root_.scalapb.LiteParser.readMessage(_input__, scala.meta.internal.semanticdb.TypeMessage.defaultInstance))
          case tag => _input__.skipField(tag)
        }
      }
      scala.meta.internal.semanticdb.UnionType(
          types = __types.result()
      )
    }
    def clearTypes = copy(types = _root_.scala.collection.Seq.empty)
    def addTypes(__vs: scala.meta.internal.semanticdb.Type*): UnionType = addAllTypes(__vs)
    def addAllTypes(__vs: TraversableOnce[scala.meta.internal.semanticdb.Type]): UnionType = copy(types = types ++ __vs)
    def withTypes(__v: _root_.scala.collection.Seq[scala.meta.internal.semanticdb.Type]): UnionType = copy(types = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => types.map(scala.meta.internal.semanticdb.UnionType._typemapper_types.toBase)(_root_.scala.collection.breakOut)
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PRepeated(types.map(scala.meta.internal.semanticdb.UnionType._typemapper_types.toBase(_).toPMessage)(_root_.scala.collection.breakOut))
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = scala.meta.internal.semanticdb.UnionType
}

object UnionType extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.UnionType] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.UnionType] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): scala.meta.internal.semanticdb.UnionType = {
    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    scala.meta.internal.semanticdb.UnionType(
      __fieldsMap.getOrElse(__fields.get(0), Nil).asInstanceOf[_root_.scala.collection.Seq[scala.meta.internal.semanticdb.TypeMessage]].map(scala.meta.internal.semanticdb.UnionType._typemapper_types.toCustom)(_root_.scala.collection.breakOut)
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb.UnionType] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      scala.meta.internal.semanticdb.UnionType(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.collection.Seq[scala.meta.internal.semanticdb.TypeMessage]]).getOrElse(_root_.scala.collection.Seq.empty).map(scala.meta.internal.semanticdb.UnionType._typemapper_types.toCustom)(_root_.scala.collection.breakOut)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticdbProto.javaDescriptor.getMessageTypes.get(12)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticdbProto.scalaDescriptor.messages(12)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = scala.meta.internal.semanticdb.TypeMessage
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = scala.meta.internal.semanticdb.UnionType(
  )
  implicit class UnionTypeLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.UnionType]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.UnionType](_l) {
    def types: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.Seq[scala.meta.internal.semanticdb.Type]] = field(_.types)((c_, f_) => c_.copy(types = f_))
  }
  final val TYPES_FIELD_NUMBER = 1
  @transient
  private val _typemapper_types: _root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TypeMessage, scala.meta.internal.semanticdb.Type] = implicitly[_root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TypeMessage, scala.meta.internal.semanticdb.Type]]
}

@SerialVersionUID(0L)
final case class WithType(
    types: _root_.scala.collection.Seq[scala.meta.internal.semanticdb.Type] = _root_.scala.collection.Seq.empty
    ) extends scala.meta.internal.semanticdb.Type with scalapb.GeneratedMessage with scalapb.Message[WithType] with scalapb.lenses.Updatable[WithType] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      types.foreach { __item =>
        val __value = scala.meta.internal.semanticdb.WithType._typemapper_types.toBase(__item)
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      types.foreach { __v =>
        val __m = scala.meta.internal.semanticdb.WithType._typemapper_types.toBase(__v)
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.WithType = {
      val __types = (_root_.scala.collection.immutable.Vector.newBuilder[scala.meta.internal.semanticdb.Type] ++= this.types)
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __types += scala.meta.internal.semanticdb.WithType._typemapper_types.toCustom(_root_.scalapb.LiteParser.readMessage(_input__, scala.meta.internal.semanticdb.TypeMessage.defaultInstance))
          case tag => _input__.skipField(tag)
        }
      }
      scala.meta.internal.semanticdb.WithType(
          types = __types.result()
      )
    }
    def clearTypes = copy(types = _root_.scala.collection.Seq.empty)
    def addTypes(__vs: scala.meta.internal.semanticdb.Type*): WithType = addAllTypes(__vs)
    def addAllTypes(__vs: TraversableOnce[scala.meta.internal.semanticdb.Type]): WithType = copy(types = types ++ __vs)
    def withTypes(__v: _root_.scala.collection.Seq[scala.meta.internal.semanticdb.Type]): WithType = copy(types = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => types.map(scala.meta.internal.semanticdb.WithType._typemapper_types.toBase)(_root_.scala.collection.breakOut)
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PRepeated(types.map(scala.meta.internal.semanticdb.WithType._typemapper_types.toBase(_).toPMessage)(_root_.scala.collection.breakOut))
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = scala.meta.internal.semanticdb.WithType
}

object WithType extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.WithType] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.WithType] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): scala.meta.internal.semanticdb.WithType = {
    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    scala.meta.internal.semanticdb.WithType(
      __fieldsMap.getOrElse(__fields.get(0), Nil).asInstanceOf[_root_.scala.collection.Seq[scala.meta.internal.semanticdb.TypeMessage]].map(scala.meta.internal.semanticdb.WithType._typemapper_types.toCustom)(_root_.scala.collection.breakOut)
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb.WithType] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      scala.meta.internal.semanticdb.WithType(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.collection.Seq[scala.meta.internal.semanticdb.TypeMessage]]).getOrElse(_root_.scala.collection.Seq.empty).map(scala.meta.internal.semanticdb.WithType._typemapper_types.toCustom)(_root_.scala.collection.breakOut)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticdbProto.javaDescriptor.getMessageTypes.get(13)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticdbProto.scalaDescriptor.messages(13)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = scala.meta.internal.semanticdb.TypeMessage
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = scala.meta.internal.semanticdb.WithType(
  )
  implicit class WithTypeLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.WithType]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.WithType](_l) {
    def types: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.Seq[scala.meta.internal.semanticdb.Type]] = field(_.types)((c_, f_) => c_.copy(types = f_))
  }
  final val TYPES_FIELD_NUMBER = 1
  @transient
  private val _typemapper_types: _root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TypeMessage, scala.meta.internal.semanticdb.Type] = implicitly[_root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TypeMessage, scala.meta.internal.semanticdb.Type]]
}

@SerialVersionUID(0L)
final case class StructuralType(
    tpe: scala.meta.internal.semanticdb.Type = scala.meta.internal.semanticdb.StructuralType._typemapper_tpe.toCustom(scala.meta.internal.semanticdb.TypeMessage.defaultInstance),
    declarations: _root_.scala.Option[scala.meta.internal.semanticdb.Scope] = None
    ) extends scala.meta.internal.semanticdb.Type with scalapb.GeneratedMessage with scalapb.Message[StructuralType] with scalapb.lenses.Updatable[StructuralType] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = scala.meta.internal.semanticdb.StructuralType._typemapper_tpe.toBase(tpe)
        if (__value != scala.meta.internal.semanticdb.TypeMessage.defaultInstance) {
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        }
      };
      if (declarations.isDefined) {
        val __value = declarations.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = scala.meta.internal.semanticdb.StructuralType._typemapper_tpe.toBase(tpe)
        if (__v != scala.meta.internal.semanticdb.TypeMessage.defaultInstance) {
          _output__.writeTag(4, 2)
          _output__.writeUInt32NoTag(__v.serializedSize)
          __v.writeTo(_output__)
        }
      };
      declarations.foreach { __v =>
        val __m = __v
        _output__.writeTag(5, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.StructuralType = {
      var __tpe = this.tpe
      var __declarations = this.declarations
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 34 =>
            __tpe = scala.meta.internal.semanticdb.StructuralType._typemapper_tpe.toCustom(_root_.scalapb.LiteParser.readMessage(_input__, scala.meta.internal.semanticdb.StructuralType._typemapper_tpe.toBase(__tpe)))
          case 42 =>
            __declarations = Option(_root_.scalapb.LiteParser.readMessage(_input__, __declarations.getOrElse(scala.meta.internal.semanticdb.Scope.defaultInstance)))
          case tag => _input__.skipField(tag)
        }
      }
      scala.meta.internal.semanticdb.StructuralType(
          tpe = __tpe,
          declarations = __declarations
      )
    }
    def withTpe(__v: scala.meta.internal.semanticdb.Type): StructuralType = copy(tpe = __v)
    def getDeclarations: scala.meta.internal.semanticdb.Scope = declarations.getOrElse(scala.meta.internal.semanticdb.Scope.defaultInstance)
    def clearDeclarations: StructuralType = copy(declarations = None)
    def withDeclarations(__v: scala.meta.internal.semanticdb.Scope): StructuralType = copy(declarations = Option(__v))
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 4 => {
          val __t = scala.meta.internal.semanticdb.StructuralType._typemapper_tpe.toBase(tpe)
          if (__t != scala.meta.internal.semanticdb.TypeMessage.defaultInstance) __t else null
        }
        case 5 => declarations.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 4 => scala.meta.internal.semanticdb.StructuralType._typemapper_tpe.toBase(tpe).toPMessage
        case 5 => declarations.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = scala.meta.internal.semanticdb.StructuralType
}

object StructuralType extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.StructuralType] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.StructuralType] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): scala.meta.internal.semanticdb.StructuralType = {
    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    scala.meta.internal.semanticdb.StructuralType(
      scala.meta.internal.semanticdb.StructuralType._typemapper_tpe.toCustom(__fieldsMap.getOrElse(__fields.get(0), scala.meta.internal.semanticdb.TypeMessage.defaultInstance).asInstanceOf[scala.meta.internal.semanticdb.TypeMessage]),
      __fieldsMap.get(__fields.get(1)).asInstanceOf[_root_.scala.Option[scala.meta.internal.semanticdb.Scope]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb.StructuralType] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      scala.meta.internal.semanticdb.StructuralType(
        scala.meta.internal.semanticdb.StructuralType._typemapper_tpe.toCustom(__fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[scala.meta.internal.semanticdb.TypeMessage]).getOrElse(scala.meta.internal.semanticdb.TypeMessage.defaultInstance)),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb.Scope]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticdbProto.javaDescriptor.getMessageTypes.get(14)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticdbProto.scalaDescriptor.messages(14)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 4 => __out = scala.meta.internal.semanticdb.TypeMessage
      case 5 => __out = scala.meta.internal.semanticdb.Scope
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = scala.meta.internal.semanticdb.StructuralType(
  )
  implicit class StructuralTypeLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.StructuralType]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.StructuralType](_l) {
    def tpe: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.Type] = field(_.tpe)((c_, f_) => c_.copy(tpe = f_))
    def declarations: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.Scope] = field(_.getDeclarations)((c_, f_) => c_.copy(declarations = Option(f_)))
    def optionalDeclarations: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[scala.meta.internal.semanticdb.Scope]] = field(_.declarations)((c_, f_) => c_.copy(declarations = f_))
  }
  final val TPE_FIELD_NUMBER = 4
  final val DECLARATIONS_FIELD_NUMBER = 5
  @transient
  private val _typemapper_tpe: _root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TypeMessage, scala.meta.internal.semanticdb.Type] = implicitly[_root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TypeMessage, scala.meta.internal.semanticdb.Type]]
}

@SerialVersionUID(0L)
final case class AnnotatedType(
    annotations: _root_.scala.collection.Seq[scala.meta.internal.semanticdb.Annotation] = _root_.scala.collection.Seq.empty,
    tpe: scala.meta.internal.semanticdb.Type = scala.meta.internal.semanticdb.AnnotatedType._typemapper_tpe.toCustom(scala.meta.internal.semanticdb.TypeMessage.defaultInstance)
    ) extends scala.meta.internal.semanticdb.Type with scalapb.GeneratedMessage with scalapb.Message[AnnotatedType] with scalapb.lenses.Updatable[AnnotatedType] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      annotations.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      
      {
        val __value = scala.meta.internal.semanticdb.AnnotatedType._typemapper_tpe.toBase(tpe)
        if (__value != scala.meta.internal.semanticdb.TypeMessage.defaultInstance) {
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        }
      };
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = scala.meta.internal.semanticdb.AnnotatedType._typemapper_tpe.toBase(tpe)
        if (__v != scala.meta.internal.semanticdb.TypeMessage.defaultInstance) {
          _output__.writeTag(1, 2)
          _output__.writeUInt32NoTag(__v.serializedSize)
          __v.writeTo(_output__)
        }
      };
      annotations.foreach { __v =>
        val __m = __v
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.AnnotatedType = {
      val __annotations = (_root_.scala.collection.immutable.Vector.newBuilder[scala.meta.internal.semanticdb.Annotation] ++= this.annotations)
      var __tpe = this.tpe
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 26 =>
            __annotations += _root_.scalapb.LiteParser.readMessage(_input__, scala.meta.internal.semanticdb.Annotation.defaultInstance)
          case 10 =>
            __tpe = scala.meta.internal.semanticdb.AnnotatedType._typemapper_tpe.toCustom(_root_.scalapb.LiteParser.readMessage(_input__, scala.meta.internal.semanticdb.AnnotatedType._typemapper_tpe.toBase(__tpe)))
          case tag => _input__.skipField(tag)
        }
      }
      scala.meta.internal.semanticdb.AnnotatedType(
          annotations = __annotations.result(),
          tpe = __tpe
      )
    }
    def clearAnnotations = copy(annotations = _root_.scala.collection.Seq.empty)
    def addAnnotations(__vs: scala.meta.internal.semanticdb.Annotation*): AnnotatedType = addAllAnnotations(__vs)
    def addAllAnnotations(__vs: TraversableOnce[scala.meta.internal.semanticdb.Annotation]): AnnotatedType = copy(annotations = annotations ++ __vs)
    def withAnnotations(__v: _root_.scala.collection.Seq[scala.meta.internal.semanticdb.Annotation]): AnnotatedType = copy(annotations = __v)
    def withTpe(__v: scala.meta.internal.semanticdb.Type): AnnotatedType = copy(tpe = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 3 => annotations
        case 1 => {
          val __t = scala.meta.internal.semanticdb.AnnotatedType._typemapper_tpe.toBase(tpe)
          if (__t != scala.meta.internal.semanticdb.TypeMessage.defaultInstance) __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 3 => _root_.scalapb.descriptors.PRepeated(annotations.map(_.toPMessage)(_root_.scala.collection.breakOut))
        case 1 => scala.meta.internal.semanticdb.AnnotatedType._typemapper_tpe.toBase(tpe).toPMessage
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = scala.meta.internal.semanticdb.AnnotatedType
}

object AnnotatedType extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.AnnotatedType] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.AnnotatedType] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): scala.meta.internal.semanticdb.AnnotatedType = {
    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    scala.meta.internal.semanticdb.AnnotatedType(
      __fieldsMap.getOrElse(__fields.get(0), Nil).asInstanceOf[_root_.scala.collection.Seq[scala.meta.internal.semanticdb.Annotation]],
      scala.meta.internal.semanticdb.AnnotatedType._typemapper_tpe.toCustom(__fieldsMap.getOrElse(__fields.get(1), scala.meta.internal.semanticdb.TypeMessage.defaultInstance).asInstanceOf[scala.meta.internal.semanticdb.TypeMessage])
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb.AnnotatedType] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      scala.meta.internal.semanticdb.AnnotatedType(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.collection.Seq[scala.meta.internal.semanticdb.Annotation]]).getOrElse(_root_.scala.collection.Seq.empty),
        scala.meta.internal.semanticdb.AnnotatedType._typemapper_tpe.toCustom(__fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[scala.meta.internal.semanticdb.TypeMessage]).getOrElse(scala.meta.internal.semanticdb.TypeMessage.defaultInstance))
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticdbProto.javaDescriptor.getMessageTypes.get(15)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticdbProto.scalaDescriptor.messages(15)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 3 => __out = scala.meta.internal.semanticdb.Annotation
      case 1 => __out = scala.meta.internal.semanticdb.TypeMessage
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = scala.meta.internal.semanticdb.AnnotatedType(
  )
  implicit class AnnotatedTypeLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.AnnotatedType]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.AnnotatedType](_l) {
    def annotations: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.Seq[scala.meta.internal.semanticdb.Annotation]] = field(_.annotations)((c_, f_) => c_.copy(annotations = f_))
    def tpe: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.Type] = field(_.tpe)((c_, f_) => c_.copy(tpe = f_))
  }
  final val ANNOTATIONS_FIELD_NUMBER = 3
  final val TPE_FIELD_NUMBER = 1
  @transient
  private val _typemapper_tpe: _root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TypeMessage, scala.meta.internal.semanticdb.Type] = implicitly[_root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TypeMessage, scala.meta.internal.semanticdb.Type]]
}

@SerialVersionUID(0L)
final case class ExistentialType(
    tpe: scala.meta.internal.semanticdb.Type = scala.meta.internal.semanticdb.ExistentialType._typemapper_tpe.toCustom(scala.meta.internal.semanticdb.TypeMessage.defaultInstance),
    declarations: _root_.scala.Option[scala.meta.internal.semanticdb.Scope] = None
    ) extends scala.meta.internal.semanticdb.Type with scalapb.GeneratedMessage with scalapb.Message[ExistentialType] with scalapb.lenses.Updatable[ExistentialType] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = scala.meta.internal.semanticdb.ExistentialType._typemapper_tpe.toBase(tpe)
        if (__value != scala.meta.internal.semanticdb.TypeMessage.defaultInstance) {
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        }
      };
      if (declarations.isDefined) {
        val __value = declarations.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = scala.meta.internal.semanticdb.ExistentialType._typemapper_tpe.toBase(tpe)
        if (__v != scala.meta.internal.semanticdb.TypeMessage.defaultInstance) {
          _output__.writeTag(1, 2)
          _output__.writeUInt32NoTag(__v.serializedSize)
          __v.writeTo(_output__)
        }
      };
      declarations.foreach { __v =>
        val __m = __v
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.ExistentialType = {
      var __tpe = this.tpe
      var __declarations = this.declarations
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __tpe = scala.meta.internal.semanticdb.ExistentialType._typemapper_tpe.toCustom(_root_.scalapb.LiteParser.readMessage(_input__, scala.meta.internal.semanticdb.ExistentialType._typemapper_tpe.toBase(__tpe)))
          case 26 =>
            __declarations = Option(_root_.scalapb.LiteParser.readMessage(_input__, __declarations.getOrElse(scala.meta.internal.semanticdb.Scope.defaultInstance)))
          case tag => _input__.skipField(tag)
        }
      }
      scala.meta.internal.semanticdb.ExistentialType(
          tpe = __tpe,
          declarations = __declarations
      )
    }
    def withTpe(__v: scala.meta.internal.semanticdb.Type): ExistentialType = copy(tpe = __v)
    def getDeclarations: scala.meta.internal.semanticdb.Scope = declarations.getOrElse(scala.meta.internal.semanticdb.Scope.defaultInstance)
    def clearDeclarations: ExistentialType = copy(declarations = None)
    def withDeclarations(__v: scala.meta.internal.semanticdb.Scope): ExistentialType = copy(declarations = Option(__v))
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = scala.meta.internal.semanticdb.ExistentialType._typemapper_tpe.toBase(tpe)
          if (__t != scala.meta.internal.semanticdb.TypeMessage.defaultInstance) __t else null
        }
        case 3 => declarations.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => scala.meta.internal.semanticdb.ExistentialType._typemapper_tpe.toBase(tpe).toPMessage
        case 3 => declarations.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = scala.meta.internal.semanticdb.ExistentialType
}

object ExistentialType extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.ExistentialType] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.ExistentialType] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): scala.meta.internal.semanticdb.ExistentialType = {
    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    scala.meta.internal.semanticdb.ExistentialType(
      scala.meta.internal.semanticdb.ExistentialType._typemapper_tpe.toCustom(__fieldsMap.getOrElse(__fields.get(0), scala.meta.internal.semanticdb.TypeMessage.defaultInstance).asInstanceOf[scala.meta.internal.semanticdb.TypeMessage]),
      __fieldsMap.get(__fields.get(1)).asInstanceOf[_root_.scala.Option[scala.meta.internal.semanticdb.Scope]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb.ExistentialType] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      scala.meta.internal.semanticdb.ExistentialType(
        scala.meta.internal.semanticdb.ExistentialType._typemapper_tpe.toCustom(__fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[scala.meta.internal.semanticdb.TypeMessage]).getOrElse(scala.meta.internal.semanticdb.TypeMessage.defaultInstance)),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb.Scope]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticdbProto.javaDescriptor.getMessageTypes.get(16)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticdbProto.scalaDescriptor.messages(16)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = scala.meta.internal.semanticdb.TypeMessage
      case 3 => __out = scala.meta.internal.semanticdb.Scope
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = scala.meta.internal.semanticdb.ExistentialType(
  )
  implicit class ExistentialTypeLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.ExistentialType]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.ExistentialType](_l) {
    def tpe: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.Type] = field(_.tpe)((c_, f_) => c_.copy(tpe = f_))
    def declarations: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.Scope] = field(_.getDeclarations)((c_, f_) => c_.copy(declarations = Option(f_)))
    def optionalDeclarations: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[scala.meta.internal.semanticdb.Scope]] = field(_.declarations)((c_, f_) => c_.copy(declarations = f_))
  }
  final val TPE_FIELD_NUMBER = 1
  final val DECLARATIONS_FIELD_NUMBER = 3
  @transient
  private val _typemapper_tpe: _root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TypeMessage, scala.meta.internal.semanticdb.Type] = implicitly[_root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TypeMessage, scala.meta.internal.semanticdb.Type]]
}

@SerialVersionUID(0L)
final case class UniversalType(
    typeParameters: _root_.scala.Option[scala.meta.internal.semanticdb.Scope] = None,
    tpe: scala.meta.internal.semanticdb.Type = scala.meta.internal.semanticdb.UniversalType._typemapper_tpe.toCustom(scala.meta.internal.semanticdb.TypeMessage.defaultInstance)
    ) extends scala.meta.internal.semanticdb.Type with scalapb.GeneratedMessage with scalapb.Message[UniversalType] with scalapb.lenses.Updatable[UniversalType] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (typeParameters.isDefined) {
        val __value = typeParameters.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      
      {
        val __value = scala.meta.internal.semanticdb.UniversalType._typemapper_tpe.toBase(tpe)
        if (__value != scala.meta.internal.semanticdb.TypeMessage.defaultInstance) {
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        }
      };
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = scala.meta.internal.semanticdb.UniversalType._typemapper_tpe.toBase(tpe)
        if (__v != scala.meta.internal.semanticdb.TypeMessage.defaultInstance) {
          _output__.writeTag(2, 2)
          _output__.writeUInt32NoTag(__v.serializedSize)
          __v.writeTo(_output__)
        }
      };
      typeParameters.foreach { __v =>
        val __m = __v
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.UniversalType = {
      var __typeParameters = this.typeParameters
      var __tpe = this.tpe
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 26 =>
            __typeParameters = Option(_root_.scalapb.LiteParser.readMessage(_input__, __typeParameters.getOrElse(scala.meta.internal.semanticdb.Scope.defaultInstance)))
          case 18 =>
            __tpe = scala.meta.internal.semanticdb.UniversalType._typemapper_tpe.toCustom(_root_.scalapb.LiteParser.readMessage(_input__, scala.meta.internal.semanticdb.UniversalType._typemapper_tpe.toBase(__tpe)))
          case tag => _input__.skipField(tag)
        }
      }
      scala.meta.internal.semanticdb.UniversalType(
          typeParameters = __typeParameters,
          tpe = __tpe
      )
    }
    def getTypeParameters: scala.meta.internal.semanticdb.Scope = typeParameters.getOrElse(scala.meta.internal.semanticdb.Scope.defaultInstance)
    def clearTypeParameters: UniversalType = copy(typeParameters = None)
    def withTypeParameters(__v: scala.meta.internal.semanticdb.Scope): UniversalType = copy(typeParameters = Option(__v))
    def withTpe(__v: scala.meta.internal.semanticdb.Type): UniversalType = copy(tpe = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 3 => typeParameters.orNull
        case 2 => {
          val __t = scala.meta.internal.semanticdb.UniversalType._typemapper_tpe.toBase(tpe)
          if (__t != scala.meta.internal.semanticdb.TypeMessage.defaultInstance) __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 3 => typeParameters.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => scala.meta.internal.semanticdb.UniversalType._typemapper_tpe.toBase(tpe).toPMessage
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = scala.meta.internal.semanticdb.UniversalType
}

object UniversalType extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.UniversalType] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.UniversalType] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): scala.meta.internal.semanticdb.UniversalType = {
    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    scala.meta.internal.semanticdb.UniversalType(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[_root_.scala.Option[scala.meta.internal.semanticdb.Scope]],
      scala.meta.internal.semanticdb.UniversalType._typemapper_tpe.toCustom(__fieldsMap.getOrElse(__fields.get(1), scala.meta.internal.semanticdb.TypeMessage.defaultInstance).asInstanceOf[scala.meta.internal.semanticdb.TypeMessage])
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb.UniversalType] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      scala.meta.internal.semanticdb.UniversalType(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb.Scope]]),
        scala.meta.internal.semanticdb.UniversalType._typemapper_tpe.toCustom(__fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[scala.meta.internal.semanticdb.TypeMessage]).getOrElse(scala.meta.internal.semanticdb.TypeMessage.defaultInstance))
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticdbProto.javaDescriptor.getMessageTypes.get(17)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticdbProto.scalaDescriptor.messages(17)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 3 => __out = scala.meta.internal.semanticdb.Scope
      case 2 => __out = scala.meta.internal.semanticdb.TypeMessage
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = scala.meta.internal.semanticdb.UniversalType(
  )
  implicit class UniversalTypeLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.UniversalType]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.UniversalType](_l) {
    def typeParameters: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.Scope] = field(_.getTypeParameters)((c_, f_) => c_.copy(typeParameters = Option(f_)))
    def optionalTypeParameters: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[scala.meta.internal.semanticdb.Scope]] = field(_.typeParameters)((c_, f_) => c_.copy(typeParameters = f_))
    def tpe: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.Type] = field(_.tpe)((c_, f_) => c_.copy(tpe = f_))
  }
  final val TYPE_PARAMETERS_FIELD_NUMBER = 3
  final val TPE_FIELD_NUMBER = 2
  @transient
  private val _typemapper_tpe: _root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TypeMessage, scala.meta.internal.semanticdb.Type] = implicitly[_root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TypeMessage, scala.meta.internal.semanticdb.Type]]
}

@SerialVersionUID(0L)
final case class ByNameType(
    tpe: scala.meta.internal.semanticdb.Type = scala.meta.internal.semanticdb.ByNameType._typemapper_tpe.toCustom(scala.meta.internal.semanticdb.TypeMessage.defaultInstance)
    ) extends scala.meta.internal.semanticdb.Type with scalapb.GeneratedMessage with scalapb.Message[ByNameType] with scalapb.lenses.Updatable[ByNameType] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = scala.meta.internal.semanticdb.ByNameType._typemapper_tpe.toBase(tpe)
        if (__value != scala.meta.internal.semanticdb.TypeMessage.defaultInstance) {
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        }
      };
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = scala.meta.internal.semanticdb.ByNameType._typemapper_tpe.toBase(tpe)
        if (__v != scala.meta.internal.semanticdb.TypeMessage.defaultInstance) {
          _output__.writeTag(1, 2)
          _output__.writeUInt32NoTag(__v.serializedSize)
          __v.writeTo(_output__)
        }
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.ByNameType = {
      var __tpe = this.tpe
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __tpe = scala.meta.internal.semanticdb.ByNameType._typemapper_tpe.toCustom(_root_.scalapb.LiteParser.readMessage(_input__, scala.meta.internal.semanticdb.ByNameType._typemapper_tpe.toBase(__tpe)))
          case tag => _input__.skipField(tag)
        }
      }
      scala.meta.internal.semanticdb.ByNameType(
          tpe = __tpe
      )
    }
    def withTpe(__v: scala.meta.internal.semanticdb.Type): ByNameType = copy(tpe = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = scala.meta.internal.semanticdb.ByNameType._typemapper_tpe.toBase(tpe)
          if (__t != scala.meta.internal.semanticdb.TypeMessage.defaultInstance) __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => scala.meta.internal.semanticdb.ByNameType._typemapper_tpe.toBase(tpe).toPMessage
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = scala.meta.internal.semanticdb.ByNameType
}

object ByNameType extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.ByNameType] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.ByNameType] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): scala.meta.internal.semanticdb.ByNameType = {
    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    scala.meta.internal.semanticdb.ByNameType(
      scala.meta.internal.semanticdb.ByNameType._typemapper_tpe.toCustom(__fieldsMap.getOrElse(__fields.get(0), scala.meta.internal.semanticdb.TypeMessage.defaultInstance).asInstanceOf[scala.meta.internal.semanticdb.TypeMessage])
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb.ByNameType] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      scala.meta.internal.semanticdb.ByNameType(
        scala.meta.internal.semanticdb.ByNameType._typemapper_tpe.toCustom(__fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[scala.meta.internal.semanticdb.TypeMessage]).getOrElse(scala.meta.internal.semanticdb.TypeMessage.defaultInstance))
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticdbProto.javaDescriptor.getMessageTypes.get(18)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticdbProto.scalaDescriptor.messages(18)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = scala.meta.internal.semanticdb.TypeMessage
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = scala.meta.internal.semanticdb.ByNameType(
  )
  implicit class ByNameTypeLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.ByNameType]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.ByNameType](_l) {
    def tpe: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.Type] = field(_.tpe)((c_, f_) => c_.copy(tpe = f_))
  }
  final val TPE_FIELD_NUMBER = 1
  @transient
  private val _typemapper_tpe: _root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TypeMessage, scala.meta.internal.semanticdb.Type] = implicitly[_root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TypeMessage, scala.meta.internal.semanticdb.Type]]
}

@SerialVersionUID(0L)
final case class RepeatedType(
    tpe: scala.meta.internal.semanticdb.Type = scala.meta.internal.semanticdb.RepeatedType._typemapper_tpe.toCustom(scala.meta.internal.semanticdb.TypeMessage.defaultInstance)
    ) extends scala.meta.internal.semanticdb.Type with scalapb.GeneratedMessage with scalapb.Message[RepeatedType] with scalapb.lenses.Updatable[RepeatedType] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = scala.meta.internal.semanticdb.RepeatedType._typemapper_tpe.toBase(tpe)
        if (__value != scala.meta.internal.semanticdb.TypeMessage.defaultInstance) {
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        }
      };
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = scala.meta.internal.semanticdb.RepeatedType._typemapper_tpe.toBase(tpe)
        if (__v != scala.meta.internal.semanticdb.TypeMessage.defaultInstance) {
          _output__.writeTag(1, 2)
          _output__.writeUInt32NoTag(__v.serializedSize)
          __v.writeTo(_output__)
        }
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.RepeatedType = {
      var __tpe = this.tpe
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __tpe = scala.meta.internal.semanticdb.RepeatedType._typemapper_tpe.toCustom(_root_.scalapb.LiteParser.readMessage(_input__, scala.meta.internal.semanticdb.RepeatedType._typemapper_tpe.toBase(__tpe)))
          case tag => _input__.skipField(tag)
        }
      }
      scala.meta.internal.semanticdb.RepeatedType(
          tpe = __tpe
      )
    }
    def withTpe(__v: scala.meta.internal.semanticdb.Type): RepeatedType = copy(tpe = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = scala.meta.internal.semanticdb.RepeatedType._typemapper_tpe.toBase(tpe)
          if (__t != scala.meta.internal.semanticdb.TypeMessage.defaultInstance) __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => scala.meta.internal.semanticdb.RepeatedType._typemapper_tpe.toBase(tpe).toPMessage
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = scala.meta.internal.semanticdb.RepeatedType
}

object RepeatedType extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.RepeatedType] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.RepeatedType] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): scala.meta.internal.semanticdb.RepeatedType = {
    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    scala.meta.internal.semanticdb.RepeatedType(
      scala.meta.internal.semanticdb.RepeatedType._typemapper_tpe.toCustom(__fieldsMap.getOrElse(__fields.get(0), scala.meta.internal.semanticdb.TypeMessage.defaultInstance).asInstanceOf[scala.meta.internal.semanticdb.TypeMessage])
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb.RepeatedType] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      scala.meta.internal.semanticdb.RepeatedType(
        scala.meta.internal.semanticdb.RepeatedType._typemapper_tpe.toCustom(__fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[scala.meta.internal.semanticdb.TypeMessage]).getOrElse(scala.meta.internal.semanticdb.TypeMessage.defaultInstance))
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticdbProto.javaDescriptor.getMessageTypes.get(19)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticdbProto.scalaDescriptor.messages(19)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = scala.meta.internal.semanticdb.TypeMessage
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = scala.meta.internal.semanticdb.RepeatedType(
  )
  implicit class RepeatedTypeLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.RepeatedType]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.RepeatedType](_l) {
    def tpe: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.Type] = field(_.tpe)((c_, f_) => c_.copy(tpe = f_))
  }
  final val TPE_FIELD_NUMBER = 1
  @transient
  private val _typemapper_tpe: _root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TypeMessage, scala.meta.internal.semanticdb.Type] = implicitly[_root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TypeMessage, scala.meta.internal.semanticdb.Type]]
}
