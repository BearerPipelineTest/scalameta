// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package scala.meta.internal.semanticdb

sealed trait Constant {
  final def isEmpty = this.isInstanceOf[scala.meta.internal.semanticdb.Constant.Empty.type]
  final def isDefined = !isEmpty
  final def asMessage: scala.meta.internal.semanticdb.ConstantMessage = scala.meta.internal.semanticdb.Constant.ConstantTypeMapper.toBase(this)
}

object Constant {
  case object Empty extends scala.meta.internal.semanticdb.Constant
  
  def defaultInstance: scala.meta.internal.semanticdb.Constant = Empty
  
  implicit val ConstantTypeMapper: _root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.ConstantMessage, scala.meta.internal.semanticdb.Constant] = new _root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.ConstantMessage, scala.meta.internal.semanticdb.Constant] {
    override def toCustom(__base: scala.meta.internal.semanticdb.ConstantMessage): scala.meta.internal.semanticdb.Constant = __base.sealedValue match {
      case __v: scala.meta.internal.semanticdb.ConstantMessage.SealedValue.UnitConstant => __v.value
      case __v: scala.meta.internal.semanticdb.ConstantMessage.SealedValue.BooleanConstant => __v.value
      case __v: scala.meta.internal.semanticdb.ConstantMessage.SealedValue.ByteConstant => __v.value
      case __v: scala.meta.internal.semanticdb.ConstantMessage.SealedValue.ShortConstant => __v.value
      case __v: scala.meta.internal.semanticdb.ConstantMessage.SealedValue.CharConstant => __v.value
      case __v: scala.meta.internal.semanticdb.ConstantMessage.SealedValue.IntConstant => __v.value
      case __v: scala.meta.internal.semanticdb.ConstantMessage.SealedValue.LongConstant => __v.value
      case __v: scala.meta.internal.semanticdb.ConstantMessage.SealedValue.FloatConstant => __v.value
      case __v: scala.meta.internal.semanticdb.ConstantMessage.SealedValue.DoubleConstant => __v.value
      case __v: scala.meta.internal.semanticdb.ConstantMessage.SealedValue.StringConstant => __v.value
      case __v: scala.meta.internal.semanticdb.ConstantMessage.SealedValue.NullConstant => __v.value
      case scala.meta.internal.semanticdb.ConstantMessage.SealedValue.Empty => Empty
    }
    override def toBase(__custom: scala.meta.internal.semanticdb.Constant): scala.meta.internal.semanticdb.ConstantMessage = scala.meta.internal.semanticdb.ConstantMessage(__custom match {
      case __v: scala.meta.internal.semanticdb.UnitConstant => scala.meta.internal.semanticdb.ConstantMessage.SealedValue.UnitConstant(__v)
      case __v: scala.meta.internal.semanticdb.BooleanConstant => scala.meta.internal.semanticdb.ConstantMessage.SealedValue.BooleanConstant(__v)
      case __v: scala.meta.internal.semanticdb.ByteConstant => scala.meta.internal.semanticdb.ConstantMessage.SealedValue.ByteConstant(__v)
      case __v: scala.meta.internal.semanticdb.ShortConstant => scala.meta.internal.semanticdb.ConstantMessage.SealedValue.ShortConstant(__v)
      case __v: scala.meta.internal.semanticdb.CharConstant => scala.meta.internal.semanticdb.ConstantMessage.SealedValue.CharConstant(__v)
      case __v: scala.meta.internal.semanticdb.IntConstant => scala.meta.internal.semanticdb.ConstantMessage.SealedValue.IntConstant(__v)
      case __v: scala.meta.internal.semanticdb.LongConstant => scala.meta.internal.semanticdb.ConstantMessage.SealedValue.LongConstant(__v)
      case __v: scala.meta.internal.semanticdb.FloatConstant => scala.meta.internal.semanticdb.ConstantMessage.SealedValue.FloatConstant(__v)
      case __v: scala.meta.internal.semanticdb.DoubleConstant => scala.meta.internal.semanticdb.ConstantMessage.SealedValue.DoubleConstant(__v)
      case __v: scala.meta.internal.semanticdb.StringConstant => scala.meta.internal.semanticdb.ConstantMessage.SealedValue.StringConstant(__v)
      case __v: scala.meta.internal.semanticdb.NullConstant => scala.meta.internal.semanticdb.ConstantMessage.SealedValue.NullConstant(__v)
      case Empty => scala.meta.internal.semanticdb.ConstantMessage.SealedValue.Empty
    })
  }
}
@SerialVersionUID(0L)
final case class ConstantMessage(
    sealedValue: scala.meta.internal.semanticdb.ConstantMessage.SealedValue = scala.meta.internal.semanticdb.ConstantMessage.SealedValue.Empty
    ) extends scalapb.GeneratedMessage with scalapb.Message[ConstantMessage] with scalapb.lenses.Updatable[ConstantMessage] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (sealedValue.unitConstant.isDefined) {
        val __value = sealedValue.unitConstant.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (sealedValue.booleanConstant.isDefined) {
        val __value = sealedValue.booleanConstant.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (sealedValue.byteConstant.isDefined) {
        val __value = sealedValue.byteConstant.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (sealedValue.shortConstant.isDefined) {
        val __value = sealedValue.shortConstant.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (sealedValue.charConstant.isDefined) {
        val __value = sealedValue.charConstant.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (sealedValue.intConstant.isDefined) {
        val __value = sealedValue.intConstant.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (sealedValue.longConstant.isDefined) {
        val __value = sealedValue.longConstant.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (sealedValue.floatConstant.isDefined) {
        val __value = sealedValue.floatConstant.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (sealedValue.doubleConstant.isDefined) {
        val __value = sealedValue.doubleConstant.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (sealedValue.stringConstant.isDefined) {
        val __value = sealedValue.stringConstant.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (sealedValue.nullConstant.isDefined) {
        val __value = sealedValue.nullConstant.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      sealedValue.unitConstant.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      sealedValue.booleanConstant.foreach { __v =>
        val __m = __v
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      sealedValue.byteConstant.foreach { __v =>
        val __m = __v
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      sealedValue.shortConstant.foreach { __v =>
        val __m = __v
        _output__.writeTag(4, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      sealedValue.charConstant.foreach { __v =>
        val __m = __v
        _output__.writeTag(5, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      sealedValue.intConstant.foreach { __v =>
        val __m = __v
        _output__.writeTag(6, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      sealedValue.longConstant.foreach { __v =>
        val __m = __v
        _output__.writeTag(7, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      sealedValue.floatConstant.foreach { __v =>
        val __m = __v
        _output__.writeTag(8, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      sealedValue.doubleConstant.foreach { __v =>
        val __m = __v
        _output__.writeTag(9, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      sealedValue.stringConstant.foreach { __v =>
        val __m = __v
        _output__.writeTag(10, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      sealedValue.nullConstant.foreach { __v =>
        val __m = __v
        _output__.writeTag(11, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.ConstantMessage = {
      var __sealedValue = this.sealedValue
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __sealedValue = scala.meta.internal.semanticdb.ConstantMessage.SealedValue.UnitConstant(_root_.scalapb.LiteParser.readMessage(_input__, sealedValue.unitConstant.getOrElse(scala.meta.internal.semanticdb.UnitConstant.defaultInstance)))
          case 18 =>
            __sealedValue = scala.meta.internal.semanticdb.ConstantMessage.SealedValue.BooleanConstant(_root_.scalapb.LiteParser.readMessage(_input__, sealedValue.booleanConstant.getOrElse(scala.meta.internal.semanticdb.BooleanConstant.defaultInstance)))
          case 26 =>
            __sealedValue = scala.meta.internal.semanticdb.ConstantMessage.SealedValue.ByteConstant(_root_.scalapb.LiteParser.readMessage(_input__, sealedValue.byteConstant.getOrElse(scala.meta.internal.semanticdb.ByteConstant.defaultInstance)))
          case 34 =>
            __sealedValue = scala.meta.internal.semanticdb.ConstantMessage.SealedValue.ShortConstant(_root_.scalapb.LiteParser.readMessage(_input__, sealedValue.shortConstant.getOrElse(scala.meta.internal.semanticdb.ShortConstant.defaultInstance)))
          case 42 =>
            __sealedValue = scala.meta.internal.semanticdb.ConstantMessage.SealedValue.CharConstant(_root_.scalapb.LiteParser.readMessage(_input__, sealedValue.charConstant.getOrElse(scala.meta.internal.semanticdb.CharConstant.defaultInstance)))
          case 50 =>
            __sealedValue = scala.meta.internal.semanticdb.ConstantMessage.SealedValue.IntConstant(_root_.scalapb.LiteParser.readMessage(_input__, sealedValue.intConstant.getOrElse(scala.meta.internal.semanticdb.IntConstant.defaultInstance)))
          case 58 =>
            __sealedValue = scala.meta.internal.semanticdb.ConstantMessage.SealedValue.LongConstant(_root_.scalapb.LiteParser.readMessage(_input__, sealedValue.longConstant.getOrElse(scala.meta.internal.semanticdb.LongConstant.defaultInstance)))
          case 66 =>
            __sealedValue = scala.meta.internal.semanticdb.ConstantMessage.SealedValue.FloatConstant(_root_.scalapb.LiteParser.readMessage(_input__, sealedValue.floatConstant.getOrElse(scala.meta.internal.semanticdb.FloatConstant.defaultInstance)))
          case 74 =>
            __sealedValue = scala.meta.internal.semanticdb.ConstantMessage.SealedValue.DoubleConstant(_root_.scalapb.LiteParser.readMessage(_input__, sealedValue.doubleConstant.getOrElse(scala.meta.internal.semanticdb.DoubleConstant.defaultInstance)))
          case 82 =>
            __sealedValue = scala.meta.internal.semanticdb.ConstantMessage.SealedValue.StringConstant(_root_.scalapb.LiteParser.readMessage(_input__, sealedValue.stringConstant.getOrElse(scala.meta.internal.semanticdb.StringConstant.defaultInstance)))
          case 90 =>
            __sealedValue = scala.meta.internal.semanticdb.ConstantMessage.SealedValue.NullConstant(_root_.scalapb.LiteParser.readMessage(_input__, sealedValue.nullConstant.getOrElse(scala.meta.internal.semanticdb.NullConstant.defaultInstance)))
          case tag => _input__.skipField(tag)
        }
      }
      scala.meta.internal.semanticdb.ConstantMessage(
          sealedValue = __sealedValue
      )
    }
    def getUnitConstant: scala.meta.internal.semanticdb.UnitConstant = sealedValue.unitConstant.getOrElse(scala.meta.internal.semanticdb.UnitConstant.defaultInstance)
    def withUnitConstant(__v: scala.meta.internal.semanticdb.UnitConstant): ConstantMessage = copy(sealedValue = scala.meta.internal.semanticdb.ConstantMessage.SealedValue.UnitConstant(__v))
    def getBooleanConstant: scala.meta.internal.semanticdb.BooleanConstant = sealedValue.booleanConstant.getOrElse(scala.meta.internal.semanticdb.BooleanConstant.defaultInstance)
    def withBooleanConstant(__v: scala.meta.internal.semanticdb.BooleanConstant): ConstantMessage = copy(sealedValue = scala.meta.internal.semanticdb.ConstantMessage.SealedValue.BooleanConstant(__v))
    def getByteConstant: scala.meta.internal.semanticdb.ByteConstant = sealedValue.byteConstant.getOrElse(scala.meta.internal.semanticdb.ByteConstant.defaultInstance)
    def withByteConstant(__v: scala.meta.internal.semanticdb.ByteConstant): ConstantMessage = copy(sealedValue = scala.meta.internal.semanticdb.ConstantMessage.SealedValue.ByteConstant(__v))
    def getShortConstant: scala.meta.internal.semanticdb.ShortConstant = sealedValue.shortConstant.getOrElse(scala.meta.internal.semanticdb.ShortConstant.defaultInstance)
    def withShortConstant(__v: scala.meta.internal.semanticdb.ShortConstant): ConstantMessage = copy(sealedValue = scala.meta.internal.semanticdb.ConstantMessage.SealedValue.ShortConstant(__v))
    def getCharConstant: scala.meta.internal.semanticdb.CharConstant = sealedValue.charConstant.getOrElse(scala.meta.internal.semanticdb.CharConstant.defaultInstance)
    def withCharConstant(__v: scala.meta.internal.semanticdb.CharConstant): ConstantMessage = copy(sealedValue = scala.meta.internal.semanticdb.ConstantMessage.SealedValue.CharConstant(__v))
    def getIntConstant: scala.meta.internal.semanticdb.IntConstant = sealedValue.intConstant.getOrElse(scala.meta.internal.semanticdb.IntConstant.defaultInstance)
    def withIntConstant(__v: scala.meta.internal.semanticdb.IntConstant): ConstantMessage = copy(sealedValue = scala.meta.internal.semanticdb.ConstantMessage.SealedValue.IntConstant(__v))
    def getLongConstant: scala.meta.internal.semanticdb.LongConstant = sealedValue.longConstant.getOrElse(scala.meta.internal.semanticdb.LongConstant.defaultInstance)
    def withLongConstant(__v: scala.meta.internal.semanticdb.LongConstant): ConstantMessage = copy(sealedValue = scala.meta.internal.semanticdb.ConstantMessage.SealedValue.LongConstant(__v))
    def getFloatConstant: scala.meta.internal.semanticdb.FloatConstant = sealedValue.floatConstant.getOrElse(scala.meta.internal.semanticdb.FloatConstant.defaultInstance)
    def withFloatConstant(__v: scala.meta.internal.semanticdb.FloatConstant): ConstantMessage = copy(sealedValue = scala.meta.internal.semanticdb.ConstantMessage.SealedValue.FloatConstant(__v))
    def getDoubleConstant: scala.meta.internal.semanticdb.DoubleConstant = sealedValue.doubleConstant.getOrElse(scala.meta.internal.semanticdb.DoubleConstant.defaultInstance)
    def withDoubleConstant(__v: scala.meta.internal.semanticdb.DoubleConstant): ConstantMessage = copy(sealedValue = scala.meta.internal.semanticdb.ConstantMessage.SealedValue.DoubleConstant(__v))
    def getStringConstant: scala.meta.internal.semanticdb.StringConstant = sealedValue.stringConstant.getOrElse(scala.meta.internal.semanticdb.StringConstant.defaultInstance)
    def withStringConstant(__v: scala.meta.internal.semanticdb.StringConstant): ConstantMessage = copy(sealedValue = scala.meta.internal.semanticdb.ConstantMessage.SealedValue.StringConstant(__v))
    def getNullConstant: scala.meta.internal.semanticdb.NullConstant = sealedValue.nullConstant.getOrElse(scala.meta.internal.semanticdb.NullConstant.defaultInstance)
    def withNullConstant(__v: scala.meta.internal.semanticdb.NullConstant): ConstantMessage = copy(sealedValue = scala.meta.internal.semanticdb.ConstantMessage.SealedValue.NullConstant(__v))
    def clearSealedValue: ConstantMessage = copy(sealedValue = scala.meta.internal.semanticdb.ConstantMessage.SealedValue.Empty)
    def withSealedValue(__v: scala.meta.internal.semanticdb.ConstantMessage.SealedValue): ConstantMessage = copy(sealedValue = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => sealedValue.unitConstant.orNull
        case 2 => sealedValue.booleanConstant.orNull
        case 3 => sealedValue.byteConstant.orNull
        case 4 => sealedValue.shortConstant.orNull
        case 5 => sealedValue.charConstant.orNull
        case 6 => sealedValue.intConstant.orNull
        case 7 => sealedValue.longConstant.orNull
        case 8 => sealedValue.floatConstant.orNull
        case 9 => sealedValue.doubleConstant.orNull
        case 10 => sealedValue.stringConstant.orNull
        case 11 => sealedValue.nullConstant.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => sealedValue.unitConstant.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => sealedValue.booleanConstant.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => sealedValue.byteConstant.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => sealedValue.shortConstant.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => sealedValue.charConstant.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 6 => sealedValue.intConstant.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 7 => sealedValue.longConstant.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 8 => sealedValue.floatConstant.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 9 => sealedValue.doubleConstant.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 10 => sealedValue.stringConstant.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 11 => sealedValue.nullConstant.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = scala.meta.internal.semanticdb.ConstantMessage
    def toConstant: scala.meta.internal.semanticdb.Constant = scala.meta.internal.semanticdb.Constant.ConstantTypeMapper.toCustom(this)
}

object ConstantMessage extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.ConstantMessage] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.ConstantMessage] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): scala.meta.internal.semanticdb.ConstantMessage = {
    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    scala.meta.internal.semanticdb.ConstantMessage(
      sealedValue = __fieldsMap.get(__fields.get(0)).asInstanceOf[_root_.scala.Option[scala.meta.internal.semanticdb.UnitConstant]].map(scala.meta.internal.semanticdb.ConstantMessage.SealedValue.UnitConstant)
    .orElse[scala.meta.internal.semanticdb.ConstantMessage.SealedValue](__fieldsMap.get(__fields.get(1)).asInstanceOf[_root_.scala.Option[scala.meta.internal.semanticdb.BooleanConstant]].map(scala.meta.internal.semanticdb.ConstantMessage.SealedValue.BooleanConstant))
    .orElse[scala.meta.internal.semanticdb.ConstantMessage.SealedValue](__fieldsMap.get(__fields.get(2)).asInstanceOf[_root_.scala.Option[scala.meta.internal.semanticdb.ByteConstant]].map(scala.meta.internal.semanticdb.ConstantMessage.SealedValue.ByteConstant))
    .orElse[scala.meta.internal.semanticdb.ConstantMessage.SealedValue](__fieldsMap.get(__fields.get(3)).asInstanceOf[_root_.scala.Option[scala.meta.internal.semanticdb.ShortConstant]].map(scala.meta.internal.semanticdb.ConstantMessage.SealedValue.ShortConstant))
    .orElse[scala.meta.internal.semanticdb.ConstantMessage.SealedValue](__fieldsMap.get(__fields.get(4)).asInstanceOf[_root_.scala.Option[scala.meta.internal.semanticdb.CharConstant]].map(scala.meta.internal.semanticdb.ConstantMessage.SealedValue.CharConstant))
    .orElse[scala.meta.internal.semanticdb.ConstantMessage.SealedValue](__fieldsMap.get(__fields.get(5)).asInstanceOf[_root_.scala.Option[scala.meta.internal.semanticdb.IntConstant]].map(scala.meta.internal.semanticdb.ConstantMessage.SealedValue.IntConstant))
    .orElse[scala.meta.internal.semanticdb.ConstantMessage.SealedValue](__fieldsMap.get(__fields.get(6)).asInstanceOf[_root_.scala.Option[scala.meta.internal.semanticdb.LongConstant]].map(scala.meta.internal.semanticdb.ConstantMessage.SealedValue.LongConstant))
    .orElse[scala.meta.internal.semanticdb.ConstantMessage.SealedValue](__fieldsMap.get(__fields.get(7)).asInstanceOf[_root_.scala.Option[scala.meta.internal.semanticdb.FloatConstant]].map(scala.meta.internal.semanticdb.ConstantMessage.SealedValue.FloatConstant))
    .orElse[scala.meta.internal.semanticdb.ConstantMessage.SealedValue](__fieldsMap.get(__fields.get(8)).asInstanceOf[_root_.scala.Option[scala.meta.internal.semanticdb.DoubleConstant]].map(scala.meta.internal.semanticdb.ConstantMessage.SealedValue.DoubleConstant))
    .orElse[scala.meta.internal.semanticdb.ConstantMessage.SealedValue](__fieldsMap.get(__fields.get(9)).asInstanceOf[_root_.scala.Option[scala.meta.internal.semanticdb.StringConstant]].map(scala.meta.internal.semanticdb.ConstantMessage.SealedValue.StringConstant))
    .orElse[scala.meta.internal.semanticdb.ConstantMessage.SealedValue](__fieldsMap.get(__fields.get(10)).asInstanceOf[_root_.scala.Option[scala.meta.internal.semanticdb.NullConstant]].map(scala.meta.internal.semanticdb.ConstantMessage.SealedValue.NullConstant))
    .getOrElse(scala.meta.internal.semanticdb.ConstantMessage.SealedValue.Empty)
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb.ConstantMessage] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      scala.meta.internal.semanticdb.ConstantMessage(
        sealedValue = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb.UnitConstant]]).map(scala.meta.internal.semanticdb.ConstantMessage.SealedValue.UnitConstant)
    .orElse[scala.meta.internal.semanticdb.ConstantMessage.SealedValue](__fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb.BooleanConstant]]).map(scala.meta.internal.semanticdb.ConstantMessage.SealedValue.BooleanConstant))
    .orElse[scala.meta.internal.semanticdb.ConstantMessage.SealedValue](__fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb.ByteConstant]]).map(scala.meta.internal.semanticdb.ConstantMessage.SealedValue.ByteConstant))
    .orElse[scala.meta.internal.semanticdb.ConstantMessage.SealedValue](__fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb.ShortConstant]]).map(scala.meta.internal.semanticdb.ConstantMessage.SealedValue.ShortConstant))
    .orElse[scala.meta.internal.semanticdb.ConstantMessage.SealedValue](__fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb.CharConstant]]).map(scala.meta.internal.semanticdb.ConstantMessage.SealedValue.CharConstant))
    .orElse[scala.meta.internal.semanticdb.ConstantMessage.SealedValue](__fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb.IntConstant]]).map(scala.meta.internal.semanticdb.ConstantMessage.SealedValue.IntConstant))
    .orElse[scala.meta.internal.semanticdb.ConstantMessage.SealedValue](__fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb.LongConstant]]).map(scala.meta.internal.semanticdb.ConstantMessage.SealedValue.LongConstant))
    .orElse[scala.meta.internal.semanticdb.ConstantMessage.SealedValue](__fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb.FloatConstant]]).map(scala.meta.internal.semanticdb.ConstantMessage.SealedValue.FloatConstant))
    .orElse[scala.meta.internal.semanticdb.ConstantMessage.SealedValue](__fieldsMap.get(scalaDescriptor.findFieldByNumber(9).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb.DoubleConstant]]).map(scala.meta.internal.semanticdb.ConstantMessage.SealedValue.DoubleConstant))
    .orElse[scala.meta.internal.semanticdb.ConstantMessage.SealedValue](__fieldsMap.get(scalaDescriptor.findFieldByNumber(10).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb.StringConstant]]).map(scala.meta.internal.semanticdb.ConstantMessage.SealedValue.StringConstant))
    .orElse[scala.meta.internal.semanticdb.ConstantMessage.SealedValue](__fieldsMap.get(scalaDescriptor.findFieldByNumber(11).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb.NullConstant]]).map(scala.meta.internal.semanticdb.ConstantMessage.SealedValue.NullConstant))
    .getOrElse(scala.meta.internal.semanticdb.ConstantMessage.SealedValue.Empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticdbProto.javaDescriptor.getMessageTypes.get(20)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticdbProto.scalaDescriptor.messages(20)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = scala.meta.internal.semanticdb.UnitConstant
      case 2 => __out = scala.meta.internal.semanticdb.BooleanConstant
      case 3 => __out = scala.meta.internal.semanticdb.ByteConstant
      case 4 => __out = scala.meta.internal.semanticdb.ShortConstant
      case 5 => __out = scala.meta.internal.semanticdb.CharConstant
      case 6 => __out = scala.meta.internal.semanticdb.IntConstant
      case 7 => __out = scala.meta.internal.semanticdb.LongConstant
      case 8 => __out = scala.meta.internal.semanticdb.FloatConstant
      case 9 => __out = scala.meta.internal.semanticdb.DoubleConstant
      case 10 => __out = scala.meta.internal.semanticdb.StringConstant
      case 11 => __out = scala.meta.internal.semanticdb.NullConstant
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = scala.meta.internal.semanticdb.ConstantMessage(
  )
  sealed trait SealedValue extends _root_.scalapb.GeneratedOneof {
    def isEmpty: _root_.scala.Boolean = false
    def isDefined: _root_.scala.Boolean = true
    def isUnitConstant: _root_.scala.Boolean = false
    def isBooleanConstant: _root_.scala.Boolean = false
    def isByteConstant: _root_.scala.Boolean = false
    def isShortConstant: _root_.scala.Boolean = false
    def isCharConstant: _root_.scala.Boolean = false
    def isIntConstant: _root_.scala.Boolean = false
    def isLongConstant: _root_.scala.Boolean = false
    def isFloatConstant: _root_.scala.Boolean = false
    def isDoubleConstant: _root_.scala.Boolean = false
    def isStringConstant: _root_.scala.Boolean = false
    def isNullConstant: _root_.scala.Boolean = false
    def unitConstant: _root_.scala.Option[scala.meta.internal.semanticdb.UnitConstant] = None
    def booleanConstant: _root_.scala.Option[scala.meta.internal.semanticdb.BooleanConstant] = None
    def byteConstant: _root_.scala.Option[scala.meta.internal.semanticdb.ByteConstant] = None
    def shortConstant: _root_.scala.Option[scala.meta.internal.semanticdb.ShortConstant] = None
    def charConstant: _root_.scala.Option[scala.meta.internal.semanticdb.CharConstant] = None
    def intConstant: _root_.scala.Option[scala.meta.internal.semanticdb.IntConstant] = None
    def longConstant: _root_.scala.Option[scala.meta.internal.semanticdb.LongConstant] = None
    def floatConstant: _root_.scala.Option[scala.meta.internal.semanticdb.FloatConstant] = None
    def doubleConstant: _root_.scala.Option[scala.meta.internal.semanticdb.DoubleConstant] = None
    def stringConstant: _root_.scala.Option[scala.meta.internal.semanticdb.StringConstant] = None
    def nullConstant: _root_.scala.Option[scala.meta.internal.semanticdb.NullConstant] = None
  }
  object SealedValue extends {
    @SerialVersionUID(0L)
    case object Empty extends scala.meta.internal.semanticdb.ConstantMessage.SealedValue {
      type ValueType = _root_.scala.Nothing
      override def isEmpty: _root_.scala.Boolean = true
      override def isDefined: _root_.scala.Boolean = false
      override def number: _root_.scala.Int = 0
      override def value: _root_.scala.Nothing = throw new java.util.NoSuchElementException("Empty.value")
    }
  
    @SerialVersionUID(0L)
    final case class UnitConstant(value: scala.meta.internal.semanticdb.UnitConstant) extends scala.meta.internal.semanticdb.ConstantMessage.SealedValue {
      type ValueType = scala.meta.internal.semanticdb.UnitConstant
      override def isUnitConstant: _root_.scala.Boolean = true
      override def unitConstant: _root_.scala.Option[scala.meta.internal.semanticdb.UnitConstant] = Some(value)
      override def number: _root_.scala.Int = 1
    }
    @SerialVersionUID(0L)
    final case class BooleanConstant(value: scala.meta.internal.semanticdb.BooleanConstant) extends scala.meta.internal.semanticdb.ConstantMessage.SealedValue {
      type ValueType = scala.meta.internal.semanticdb.BooleanConstant
      override def isBooleanConstant: _root_.scala.Boolean = true
      override def booleanConstant: _root_.scala.Option[scala.meta.internal.semanticdb.BooleanConstant] = Some(value)
      override def number: _root_.scala.Int = 2
    }
    @SerialVersionUID(0L)
    final case class ByteConstant(value: scala.meta.internal.semanticdb.ByteConstant) extends scala.meta.internal.semanticdb.ConstantMessage.SealedValue {
      type ValueType = scala.meta.internal.semanticdb.ByteConstant
      override def isByteConstant: _root_.scala.Boolean = true
      override def byteConstant: _root_.scala.Option[scala.meta.internal.semanticdb.ByteConstant] = Some(value)
      override def number: _root_.scala.Int = 3
    }
    @SerialVersionUID(0L)
    final case class ShortConstant(value: scala.meta.internal.semanticdb.ShortConstant) extends scala.meta.internal.semanticdb.ConstantMessage.SealedValue {
      type ValueType = scala.meta.internal.semanticdb.ShortConstant
      override def isShortConstant: _root_.scala.Boolean = true
      override def shortConstant: _root_.scala.Option[scala.meta.internal.semanticdb.ShortConstant] = Some(value)
      override def number: _root_.scala.Int = 4
    }
    @SerialVersionUID(0L)
    final case class CharConstant(value: scala.meta.internal.semanticdb.CharConstant) extends scala.meta.internal.semanticdb.ConstantMessage.SealedValue {
      type ValueType = scala.meta.internal.semanticdb.CharConstant
      override def isCharConstant: _root_.scala.Boolean = true
      override def charConstant: _root_.scala.Option[scala.meta.internal.semanticdb.CharConstant] = Some(value)
      override def number: _root_.scala.Int = 5
    }
    @SerialVersionUID(0L)
    final case class IntConstant(value: scala.meta.internal.semanticdb.IntConstant) extends scala.meta.internal.semanticdb.ConstantMessage.SealedValue {
      type ValueType = scala.meta.internal.semanticdb.IntConstant
      override def isIntConstant: _root_.scala.Boolean = true
      override def intConstant: _root_.scala.Option[scala.meta.internal.semanticdb.IntConstant] = Some(value)
      override def number: _root_.scala.Int = 6
    }
    @SerialVersionUID(0L)
    final case class LongConstant(value: scala.meta.internal.semanticdb.LongConstant) extends scala.meta.internal.semanticdb.ConstantMessage.SealedValue {
      type ValueType = scala.meta.internal.semanticdb.LongConstant
      override def isLongConstant: _root_.scala.Boolean = true
      override def longConstant: _root_.scala.Option[scala.meta.internal.semanticdb.LongConstant] = Some(value)
      override def number: _root_.scala.Int = 7
    }
    @SerialVersionUID(0L)
    final case class FloatConstant(value: scala.meta.internal.semanticdb.FloatConstant) extends scala.meta.internal.semanticdb.ConstantMessage.SealedValue {
      type ValueType = scala.meta.internal.semanticdb.FloatConstant
      override def isFloatConstant: _root_.scala.Boolean = true
      override def floatConstant: _root_.scala.Option[scala.meta.internal.semanticdb.FloatConstant] = Some(value)
      override def number: _root_.scala.Int = 8
    }
    @SerialVersionUID(0L)
    final case class DoubleConstant(value: scala.meta.internal.semanticdb.DoubleConstant) extends scala.meta.internal.semanticdb.ConstantMessage.SealedValue {
      type ValueType = scala.meta.internal.semanticdb.DoubleConstant
      override def isDoubleConstant: _root_.scala.Boolean = true
      override def doubleConstant: _root_.scala.Option[scala.meta.internal.semanticdb.DoubleConstant] = Some(value)
      override def number: _root_.scala.Int = 9
    }
    @SerialVersionUID(0L)
    final case class StringConstant(value: scala.meta.internal.semanticdb.StringConstant) extends scala.meta.internal.semanticdb.ConstantMessage.SealedValue {
      type ValueType = scala.meta.internal.semanticdb.StringConstant
      override def isStringConstant: _root_.scala.Boolean = true
      override def stringConstant: _root_.scala.Option[scala.meta.internal.semanticdb.StringConstant] = Some(value)
      override def number: _root_.scala.Int = 10
    }
    @SerialVersionUID(0L)
    final case class NullConstant(value: scala.meta.internal.semanticdb.NullConstant) extends scala.meta.internal.semanticdb.ConstantMessage.SealedValue {
      type ValueType = scala.meta.internal.semanticdb.NullConstant
      override def isNullConstant: _root_.scala.Boolean = true
      override def nullConstant: _root_.scala.Option[scala.meta.internal.semanticdb.NullConstant] = Some(value)
      override def number: _root_.scala.Int = 11
    }
  }
  implicit class ConstantMessageLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.ConstantMessage]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.ConstantMessage](_l) {
    def unitConstant: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.UnitConstant] = field(_.getUnitConstant)((c_, f_) => c_.copy(sealedValue = scala.meta.internal.semanticdb.ConstantMessage.SealedValue.UnitConstant(f_)))
    def booleanConstant: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.BooleanConstant] = field(_.getBooleanConstant)((c_, f_) => c_.copy(sealedValue = scala.meta.internal.semanticdb.ConstantMessage.SealedValue.BooleanConstant(f_)))
    def byteConstant: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.ByteConstant] = field(_.getByteConstant)((c_, f_) => c_.copy(sealedValue = scala.meta.internal.semanticdb.ConstantMessage.SealedValue.ByteConstant(f_)))
    def shortConstant: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.ShortConstant] = field(_.getShortConstant)((c_, f_) => c_.copy(sealedValue = scala.meta.internal.semanticdb.ConstantMessage.SealedValue.ShortConstant(f_)))
    def charConstant: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.CharConstant] = field(_.getCharConstant)((c_, f_) => c_.copy(sealedValue = scala.meta.internal.semanticdb.ConstantMessage.SealedValue.CharConstant(f_)))
    def intConstant: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.IntConstant] = field(_.getIntConstant)((c_, f_) => c_.copy(sealedValue = scala.meta.internal.semanticdb.ConstantMessage.SealedValue.IntConstant(f_)))
    def longConstant: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.LongConstant] = field(_.getLongConstant)((c_, f_) => c_.copy(sealedValue = scala.meta.internal.semanticdb.ConstantMessage.SealedValue.LongConstant(f_)))
    def floatConstant: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.FloatConstant] = field(_.getFloatConstant)((c_, f_) => c_.copy(sealedValue = scala.meta.internal.semanticdb.ConstantMessage.SealedValue.FloatConstant(f_)))
    def doubleConstant: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.DoubleConstant] = field(_.getDoubleConstant)((c_, f_) => c_.copy(sealedValue = scala.meta.internal.semanticdb.ConstantMessage.SealedValue.DoubleConstant(f_)))
    def stringConstant: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.StringConstant] = field(_.getStringConstant)((c_, f_) => c_.copy(sealedValue = scala.meta.internal.semanticdb.ConstantMessage.SealedValue.StringConstant(f_)))
    def nullConstant: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.NullConstant] = field(_.getNullConstant)((c_, f_) => c_.copy(sealedValue = scala.meta.internal.semanticdb.ConstantMessage.SealedValue.NullConstant(f_)))
    def sealedValue: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.ConstantMessage.SealedValue] = field(_.sealedValue)((c_, f_) => c_.copy(sealedValue = f_))
  }
  final val UNITCONSTANT_FIELD_NUMBER = 1
  final val BOOLEANCONSTANT_FIELD_NUMBER = 2
  final val BYTECONSTANT_FIELD_NUMBER = 3
  final val SHORTCONSTANT_FIELD_NUMBER = 4
  final val CHARCONSTANT_FIELD_NUMBER = 5
  final val INTCONSTANT_FIELD_NUMBER = 6
  final val LONGCONSTANT_FIELD_NUMBER = 7
  final val FLOATCONSTANT_FIELD_NUMBER = 8
  final val DOUBLECONSTANT_FIELD_NUMBER = 9
  final val STRINGCONSTANT_FIELD_NUMBER = 10
  final val NULLCONSTANT_FIELD_NUMBER = 11
}

@SerialVersionUID(0L)
final case class UnitConstant(
    ) extends scala.meta.internal.semanticdb.Constant with scalapb.GeneratedMessage with scalapb.Message[UnitConstant] with scalapb.lenses.Updatable[UnitConstant] {
    final override def serializedSize: _root_.scala.Int = 0
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.UnitConstant = {
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case tag => _input__.skipField(tag)
        }
      }
      scala.meta.internal.semanticdb.UnitConstant(
      )
    }
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = throw new MatchError(__fieldNumber)
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = throw new MatchError(__field)
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = scala.meta.internal.semanticdb.UnitConstant
}

object UnitConstant extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.UnitConstant] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.UnitConstant] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): scala.meta.internal.semanticdb.UnitConstant = {
    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    scala.meta.internal.semanticdb.UnitConstant(
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb.UnitConstant] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      scala.meta.internal.semanticdb.UnitConstant(
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticdbProto.javaDescriptor.getMessageTypes.get(21)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticdbProto.scalaDescriptor.messages(21)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = scala.meta.internal.semanticdb.UnitConstant(
  )
  implicit class UnitConstantLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.UnitConstant]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.UnitConstant](_l) {
  }
}

@SerialVersionUID(0L)
final case class BooleanConstant(
    value: _root_.scala.Boolean = false
    ) extends scala.meta.internal.semanticdb.Constant with scalapb.GeneratedMessage with scalapb.Message[BooleanConstant] with scalapb.lenses.Updatable[BooleanConstant] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = value
        if (__value != false) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(1, __value)
        }
      };
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = value
        if (__v != false) {
          _output__.writeBool(1, __v)
        }
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.BooleanConstant = {
      var __value = this.value
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __value = _input__.readBool()
          case tag => _input__.skipField(tag)
        }
      }
      scala.meta.internal.semanticdb.BooleanConstant(
          value = __value
      )
    }
    def withValue(__v: _root_.scala.Boolean): BooleanConstant = copy(value = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = value
          if (__t != false) __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PBoolean(value)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = scala.meta.internal.semanticdb.BooleanConstant
}

object BooleanConstant extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.BooleanConstant] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.BooleanConstant] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): scala.meta.internal.semanticdb.BooleanConstant = {
    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    scala.meta.internal.semanticdb.BooleanConstant(
      __fieldsMap.getOrElse(__fields.get(0), false).asInstanceOf[_root_.scala.Boolean]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb.BooleanConstant] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      scala.meta.internal.semanticdb.BooleanConstant(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Boolean]).getOrElse(false)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticdbProto.javaDescriptor.getMessageTypes.get(22)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticdbProto.scalaDescriptor.messages(22)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = scala.meta.internal.semanticdb.BooleanConstant(
  )
  implicit class BooleanConstantLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.BooleanConstant]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.BooleanConstant](_l) {
    def value: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.value)((c_, f_) => c_.copy(value = f_))
  }
  final val VALUE_FIELD_NUMBER = 1
}

@SerialVersionUID(0L)
final case class ByteConstant(
    value: _root_.scala.Int = 0
    ) extends scala.meta.internal.semanticdb.Constant with scalapb.GeneratedMessage with scalapb.Message[ByteConstant] with scalapb.lenses.Updatable[ByteConstant] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = value
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(1, __value)
        }
      };
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = value
        if (__v != 0) {
          _output__.writeInt32(1, __v)
        }
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.ByteConstant = {
      var __value = this.value
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __value = _input__.readInt32()
          case tag => _input__.skipField(tag)
        }
      }
      scala.meta.internal.semanticdb.ByteConstant(
          value = __value
      )
    }
    def withValue(__v: _root_.scala.Int): ByteConstant = copy(value = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = value
          if (__t != 0) __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PInt(value)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = scala.meta.internal.semanticdb.ByteConstant
}

object ByteConstant extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.ByteConstant] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.ByteConstant] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): scala.meta.internal.semanticdb.ByteConstant = {
    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    scala.meta.internal.semanticdb.ByteConstant(
      __fieldsMap.getOrElse(__fields.get(0), 0).asInstanceOf[_root_.scala.Int]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb.ByteConstant] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      scala.meta.internal.semanticdb.ByteConstant(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Int]).getOrElse(0)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticdbProto.javaDescriptor.getMessageTypes.get(23)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticdbProto.scalaDescriptor.messages(23)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = scala.meta.internal.semanticdb.ByteConstant(
  )
  implicit class ByteConstantLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.ByteConstant]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.ByteConstant](_l) {
    def value: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.value)((c_, f_) => c_.copy(value = f_))
  }
  final val VALUE_FIELD_NUMBER = 1
}

@SerialVersionUID(0L)
final case class ShortConstant(
    value: _root_.scala.Int = 0
    ) extends scala.meta.internal.semanticdb.Constant with scalapb.GeneratedMessage with scalapb.Message[ShortConstant] with scalapb.lenses.Updatable[ShortConstant] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = value
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(1, __value)
        }
      };
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = value
        if (__v != 0) {
          _output__.writeInt32(1, __v)
        }
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.ShortConstant = {
      var __value = this.value
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __value = _input__.readInt32()
          case tag => _input__.skipField(tag)
        }
      }
      scala.meta.internal.semanticdb.ShortConstant(
          value = __value
      )
    }
    def withValue(__v: _root_.scala.Int): ShortConstant = copy(value = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = value
          if (__t != 0) __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PInt(value)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = scala.meta.internal.semanticdb.ShortConstant
}

object ShortConstant extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.ShortConstant] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.ShortConstant] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): scala.meta.internal.semanticdb.ShortConstant = {
    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    scala.meta.internal.semanticdb.ShortConstant(
      __fieldsMap.getOrElse(__fields.get(0), 0).asInstanceOf[_root_.scala.Int]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb.ShortConstant] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      scala.meta.internal.semanticdb.ShortConstant(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Int]).getOrElse(0)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticdbProto.javaDescriptor.getMessageTypes.get(24)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticdbProto.scalaDescriptor.messages(24)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = scala.meta.internal.semanticdb.ShortConstant(
  )
  implicit class ShortConstantLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.ShortConstant]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.ShortConstant](_l) {
    def value: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.value)((c_, f_) => c_.copy(value = f_))
  }
  final val VALUE_FIELD_NUMBER = 1
}

@SerialVersionUID(0L)
final case class CharConstant(
    value: _root_.scala.Int = 0
    ) extends scala.meta.internal.semanticdb.Constant with scalapb.GeneratedMessage with scalapb.Message[CharConstant] with scalapb.lenses.Updatable[CharConstant] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = value
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(1, __value)
        }
      };
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = value
        if (__v != 0) {
          _output__.writeInt32(1, __v)
        }
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.CharConstant = {
      var __value = this.value
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __value = _input__.readInt32()
          case tag => _input__.skipField(tag)
        }
      }
      scala.meta.internal.semanticdb.CharConstant(
          value = __value
      )
    }
    def withValue(__v: _root_.scala.Int): CharConstant = copy(value = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = value
          if (__t != 0) __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PInt(value)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = scala.meta.internal.semanticdb.CharConstant
}

object CharConstant extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.CharConstant] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.CharConstant] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): scala.meta.internal.semanticdb.CharConstant = {
    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    scala.meta.internal.semanticdb.CharConstant(
      __fieldsMap.getOrElse(__fields.get(0), 0).asInstanceOf[_root_.scala.Int]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb.CharConstant] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      scala.meta.internal.semanticdb.CharConstant(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Int]).getOrElse(0)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticdbProto.javaDescriptor.getMessageTypes.get(25)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticdbProto.scalaDescriptor.messages(25)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = scala.meta.internal.semanticdb.CharConstant(
  )
  implicit class CharConstantLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.CharConstant]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.CharConstant](_l) {
    def value: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.value)((c_, f_) => c_.copy(value = f_))
  }
  final val VALUE_FIELD_NUMBER = 1
}

@SerialVersionUID(0L)
final case class IntConstant(
    value: _root_.scala.Int = 0
    ) extends scala.meta.internal.semanticdb.Constant with scalapb.GeneratedMessage with scalapb.Message[IntConstant] with scalapb.lenses.Updatable[IntConstant] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = value
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(1, __value)
        }
      };
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = value
        if (__v != 0) {
          _output__.writeInt32(1, __v)
        }
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.IntConstant = {
      var __value = this.value
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __value = _input__.readInt32()
          case tag => _input__.skipField(tag)
        }
      }
      scala.meta.internal.semanticdb.IntConstant(
          value = __value
      )
    }
    def withValue(__v: _root_.scala.Int): IntConstant = copy(value = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = value
          if (__t != 0) __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PInt(value)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = scala.meta.internal.semanticdb.IntConstant
}

object IntConstant extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.IntConstant] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.IntConstant] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): scala.meta.internal.semanticdb.IntConstant = {
    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    scala.meta.internal.semanticdb.IntConstant(
      __fieldsMap.getOrElse(__fields.get(0), 0).asInstanceOf[_root_.scala.Int]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb.IntConstant] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      scala.meta.internal.semanticdb.IntConstant(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Int]).getOrElse(0)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticdbProto.javaDescriptor.getMessageTypes.get(26)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticdbProto.scalaDescriptor.messages(26)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = scala.meta.internal.semanticdb.IntConstant(
  )
  implicit class IntConstantLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.IntConstant]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.IntConstant](_l) {
    def value: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.value)((c_, f_) => c_.copy(value = f_))
  }
  final val VALUE_FIELD_NUMBER = 1
}

@SerialVersionUID(0L)
final case class LongConstant(
    value: _root_.scala.Long = 0L
    ) extends scala.meta.internal.semanticdb.Constant with scalapb.GeneratedMessage with scalapb.Message[LongConstant] with scalapb.lenses.Updatable[LongConstant] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = value
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(1, __value)
        }
      };
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = value
        if (__v != 0L) {
          _output__.writeInt64(1, __v)
        }
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.LongConstant = {
      var __value = this.value
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __value = _input__.readInt64()
          case tag => _input__.skipField(tag)
        }
      }
      scala.meta.internal.semanticdb.LongConstant(
          value = __value
      )
    }
    def withValue(__v: _root_.scala.Long): LongConstant = copy(value = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = value
          if (__t != 0L) __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PLong(value)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = scala.meta.internal.semanticdb.LongConstant
}

object LongConstant extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.LongConstant] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.LongConstant] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): scala.meta.internal.semanticdb.LongConstant = {
    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    scala.meta.internal.semanticdb.LongConstant(
      __fieldsMap.getOrElse(__fields.get(0), 0L).asInstanceOf[_root_.scala.Long]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb.LongConstant] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      scala.meta.internal.semanticdb.LongConstant(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Long]).getOrElse(0L)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticdbProto.javaDescriptor.getMessageTypes.get(27)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticdbProto.scalaDescriptor.messages(27)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = scala.meta.internal.semanticdb.LongConstant(
  )
  implicit class LongConstantLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.LongConstant]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.LongConstant](_l) {
    def value: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.value)((c_, f_) => c_.copy(value = f_))
  }
  final val VALUE_FIELD_NUMBER = 1
}

@SerialVersionUID(0L)
final case class FloatConstant(
    value: _root_.scala.Float = 0.0f
    ) extends scala.meta.internal.semanticdb.Constant with scalapb.GeneratedMessage with scalapb.Message[FloatConstant] with scalapb.lenses.Updatable[FloatConstant] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = value
        if (__value != 0.0f) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeFloatSize(1, __value)
        }
      };
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = value
        if (__v != 0.0f) {
          _output__.writeFloat(1, __v)
        }
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.FloatConstant = {
      var __value = this.value
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 13 =>
            __value = _input__.readFloat()
          case tag => _input__.skipField(tag)
        }
      }
      scala.meta.internal.semanticdb.FloatConstant(
          value = __value
      )
    }
    def withValue(__v: _root_.scala.Float): FloatConstant = copy(value = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = value
          if (__t != 0.0f) __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PFloat(value)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = scala.meta.internal.semanticdb.FloatConstant
}

object FloatConstant extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.FloatConstant] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.FloatConstant] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): scala.meta.internal.semanticdb.FloatConstant = {
    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    scala.meta.internal.semanticdb.FloatConstant(
      __fieldsMap.getOrElse(__fields.get(0), 0.0f).asInstanceOf[_root_.scala.Float]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb.FloatConstant] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      scala.meta.internal.semanticdb.FloatConstant(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Float]).getOrElse(0.0f)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticdbProto.javaDescriptor.getMessageTypes.get(28)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticdbProto.scalaDescriptor.messages(28)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = scala.meta.internal.semanticdb.FloatConstant(
  )
  implicit class FloatConstantLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.FloatConstant]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.FloatConstant](_l) {
    def value: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Float] = field(_.value)((c_, f_) => c_.copy(value = f_))
  }
  final val VALUE_FIELD_NUMBER = 1
}

@SerialVersionUID(0L)
final case class DoubleConstant(
    value: _root_.scala.Double = 0.0
    ) extends scala.meta.internal.semanticdb.Constant with scalapb.GeneratedMessage with scalapb.Message[DoubleConstant] with scalapb.lenses.Updatable[DoubleConstant] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = value
        if (__value != 0.0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeDoubleSize(1, __value)
        }
      };
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = value
        if (__v != 0.0) {
          _output__.writeDouble(1, __v)
        }
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.DoubleConstant = {
      var __value = this.value
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 9 =>
            __value = _input__.readDouble()
          case tag => _input__.skipField(tag)
        }
      }
      scala.meta.internal.semanticdb.DoubleConstant(
          value = __value
      )
    }
    def withValue(__v: _root_.scala.Double): DoubleConstant = copy(value = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = value
          if (__t != 0.0) __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PDouble(value)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = scala.meta.internal.semanticdb.DoubleConstant
}

object DoubleConstant extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.DoubleConstant] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.DoubleConstant] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): scala.meta.internal.semanticdb.DoubleConstant = {
    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    scala.meta.internal.semanticdb.DoubleConstant(
      __fieldsMap.getOrElse(__fields.get(0), 0.0).asInstanceOf[_root_.scala.Double]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb.DoubleConstant] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      scala.meta.internal.semanticdb.DoubleConstant(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Double]).getOrElse(0.0)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticdbProto.javaDescriptor.getMessageTypes.get(29)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticdbProto.scalaDescriptor.messages(29)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = scala.meta.internal.semanticdb.DoubleConstant(
  )
  implicit class DoubleConstantLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.DoubleConstant]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.DoubleConstant](_l) {
    def value: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Double] = field(_.value)((c_, f_) => c_.copy(value = f_))
  }
  final val VALUE_FIELD_NUMBER = 1
}

@SerialVersionUID(0L)
final case class StringConstant(
    value: _root_.scala.Predef.String = ""
    ) extends scala.meta.internal.semanticdb.Constant with scalapb.GeneratedMessage with scalapb.Message[StringConstant] with scalapb.lenses.Updatable[StringConstant] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = value
        if (__value != "") {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
        }
      };
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = value
        if (__v != "") {
          _output__.writeString(1, __v)
        }
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.StringConstant = {
      var __value = this.value
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __value = _input__.readString()
          case tag => _input__.skipField(tag)
        }
      }
      scala.meta.internal.semanticdb.StringConstant(
          value = __value
      )
    }
    def withValue(__v: _root_.scala.Predef.String): StringConstant = copy(value = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = value
          if (__t != "") __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(value)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = scala.meta.internal.semanticdb.StringConstant
}

object StringConstant extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.StringConstant] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.StringConstant] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): scala.meta.internal.semanticdb.StringConstant = {
    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    scala.meta.internal.semanticdb.StringConstant(
      __fieldsMap.getOrElse(__fields.get(0), "").asInstanceOf[_root_.scala.Predef.String]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb.StringConstant] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      scala.meta.internal.semanticdb.StringConstant(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse("")
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticdbProto.javaDescriptor.getMessageTypes.get(30)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticdbProto.scalaDescriptor.messages(30)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = scala.meta.internal.semanticdb.StringConstant(
  )
  implicit class StringConstantLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.StringConstant]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.StringConstant](_l) {
    def value: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.value)((c_, f_) => c_.copy(value = f_))
  }
  final val VALUE_FIELD_NUMBER = 1
}

@SerialVersionUID(0L)
final case class NullConstant(
    ) extends scala.meta.internal.semanticdb.Constant with scalapb.GeneratedMessage with scalapb.Message[NullConstant] with scalapb.lenses.Updatable[NullConstant] {
    final override def serializedSize: _root_.scala.Int = 0
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.NullConstant = {
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case tag => _input__.skipField(tag)
        }
      }
      scala.meta.internal.semanticdb.NullConstant(
      )
    }
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = throw new MatchError(__fieldNumber)
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = throw new MatchError(__field)
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = scala.meta.internal.semanticdb.NullConstant
}

object NullConstant extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.NullConstant] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.NullConstant] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): scala.meta.internal.semanticdb.NullConstant = {
    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    scala.meta.internal.semanticdb.NullConstant(
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb.NullConstant] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      scala.meta.internal.semanticdb.NullConstant(
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticdbProto.javaDescriptor.getMessageTypes.get(31)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticdbProto.scalaDescriptor.messages(31)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = scala.meta.internal.semanticdb.NullConstant(
  )
  implicit class NullConstantLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.NullConstant]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.NullConstant](_l) {
  }
}
