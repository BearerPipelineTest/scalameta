// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package scala.meta.internal.semanticdb

sealed trait Tree {
  final def isEmpty = this.isInstanceOf[scala.meta.internal.semanticdb.Tree.Empty.type]
  final def isDefined = !isEmpty
  final def asMessage: scala.meta.internal.semanticdb.TreeMessage = scala.meta.internal.semanticdb.Tree.TreeTypeMapper.toBase(this)
}

object Tree {
  case object Empty extends scala.meta.internal.semanticdb.Tree
  
  def defaultInstance: scala.meta.internal.semanticdb.Tree = Empty
  
  implicit val TreeTypeMapper: _root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TreeMessage, scala.meta.internal.semanticdb.Tree] = new _root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TreeMessage, scala.meta.internal.semanticdb.Tree] {
    override def toCustom(__base: scala.meta.internal.semanticdb.TreeMessage): scala.meta.internal.semanticdb.Tree = __base.sealedValue match {
      case __v: scala.meta.internal.semanticdb.TreeMessage.SealedValue.ApplyTree => __v.value
      case __v: scala.meta.internal.semanticdb.TreeMessage.SealedValue.FunctionTree => __v.value
      case __v: scala.meta.internal.semanticdb.TreeMessage.SealedValue.IdTree => __v.value
      case __v: scala.meta.internal.semanticdb.TreeMessage.SealedValue.LiteralTree => __v.value
      case __v: scala.meta.internal.semanticdb.TreeMessage.SealedValue.MacroExpansionTree => __v.value
      case __v: scala.meta.internal.semanticdb.TreeMessage.SealedValue.OriginalTree => __v.value
      case __v: scala.meta.internal.semanticdb.TreeMessage.SealedValue.SelectTree => __v.value
      case __v: scala.meta.internal.semanticdb.TreeMessage.SealedValue.TypeApplyTree => __v.value
      case scala.meta.internal.semanticdb.TreeMessage.SealedValue.Empty => Empty
    }
    override def toBase(__custom: scala.meta.internal.semanticdb.Tree): scala.meta.internal.semanticdb.TreeMessage = scala.meta.internal.semanticdb.TreeMessage(__custom match {
      case __v: scala.meta.internal.semanticdb.ApplyTree => scala.meta.internal.semanticdb.TreeMessage.SealedValue.ApplyTree(__v)
      case __v: scala.meta.internal.semanticdb.FunctionTree => scala.meta.internal.semanticdb.TreeMessage.SealedValue.FunctionTree(__v)
      case __v: scala.meta.internal.semanticdb.IdTree => scala.meta.internal.semanticdb.TreeMessage.SealedValue.IdTree(__v)
      case __v: scala.meta.internal.semanticdb.LiteralTree => scala.meta.internal.semanticdb.TreeMessage.SealedValue.LiteralTree(__v)
      case __v: scala.meta.internal.semanticdb.MacroExpansionTree => scala.meta.internal.semanticdb.TreeMessage.SealedValue.MacroExpansionTree(__v)
      case __v: scala.meta.internal.semanticdb.OriginalTree => scala.meta.internal.semanticdb.TreeMessage.SealedValue.OriginalTree(__v)
      case __v: scala.meta.internal.semanticdb.SelectTree => scala.meta.internal.semanticdb.TreeMessage.SealedValue.SelectTree(__v)
      case __v: scala.meta.internal.semanticdb.TypeApplyTree => scala.meta.internal.semanticdb.TreeMessage.SealedValue.TypeApplyTree(__v)
      case Empty => scala.meta.internal.semanticdb.TreeMessage.SealedValue.Empty
    })
  }
}
@SerialVersionUID(0L)
final case class TreeMessage(
    sealedValue: scala.meta.internal.semanticdb.TreeMessage.SealedValue = scala.meta.internal.semanticdb.TreeMessage.SealedValue.Empty
    ) extends scalapb.GeneratedMessage with scalapb.Message[TreeMessage] with scalapb.lenses.Updatable[TreeMessage] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (sealedValue.applyTree.isDefined) {
        val __value = sealedValue.applyTree.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (sealedValue.functionTree.isDefined) {
        val __value = sealedValue.functionTree.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (sealedValue.idTree.isDefined) {
        val __value = sealedValue.idTree.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (sealedValue.literalTree.isDefined) {
        val __value = sealedValue.literalTree.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (sealedValue.macroExpansionTree.isDefined) {
        val __value = sealedValue.macroExpansionTree.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (sealedValue.originalTree.isDefined) {
        val __value = sealedValue.originalTree.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (sealedValue.selectTree.isDefined) {
        val __value = sealedValue.selectTree.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (sealedValue.typeApplyTree.isDefined) {
        val __value = sealedValue.typeApplyTree.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      sealedValue.applyTree.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      sealedValue.functionTree.foreach { __v =>
        val __m = __v
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      sealedValue.idTree.foreach { __v =>
        val __m = __v
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      sealedValue.literalTree.foreach { __v =>
        val __m = __v
        _output__.writeTag(4, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      sealedValue.macroExpansionTree.foreach { __v =>
        val __m = __v
        _output__.writeTag(5, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      sealedValue.originalTree.foreach { __v =>
        val __m = __v
        _output__.writeTag(6, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      sealedValue.selectTree.foreach { __v =>
        val __m = __v
        _output__.writeTag(7, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      sealedValue.typeApplyTree.foreach { __v =>
        val __m = __v
        _output__.writeTag(8, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.TreeMessage = {
      var __sealedValue = this.sealedValue
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __sealedValue = scala.meta.internal.semanticdb.TreeMessage.SealedValue.ApplyTree(_root_.scalapb.LiteParser.readMessage(_input__, sealedValue.applyTree.getOrElse(scala.meta.internal.semanticdb.ApplyTree.defaultInstance)))
          case 18 =>
            __sealedValue = scala.meta.internal.semanticdb.TreeMessage.SealedValue.FunctionTree(_root_.scalapb.LiteParser.readMessage(_input__, sealedValue.functionTree.getOrElse(scala.meta.internal.semanticdb.FunctionTree.defaultInstance)))
          case 26 =>
            __sealedValue = scala.meta.internal.semanticdb.TreeMessage.SealedValue.IdTree(_root_.scalapb.LiteParser.readMessage(_input__, sealedValue.idTree.getOrElse(scala.meta.internal.semanticdb.IdTree.defaultInstance)))
          case 34 =>
            __sealedValue = scala.meta.internal.semanticdb.TreeMessage.SealedValue.LiteralTree(_root_.scalapb.LiteParser.readMessage(_input__, sealedValue.literalTree.getOrElse(scala.meta.internal.semanticdb.LiteralTree.defaultInstance)))
          case 42 =>
            __sealedValue = scala.meta.internal.semanticdb.TreeMessage.SealedValue.MacroExpansionTree(_root_.scalapb.LiteParser.readMessage(_input__, sealedValue.macroExpansionTree.getOrElse(scala.meta.internal.semanticdb.MacroExpansionTree.defaultInstance)))
          case 50 =>
            __sealedValue = scala.meta.internal.semanticdb.TreeMessage.SealedValue.OriginalTree(_root_.scalapb.LiteParser.readMessage(_input__, sealedValue.originalTree.getOrElse(scala.meta.internal.semanticdb.OriginalTree.defaultInstance)))
          case 58 =>
            __sealedValue = scala.meta.internal.semanticdb.TreeMessage.SealedValue.SelectTree(_root_.scalapb.LiteParser.readMessage(_input__, sealedValue.selectTree.getOrElse(scala.meta.internal.semanticdb.SelectTree.defaultInstance)))
          case 66 =>
            __sealedValue = scala.meta.internal.semanticdb.TreeMessage.SealedValue.TypeApplyTree(_root_.scalapb.LiteParser.readMessage(_input__, sealedValue.typeApplyTree.getOrElse(scala.meta.internal.semanticdb.TypeApplyTree.defaultInstance)))
          case tag => _input__.skipField(tag)
        }
      }
      scala.meta.internal.semanticdb.TreeMessage(
          sealedValue = __sealedValue
      )
    }
    def getApplyTree: scala.meta.internal.semanticdb.ApplyTree = sealedValue.applyTree.getOrElse(scala.meta.internal.semanticdb.ApplyTree.defaultInstance)
    def withApplyTree(__v: scala.meta.internal.semanticdb.ApplyTree): TreeMessage = copy(sealedValue = scala.meta.internal.semanticdb.TreeMessage.SealedValue.ApplyTree(__v))
    def getFunctionTree: scala.meta.internal.semanticdb.FunctionTree = sealedValue.functionTree.getOrElse(scala.meta.internal.semanticdb.FunctionTree.defaultInstance)
    def withFunctionTree(__v: scala.meta.internal.semanticdb.FunctionTree): TreeMessage = copy(sealedValue = scala.meta.internal.semanticdb.TreeMessage.SealedValue.FunctionTree(__v))
    def getIdTree: scala.meta.internal.semanticdb.IdTree = sealedValue.idTree.getOrElse(scala.meta.internal.semanticdb.IdTree.defaultInstance)
    def withIdTree(__v: scala.meta.internal.semanticdb.IdTree): TreeMessage = copy(sealedValue = scala.meta.internal.semanticdb.TreeMessage.SealedValue.IdTree(__v))
    def getLiteralTree: scala.meta.internal.semanticdb.LiteralTree = sealedValue.literalTree.getOrElse(scala.meta.internal.semanticdb.LiteralTree.defaultInstance)
    def withLiteralTree(__v: scala.meta.internal.semanticdb.LiteralTree): TreeMessage = copy(sealedValue = scala.meta.internal.semanticdb.TreeMessage.SealedValue.LiteralTree(__v))
    def getMacroExpansionTree: scala.meta.internal.semanticdb.MacroExpansionTree = sealedValue.macroExpansionTree.getOrElse(scala.meta.internal.semanticdb.MacroExpansionTree.defaultInstance)
    def withMacroExpansionTree(__v: scala.meta.internal.semanticdb.MacroExpansionTree): TreeMessage = copy(sealedValue = scala.meta.internal.semanticdb.TreeMessage.SealedValue.MacroExpansionTree(__v))
    def getOriginalTree: scala.meta.internal.semanticdb.OriginalTree = sealedValue.originalTree.getOrElse(scala.meta.internal.semanticdb.OriginalTree.defaultInstance)
    def withOriginalTree(__v: scala.meta.internal.semanticdb.OriginalTree): TreeMessage = copy(sealedValue = scala.meta.internal.semanticdb.TreeMessage.SealedValue.OriginalTree(__v))
    def getSelectTree: scala.meta.internal.semanticdb.SelectTree = sealedValue.selectTree.getOrElse(scala.meta.internal.semanticdb.SelectTree.defaultInstance)
    def withSelectTree(__v: scala.meta.internal.semanticdb.SelectTree): TreeMessage = copy(sealedValue = scala.meta.internal.semanticdb.TreeMessage.SealedValue.SelectTree(__v))
    def getTypeApplyTree: scala.meta.internal.semanticdb.TypeApplyTree = sealedValue.typeApplyTree.getOrElse(scala.meta.internal.semanticdb.TypeApplyTree.defaultInstance)
    def withTypeApplyTree(__v: scala.meta.internal.semanticdb.TypeApplyTree): TreeMessage = copy(sealedValue = scala.meta.internal.semanticdb.TreeMessage.SealedValue.TypeApplyTree(__v))
    def clearSealedValue: TreeMessage = copy(sealedValue = scala.meta.internal.semanticdb.TreeMessage.SealedValue.Empty)
    def withSealedValue(__v: scala.meta.internal.semanticdb.TreeMessage.SealedValue): TreeMessage = copy(sealedValue = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => sealedValue.applyTree.orNull
        case 2 => sealedValue.functionTree.orNull
        case 3 => sealedValue.idTree.orNull
        case 4 => sealedValue.literalTree.orNull
        case 5 => sealedValue.macroExpansionTree.orNull
        case 6 => sealedValue.originalTree.orNull
        case 7 => sealedValue.selectTree.orNull
        case 8 => sealedValue.typeApplyTree.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => sealedValue.applyTree.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => sealedValue.functionTree.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => sealedValue.idTree.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => sealedValue.literalTree.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => sealedValue.macroExpansionTree.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 6 => sealedValue.originalTree.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 7 => sealedValue.selectTree.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 8 => sealedValue.typeApplyTree.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = scala.meta.internal.semanticdb.TreeMessage
    def toTree: scala.meta.internal.semanticdb.Tree = scala.meta.internal.semanticdb.Tree.TreeTypeMapper.toCustom(this)
}

object TreeMessage extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.TreeMessage] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.TreeMessage] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): scala.meta.internal.semanticdb.TreeMessage = {
    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    scala.meta.internal.semanticdb.TreeMessage(
      sealedValue = __fieldsMap.get(__fields.get(0)).asInstanceOf[_root_.scala.Option[scala.meta.internal.semanticdb.ApplyTree]].map(scala.meta.internal.semanticdb.TreeMessage.SealedValue.ApplyTree)
    .orElse[scala.meta.internal.semanticdb.TreeMessage.SealedValue](__fieldsMap.get(__fields.get(1)).asInstanceOf[_root_.scala.Option[scala.meta.internal.semanticdb.FunctionTree]].map(scala.meta.internal.semanticdb.TreeMessage.SealedValue.FunctionTree))
    .orElse[scala.meta.internal.semanticdb.TreeMessage.SealedValue](__fieldsMap.get(__fields.get(2)).asInstanceOf[_root_.scala.Option[scala.meta.internal.semanticdb.IdTree]].map(scala.meta.internal.semanticdb.TreeMessage.SealedValue.IdTree))
    .orElse[scala.meta.internal.semanticdb.TreeMessage.SealedValue](__fieldsMap.get(__fields.get(3)).asInstanceOf[_root_.scala.Option[scala.meta.internal.semanticdb.LiteralTree]].map(scala.meta.internal.semanticdb.TreeMessage.SealedValue.LiteralTree))
    .orElse[scala.meta.internal.semanticdb.TreeMessage.SealedValue](__fieldsMap.get(__fields.get(4)).asInstanceOf[_root_.scala.Option[scala.meta.internal.semanticdb.MacroExpansionTree]].map(scala.meta.internal.semanticdb.TreeMessage.SealedValue.MacroExpansionTree))
    .orElse[scala.meta.internal.semanticdb.TreeMessage.SealedValue](__fieldsMap.get(__fields.get(5)).asInstanceOf[_root_.scala.Option[scala.meta.internal.semanticdb.OriginalTree]].map(scala.meta.internal.semanticdb.TreeMessage.SealedValue.OriginalTree))
    .orElse[scala.meta.internal.semanticdb.TreeMessage.SealedValue](__fieldsMap.get(__fields.get(6)).asInstanceOf[_root_.scala.Option[scala.meta.internal.semanticdb.SelectTree]].map(scala.meta.internal.semanticdb.TreeMessage.SealedValue.SelectTree))
    .orElse[scala.meta.internal.semanticdb.TreeMessage.SealedValue](__fieldsMap.get(__fields.get(7)).asInstanceOf[_root_.scala.Option[scala.meta.internal.semanticdb.TypeApplyTree]].map(scala.meta.internal.semanticdb.TreeMessage.SealedValue.TypeApplyTree))
    .getOrElse(scala.meta.internal.semanticdb.TreeMessage.SealedValue.Empty)
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb.TreeMessage] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      scala.meta.internal.semanticdb.TreeMessage(
        sealedValue = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb.ApplyTree]]).map(scala.meta.internal.semanticdb.TreeMessage.SealedValue.ApplyTree)
    .orElse[scala.meta.internal.semanticdb.TreeMessage.SealedValue](__fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb.FunctionTree]]).map(scala.meta.internal.semanticdb.TreeMessage.SealedValue.FunctionTree))
    .orElse[scala.meta.internal.semanticdb.TreeMessage.SealedValue](__fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb.IdTree]]).map(scala.meta.internal.semanticdb.TreeMessage.SealedValue.IdTree))
    .orElse[scala.meta.internal.semanticdb.TreeMessage.SealedValue](__fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb.LiteralTree]]).map(scala.meta.internal.semanticdb.TreeMessage.SealedValue.LiteralTree))
    .orElse[scala.meta.internal.semanticdb.TreeMessage.SealedValue](__fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb.MacroExpansionTree]]).map(scala.meta.internal.semanticdb.TreeMessage.SealedValue.MacroExpansionTree))
    .orElse[scala.meta.internal.semanticdb.TreeMessage.SealedValue](__fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb.OriginalTree]]).map(scala.meta.internal.semanticdb.TreeMessage.SealedValue.OriginalTree))
    .orElse[scala.meta.internal.semanticdb.TreeMessage.SealedValue](__fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb.SelectTree]]).map(scala.meta.internal.semanticdb.TreeMessage.SealedValue.SelectTree))
    .orElse[scala.meta.internal.semanticdb.TreeMessage.SealedValue](__fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb.TypeApplyTree]]).map(scala.meta.internal.semanticdb.TreeMessage.SealedValue.TypeApplyTree))
    .getOrElse(scala.meta.internal.semanticdb.TreeMessage.SealedValue.Empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticdbProto.javaDescriptor.getMessageTypes.get(43)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticdbProto.scalaDescriptor.messages(43)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = scala.meta.internal.semanticdb.ApplyTree
      case 2 => __out = scala.meta.internal.semanticdb.FunctionTree
      case 3 => __out = scala.meta.internal.semanticdb.IdTree
      case 4 => __out = scala.meta.internal.semanticdb.LiteralTree
      case 5 => __out = scala.meta.internal.semanticdb.MacroExpansionTree
      case 6 => __out = scala.meta.internal.semanticdb.OriginalTree
      case 7 => __out = scala.meta.internal.semanticdb.SelectTree
      case 8 => __out = scala.meta.internal.semanticdb.TypeApplyTree
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = scala.meta.internal.semanticdb.TreeMessage(
  )
  sealed trait SealedValue extends _root_.scalapb.GeneratedOneof {
    def isEmpty: _root_.scala.Boolean = false
    def isDefined: _root_.scala.Boolean = true
    def isApplyTree: _root_.scala.Boolean = false
    def isFunctionTree: _root_.scala.Boolean = false
    def isIdTree: _root_.scala.Boolean = false
    def isLiteralTree: _root_.scala.Boolean = false
    def isMacroExpansionTree: _root_.scala.Boolean = false
    def isOriginalTree: _root_.scala.Boolean = false
    def isSelectTree: _root_.scala.Boolean = false
    def isTypeApplyTree: _root_.scala.Boolean = false
    def applyTree: _root_.scala.Option[scala.meta.internal.semanticdb.ApplyTree] = None
    def functionTree: _root_.scala.Option[scala.meta.internal.semanticdb.FunctionTree] = None
    def idTree: _root_.scala.Option[scala.meta.internal.semanticdb.IdTree] = None
    def literalTree: _root_.scala.Option[scala.meta.internal.semanticdb.LiteralTree] = None
    def macroExpansionTree: _root_.scala.Option[scala.meta.internal.semanticdb.MacroExpansionTree] = None
    def originalTree: _root_.scala.Option[scala.meta.internal.semanticdb.OriginalTree] = None
    def selectTree: _root_.scala.Option[scala.meta.internal.semanticdb.SelectTree] = None
    def typeApplyTree: _root_.scala.Option[scala.meta.internal.semanticdb.TypeApplyTree] = None
  }
  object SealedValue extends {
    @SerialVersionUID(0L)
    case object Empty extends scala.meta.internal.semanticdb.TreeMessage.SealedValue {
      type ValueType = _root_.scala.Nothing
      override def isEmpty: _root_.scala.Boolean = true
      override def isDefined: _root_.scala.Boolean = false
      override def number: _root_.scala.Int = 0
      override def value: _root_.scala.Nothing = throw new java.util.NoSuchElementException("Empty.value")
    }
  
    @SerialVersionUID(0L)
    final case class ApplyTree(value: scala.meta.internal.semanticdb.ApplyTree) extends scala.meta.internal.semanticdb.TreeMessage.SealedValue {
      type ValueType = scala.meta.internal.semanticdb.ApplyTree
      override def isApplyTree: _root_.scala.Boolean = true
      override def applyTree: _root_.scala.Option[scala.meta.internal.semanticdb.ApplyTree] = Some(value)
      override def number: _root_.scala.Int = 1
    }
    @SerialVersionUID(0L)
    final case class FunctionTree(value: scala.meta.internal.semanticdb.FunctionTree) extends scala.meta.internal.semanticdb.TreeMessage.SealedValue {
      type ValueType = scala.meta.internal.semanticdb.FunctionTree
      override def isFunctionTree: _root_.scala.Boolean = true
      override def functionTree: _root_.scala.Option[scala.meta.internal.semanticdb.FunctionTree] = Some(value)
      override def number: _root_.scala.Int = 2
    }
    @SerialVersionUID(0L)
    final case class IdTree(value: scala.meta.internal.semanticdb.IdTree) extends scala.meta.internal.semanticdb.TreeMessage.SealedValue {
      type ValueType = scala.meta.internal.semanticdb.IdTree
      override def isIdTree: _root_.scala.Boolean = true
      override def idTree: _root_.scala.Option[scala.meta.internal.semanticdb.IdTree] = Some(value)
      override def number: _root_.scala.Int = 3
    }
    @SerialVersionUID(0L)
    final case class LiteralTree(value: scala.meta.internal.semanticdb.LiteralTree) extends scala.meta.internal.semanticdb.TreeMessage.SealedValue {
      type ValueType = scala.meta.internal.semanticdb.LiteralTree
      override def isLiteralTree: _root_.scala.Boolean = true
      override def literalTree: _root_.scala.Option[scala.meta.internal.semanticdb.LiteralTree] = Some(value)
      override def number: _root_.scala.Int = 4
    }
    @SerialVersionUID(0L)
    final case class MacroExpansionTree(value: scala.meta.internal.semanticdb.MacroExpansionTree) extends scala.meta.internal.semanticdb.TreeMessage.SealedValue {
      type ValueType = scala.meta.internal.semanticdb.MacroExpansionTree
      override def isMacroExpansionTree: _root_.scala.Boolean = true
      override def macroExpansionTree: _root_.scala.Option[scala.meta.internal.semanticdb.MacroExpansionTree] = Some(value)
      override def number: _root_.scala.Int = 5
    }
    @SerialVersionUID(0L)
    final case class OriginalTree(value: scala.meta.internal.semanticdb.OriginalTree) extends scala.meta.internal.semanticdb.TreeMessage.SealedValue {
      type ValueType = scala.meta.internal.semanticdb.OriginalTree
      override def isOriginalTree: _root_.scala.Boolean = true
      override def originalTree: _root_.scala.Option[scala.meta.internal.semanticdb.OriginalTree] = Some(value)
      override def number: _root_.scala.Int = 6
    }
    @SerialVersionUID(0L)
    final case class SelectTree(value: scala.meta.internal.semanticdb.SelectTree) extends scala.meta.internal.semanticdb.TreeMessage.SealedValue {
      type ValueType = scala.meta.internal.semanticdb.SelectTree
      override def isSelectTree: _root_.scala.Boolean = true
      override def selectTree: _root_.scala.Option[scala.meta.internal.semanticdb.SelectTree] = Some(value)
      override def number: _root_.scala.Int = 7
    }
    @SerialVersionUID(0L)
    final case class TypeApplyTree(value: scala.meta.internal.semanticdb.TypeApplyTree) extends scala.meta.internal.semanticdb.TreeMessage.SealedValue {
      type ValueType = scala.meta.internal.semanticdb.TypeApplyTree
      override def isTypeApplyTree: _root_.scala.Boolean = true
      override def typeApplyTree: _root_.scala.Option[scala.meta.internal.semanticdb.TypeApplyTree] = Some(value)
      override def number: _root_.scala.Int = 8
    }
  }
  implicit class TreeMessageLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.TreeMessage]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.TreeMessage](_l) {
    def applyTree: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.ApplyTree] = field(_.getApplyTree)((c_, f_) => c_.copy(sealedValue = scala.meta.internal.semanticdb.TreeMessage.SealedValue.ApplyTree(f_)))
    def functionTree: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.FunctionTree] = field(_.getFunctionTree)((c_, f_) => c_.copy(sealedValue = scala.meta.internal.semanticdb.TreeMessage.SealedValue.FunctionTree(f_)))
    def idTree: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.IdTree] = field(_.getIdTree)((c_, f_) => c_.copy(sealedValue = scala.meta.internal.semanticdb.TreeMessage.SealedValue.IdTree(f_)))
    def literalTree: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.LiteralTree] = field(_.getLiteralTree)((c_, f_) => c_.copy(sealedValue = scala.meta.internal.semanticdb.TreeMessage.SealedValue.LiteralTree(f_)))
    def macroExpansionTree: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.MacroExpansionTree] = field(_.getMacroExpansionTree)((c_, f_) => c_.copy(sealedValue = scala.meta.internal.semanticdb.TreeMessage.SealedValue.MacroExpansionTree(f_)))
    def originalTree: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.OriginalTree] = field(_.getOriginalTree)((c_, f_) => c_.copy(sealedValue = scala.meta.internal.semanticdb.TreeMessage.SealedValue.OriginalTree(f_)))
    def selectTree: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.SelectTree] = field(_.getSelectTree)((c_, f_) => c_.copy(sealedValue = scala.meta.internal.semanticdb.TreeMessage.SealedValue.SelectTree(f_)))
    def typeApplyTree: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.TypeApplyTree] = field(_.getTypeApplyTree)((c_, f_) => c_.copy(sealedValue = scala.meta.internal.semanticdb.TreeMessage.SealedValue.TypeApplyTree(f_)))
    def sealedValue: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.TreeMessage.SealedValue] = field(_.sealedValue)((c_, f_) => c_.copy(sealedValue = f_))
  }
  final val APPLYTREE_FIELD_NUMBER = 1
  final val FUNCTIONTREE_FIELD_NUMBER = 2
  final val IDTREE_FIELD_NUMBER = 3
  final val LITERALTREE_FIELD_NUMBER = 4
  final val MACROEXPANSIONTREE_FIELD_NUMBER = 5
  final val ORIGINALTREE_FIELD_NUMBER = 6
  final val SELECTTREE_FIELD_NUMBER = 7
  final val TYPEAPPLYTREE_FIELD_NUMBER = 8
}

@SerialVersionUID(0L)
final case class ApplyTree(
    fn: scala.meta.internal.semanticdb.Tree = scala.meta.internal.semanticdb.ApplyTree._typemapper_fn.toCustom(scala.meta.internal.semanticdb.TreeMessage.defaultInstance),
    args: _root_.scala.collection.Seq[scala.meta.internal.semanticdb.Tree] = _root_.scala.collection.Seq.empty
    ) extends scala.meta.internal.semanticdb.Tree with scalapb.GeneratedMessage with scalapb.Message[ApplyTree] with scalapb.lenses.Updatable[ApplyTree] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = scala.meta.internal.semanticdb.ApplyTree._typemapper_fn.toBase(fn)
        if (__value != scala.meta.internal.semanticdb.TreeMessage.defaultInstance) {
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        }
      };
      args.foreach { __item =>
        val __value = scala.meta.internal.semanticdb.ApplyTree._typemapper_args.toBase(__item)
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = scala.meta.internal.semanticdb.ApplyTree._typemapper_fn.toBase(fn)
        if (__v != scala.meta.internal.semanticdb.TreeMessage.defaultInstance) {
          _output__.writeTag(1, 2)
          _output__.writeUInt32NoTag(__v.serializedSize)
          __v.writeTo(_output__)
        }
      };
      args.foreach { __v =>
        val __m = scala.meta.internal.semanticdb.ApplyTree._typemapper_args.toBase(__v)
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.ApplyTree = {
      var __fn = this.fn
      val __args = (_root_.scala.collection.immutable.Vector.newBuilder[scala.meta.internal.semanticdb.Tree] ++= this.args)
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __fn = scala.meta.internal.semanticdb.ApplyTree._typemapper_fn.toCustom(_root_.scalapb.LiteParser.readMessage(_input__, scala.meta.internal.semanticdb.ApplyTree._typemapper_fn.toBase(__fn)))
          case 18 =>
            __args += scala.meta.internal.semanticdb.ApplyTree._typemapper_args.toCustom(_root_.scalapb.LiteParser.readMessage(_input__, scala.meta.internal.semanticdb.TreeMessage.defaultInstance))
          case tag => _input__.skipField(tag)
        }
      }
      scala.meta.internal.semanticdb.ApplyTree(
          fn = __fn,
          args = __args.result()
      )
    }
    def withFn(__v: scala.meta.internal.semanticdb.Tree): ApplyTree = copy(fn = __v)
    def clearArgs = copy(args = _root_.scala.collection.Seq.empty)
    def addArgs(__vs: scala.meta.internal.semanticdb.Tree*): ApplyTree = addAllArgs(__vs)
    def addAllArgs(__vs: TraversableOnce[scala.meta.internal.semanticdb.Tree]): ApplyTree = copy(args = args ++ __vs)
    def withArgs(__v: _root_.scala.collection.Seq[scala.meta.internal.semanticdb.Tree]): ApplyTree = copy(args = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = scala.meta.internal.semanticdb.ApplyTree._typemapper_fn.toBase(fn)
          if (__t != scala.meta.internal.semanticdb.TreeMessage.defaultInstance) __t else null
        }
        case 2 => args.map(scala.meta.internal.semanticdb.ApplyTree._typemapper_args.toBase)(_root_.scala.collection.breakOut)
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => scala.meta.internal.semanticdb.ApplyTree._typemapper_fn.toBase(fn).toPMessage
        case 2 => _root_.scalapb.descriptors.PRepeated(args.map(scala.meta.internal.semanticdb.ApplyTree._typemapper_args.toBase(_).toPMessage)(_root_.scala.collection.breakOut))
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = scala.meta.internal.semanticdb.ApplyTree
}

object ApplyTree extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.ApplyTree] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.ApplyTree] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): scala.meta.internal.semanticdb.ApplyTree = {
    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    scala.meta.internal.semanticdb.ApplyTree(
      scala.meta.internal.semanticdb.ApplyTree._typemapper_fn.toCustom(__fieldsMap.getOrElse(__fields.get(0), scala.meta.internal.semanticdb.TreeMessage.defaultInstance).asInstanceOf[scala.meta.internal.semanticdb.TreeMessage]),
      __fieldsMap.getOrElse(__fields.get(1), Nil).asInstanceOf[_root_.scala.collection.Seq[scala.meta.internal.semanticdb.TreeMessage]].map(scala.meta.internal.semanticdb.ApplyTree._typemapper_args.toCustom)(_root_.scala.collection.breakOut)
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb.ApplyTree] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      scala.meta.internal.semanticdb.ApplyTree(
        scala.meta.internal.semanticdb.ApplyTree._typemapper_fn.toCustom(__fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[scala.meta.internal.semanticdb.TreeMessage]).getOrElse(scala.meta.internal.semanticdb.TreeMessage.defaultInstance)),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.collection.Seq[scala.meta.internal.semanticdb.TreeMessage]]).getOrElse(_root_.scala.collection.Seq.empty).map(scala.meta.internal.semanticdb.ApplyTree._typemapper_args.toCustom)(_root_.scala.collection.breakOut)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticdbProto.javaDescriptor.getMessageTypes.get(44)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticdbProto.scalaDescriptor.messages(44)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = scala.meta.internal.semanticdb.TreeMessage
      case 2 => __out = scala.meta.internal.semanticdb.TreeMessage
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = scala.meta.internal.semanticdb.ApplyTree(
  )
  implicit class ApplyTreeLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.ApplyTree]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.ApplyTree](_l) {
    def fn: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.Tree] = field(_.fn)((c_, f_) => c_.copy(fn = f_))
    def args: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.Seq[scala.meta.internal.semanticdb.Tree]] = field(_.args)((c_, f_) => c_.copy(args = f_))
  }
  final val FN_FIELD_NUMBER = 1
  final val ARGS_FIELD_NUMBER = 2
  @transient
  private val _typemapper_fn: _root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TreeMessage, scala.meta.internal.semanticdb.Tree] = implicitly[_root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TreeMessage, scala.meta.internal.semanticdb.Tree]]
  @transient
  private val _typemapper_args: _root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TreeMessage, scala.meta.internal.semanticdb.Tree] = implicitly[_root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TreeMessage, scala.meta.internal.semanticdb.Tree]]
}

@SerialVersionUID(0L)
final case class FunctionTree(
    params: _root_.scala.collection.Seq[scala.meta.internal.semanticdb.IdTree] = _root_.scala.collection.Seq.empty,
    term: scala.meta.internal.semanticdb.Tree = scala.meta.internal.semanticdb.FunctionTree._typemapper_term.toCustom(scala.meta.internal.semanticdb.TreeMessage.defaultInstance)
    ) extends scala.meta.internal.semanticdb.Tree with scalapb.GeneratedMessage with scalapb.Message[FunctionTree] with scalapb.lenses.Updatable[FunctionTree] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      params.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      
      {
        val __value = scala.meta.internal.semanticdb.FunctionTree._typemapper_term.toBase(term)
        if (__value != scala.meta.internal.semanticdb.TreeMessage.defaultInstance) {
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        }
      };
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      params.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      {
        val __v = scala.meta.internal.semanticdb.FunctionTree._typemapper_term.toBase(term)
        if (__v != scala.meta.internal.semanticdb.TreeMessage.defaultInstance) {
          _output__.writeTag(2, 2)
          _output__.writeUInt32NoTag(__v.serializedSize)
          __v.writeTo(_output__)
        }
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.FunctionTree = {
      val __params = (_root_.scala.collection.immutable.Vector.newBuilder[scala.meta.internal.semanticdb.IdTree] ++= this.params)
      var __term = this.term
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __params += _root_.scalapb.LiteParser.readMessage(_input__, scala.meta.internal.semanticdb.IdTree.defaultInstance)
          case 18 =>
            __term = scala.meta.internal.semanticdb.FunctionTree._typemapper_term.toCustom(_root_.scalapb.LiteParser.readMessage(_input__, scala.meta.internal.semanticdb.FunctionTree._typemapper_term.toBase(__term)))
          case tag => _input__.skipField(tag)
        }
      }
      scala.meta.internal.semanticdb.FunctionTree(
          params = __params.result(),
          term = __term
      )
    }
    def clearParams = copy(params = _root_.scala.collection.Seq.empty)
    def addParams(__vs: scala.meta.internal.semanticdb.IdTree*): FunctionTree = addAllParams(__vs)
    def addAllParams(__vs: TraversableOnce[scala.meta.internal.semanticdb.IdTree]): FunctionTree = copy(params = params ++ __vs)
    def withParams(__v: _root_.scala.collection.Seq[scala.meta.internal.semanticdb.IdTree]): FunctionTree = copy(params = __v)
    def withTerm(__v: scala.meta.internal.semanticdb.Tree): FunctionTree = copy(term = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => params
        case 2 => {
          val __t = scala.meta.internal.semanticdb.FunctionTree._typemapper_term.toBase(term)
          if (__t != scala.meta.internal.semanticdb.TreeMessage.defaultInstance) __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PRepeated(params.map(_.toPMessage)(_root_.scala.collection.breakOut))
        case 2 => scala.meta.internal.semanticdb.FunctionTree._typemapper_term.toBase(term).toPMessage
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = scala.meta.internal.semanticdb.FunctionTree
}

object FunctionTree extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.FunctionTree] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.FunctionTree] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): scala.meta.internal.semanticdb.FunctionTree = {
    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    scala.meta.internal.semanticdb.FunctionTree(
      __fieldsMap.getOrElse(__fields.get(0), Nil).asInstanceOf[_root_.scala.collection.Seq[scala.meta.internal.semanticdb.IdTree]],
      scala.meta.internal.semanticdb.FunctionTree._typemapper_term.toCustom(__fieldsMap.getOrElse(__fields.get(1), scala.meta.internal.semanticdb.TreeMessage.defaultInstance).asInstanceOf[scala.meta.internal.semanticdb.TreeMessage])
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb.FunctionTree] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      scala.meta.internal.semanticdb.FunctionTree(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.collection.Seq[scala.meta.internal.semanticdb.IdTree]]).getOrElse(_root_.scala.collection.Seq.empty),
        scala.meta.internal.semanticdb.FunctionTree._typemapper_term.toCustom(__fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[scala.meta.internal.semanticdb.TreeMessage]).getOrElse(scala.meta.internal.semanticdb.TreeMessage.defaultInstance))
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticdbProto.javaDescriptor.getMessageTypes.get(45)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticdbProto.scalaDescriptor.messages(45)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = scala.meta.internal.semanticdb.IdTree
      case 2 => __out = scala.meta.internal.semanticdb.TreeMessage
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = scala.meta.internal.semanticdb.FunctionTree(
  )
  implicit class FunctionTreeLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.FunctionTree]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.FunctionTree](_l) {
    def params: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.Seq[scala.meta.internal.semanticdb.IdTree]] = field(_.params)((c_, f_) => c_.copy(params = f_))
    def term: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.Tree] = field(_.term)((c_, f_) => c_.copy(term = f_))
  }
  final val PARAMS_FIELD_NUMBER = 1
  final val TERM_FIELD_NUMBER = 2
  @transient
  private val _typemapper_term: _root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TreeMessage, scala.meta.internal.semanticdb.Tree] = implicitly[_root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TreeMessage, scala.meta.internal.semanticdb.Tree]]
}

@SerialVersionUID(0L)
final case class IdTree(
    sym: _root_.scala.Predef.String = ""
    ) extends scala.meta.internal.semanticdb.Tree with scalapb.GeneratedMessage with scalapb.Message[IdTree] with scalapb.lenses.Updatable[IdTree] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = sym
        if (__value != "") {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
        }
      };
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = sym
        if (__v != "") {
          _output__.writeString(1, __v)
        }
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.IdTree = {
      var __sym = this.sym
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __sym = _input__.readString()
          case tag => _input__.skipField(tag)
        }
      }
      scala.meta.internal.semanticdb.IdTree(
          sym = __sym
      )
    }
    def withSym(__v: _root_.scala.Predef.String): IdTree = copy(sym = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = sym
          if (__t != "") __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(sym)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = scala.meta.internal.semanticdb.IdTree
}

object IdTree extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.IdTree] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.IdTree] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): scala.meta.internal.semanticdb.IdTree = {
    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    scala.meta.internal.semanticdb.IdTree(
      __fieldsMap.getOrElse(__fields.get(0), "").asInstanceOf[_root_.scala.Predef.String]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb.IdTree] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      scala.meta.internal.semanticdb.IdTree(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse("")
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticdbProto.javaDescriptor.getMessageTypes.get(46)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticdbProto.scalaDescriptor.messages(46)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = scala.meta.internal.semanticdb.IdTree(
  )
  implicit class IdTreeLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.IdTree]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.IdTree](_l) {
    def sym: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.sym)((c_, f_) => c_.copy(sym = f_))
  }
  final val SYM_FIELD_NUMBER = 1
}

@SerialVersionUID(0L)
final case class LiteralTree(
    const: scala.meta.internal.semanticdb.Constant = scala.meta.internal.semanticdb.LiteralTree._typemapper_const.toCustom(scala.meta.internal.semanticdb.ConstantMessage.defaultInstance)
    ) extends scala.meta.internal.semanticdb.Tree with scalapb.GeneratedMessage with scalapb.Message[LiteralTree] with scalapb.lenses.Updatable[LiteralTree] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = scala.meta.internal.semanticdb.LiteralTree._typemapper_const.toBase(const)
        if (__value != scala.meta.internal.semanticdb.ConstantMessage.defaultInstance) {
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        }
      };
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = scala.meta.internal.semanticdb.LiteralTree._typemapper_const.toBase(const)
        if (__v != scala.meta.internal.semanticdb.ConstantMessage.defaultInstance) {
          _output__.writeTag(1, 2)
          _output__.writeUInt32NoTag(__v.serializedSize)
          __v.writeTo(_output__)
        }
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.LiteralTree = {
      var __const = this.const
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __const = scala.meta.internal.semanticdb.LiteralTree._typemapper_const.toCustom(_root_.scalapb.LiteParser.readMessage(_input__, scala.meta.internal.semanticdb.LiteralTree._typemapper_const.toBase(__const)))
          case tag => _input__.skipField(tag)
        }
      }
      scala.meta.internal.semanticdb.LiteralTree(
          const = __const
      )
    }
    def withConst(__v: scala.meta.internal.semanticdb.Constant): LiteralTree = copy(const = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = scala.meta.internal.semanticdb.LiteralTree._typemapper_const.toBase(const)
          if (__t != scala.meta.internal.semanticdb.ConstantMessage.defaultInstance) __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => scala.meta.internal.semanticdb.LiteralTree._typemapper_const.toBase(const).toPMessage
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = scala.meta.internal.semanticdb.LiteralTree
}

object LiteralTree extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.LiteralTree] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.LiteralTree] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): scala.meta.internal.semanticdb.LiteralTree = {
    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    scala.meta.internal.semanticdb.LiteralTree(
      scala.meta.internal.semanticdb.LiteralTree._typemapper_const.toCustom(__fieldsMap.getOrElse(__fields.get(0), scala.meta.internal.semanticdb.ConstantMessage.defaultInstance).asInstanceOf[scala.meta.internal.semanticdb.ConstantMessage])
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb.LiteralTree] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      scala.meta.internal.semanticdb.LiteralTree(
        scala.meta.internal.semanticdb.LiteralTree._typemapper_const.toCustom(__fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[scala.meta.internal.semanticdb.ConstantMessage]).getOrElse(scala.meta.internal.semanticdb.ConstantMessage.defaultInstance))
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticdbProto.javaDescriptor.getMessageTypes.get(47)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticdbProto.scalaDescriptor.messages(47)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = scala.meta.internal.semanticdb.ConstantMessage
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = scala.meta.internal.semanticdb.LiteralTree(
  )
  implicit class LiteralTreeLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.LiteralTree]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.LiteralTree](_l) {
    def const: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.Constant] = field(_.const)((c_, f_) => c_.copy(const = f_))
  }
  final val CONST_FIELD_NUMBER = 1
  @transient
  private val _typemapper_const: _root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.ConstantMessage, scala.meta.internal.semanticdb.Constant] = implicitly[_root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.ConstantMessage, scala.meta.internal.semanticdb.Constant]]
}

@SerialVersionUID(0L)
final case class MacroExpansionTree(
    tpe: scala.meta.internal.semanticdb.Type = scala.meta.internal.semanticdb.MacroExpansionTree._typemapper_tpe.toCustom(scala.meta.internal.semanticdb.TypeMessage.defaultInstance)
    ) extends scala.meta.internal.semanticdb.Tree with scalapb.GeneratedMessage with scalapb.Message[MacroExpansionTree] with scalapb.lenses.Updatable[MacroExpansionTree] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = scala.meta.internal.semanticdb.MacroExpansionTree._typemapper_tpe.toBase(tpe)
        if (__value != scala.meta.internal.semanticdb.TypeMessage.defaultInstance) {
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        }
      };
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = scala.meta.internal.semanticdb.MacroExpansionTree._typemapper_tpe.toBase(tpe)
        if (__v != scala.meta.internal.semanticdb.TypeMessage.defaultInstance) {
          _output__.writeTag(2, 2)
          _output__.writeUInt32NoTag(__v.serializedSize)
          __v.writeTo(_output__)
        }
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.MacroExpansionTree = {
      var __tpe = this.tpe
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 18 =>
            __tpe = scala.meta.internal.semanticdb.MacroExpansionTree._typemapper_tpe.toCustom(_root_.scalapb.LiteParser.readMessage(_input__, scala.meta.internal.semanticdb.MacroExpansionTree._typemapper_tpe.toBase(__tpe)))
          case tag => _input__.skipField(tag)
        }
      }
      scala.meta.internal.semanticdb.MacroExpansionTree(
          tpe = __tpe
      )
    }
    def withTpe(__v: scala.meta.internal.semanticdb.Type): MacroExpansionTree = copy(tpe = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 2 => {
          val __t = scala.meta.internal.semanticdb.MacroExpansionTree._typemapper_tpe.toBase(tpe)
          if (__t != scala.meta.internal.semanticdb.TypeMessage.defaultInstance) __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 2 => scala.meta.internal.semanticdb.MacroExpansionTree._typemapper_tpe.toBase(tpe).toPMessage
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = scala.meta.internal.semanticdb.MacroExpansionTree
}

object MacroExpansionTree extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.MacroExpansionTree] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.MacroExpansionTree] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): scala.meta.internal.semanticdb.MacroExpansionTree = {
    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    scala.meta.internal.semanticdb.MacroExpansionTree(
      scala.meta.internal.semanticdb.MacroExpansionTree._typemapper_tpe.toCustom(__fieldsMap.getOrElse(__fields.get(0), scala.meta.internal.semanticdb.TypeMessage.defaultInstance).asInstanceOf[scala.meta.internal.semanticdb.TypeMessage])
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb.MacroExpansionTree] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      scala.meta.internal.semanticdb.MacroExpansionTree(
        scala.meta.internal.semanticdb.MacroExpansionTree._typemapper_tpe.toCustom(__fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[scala.meta.internal.semanticdb.TypeMessage]).getOrElse(scala.meta.internal.semanticdb.TypeMessage.defaultInstance))
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticdbProto.javaDescriptor.getMessageTypes.get(48)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticdbProto.scalaDescriptor.messages(48)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 2 => __out = scala.meta.internal.semanticdb.TypeMessage
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = scala.meta.internal.semanticdb.MacroExpansionTree(
  )
  implicit class MacroExpansionTreeLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.MacroExpansionTree]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.MacroExpansionTree](_l) {
    def tpe: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.Type] = field(_.tpe)((c_, f_) => c_.copy(tpe = f_))
  }
  final val TPE_FIELD_NUMBER = 2
  @transient
  private val _typemapper_tpe: _root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TypeMessage, scala.meta.internal.semanticdb.Type] = implicitly[_root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TypeMessage, scala.meta.internal.semanticdb.Type]]
}

@SerialVersionUID(0L)
final case class OriginalTree(
    range: _root_.scala.Option[scala.meta.internal.semanticdb.Range] = None
    ) extends scala.meta.internal.semanticdb.Tree with scalapb.GeneratedMessage with scalapb.Message[OriginalTree] with scalapb.lenses.Updatable[OriginalTree] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (range.isDefined) {
        val __value = range.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      range.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.OriginalTree = {
      var __range = this.range
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __range = Option(_root_.scalapb.LiteParser.readMessage(_input__, __range.getOrElse(scala.meta.internal.semanticdb.Range.defaultInstance)))
          case tag => _input__.skipField(tag)
        }
      }
      scala.meta.internal.semanticdb.OriginalTree(
          range = __range
      )
    }
    def getRange: scala.meta.internal.semanticdb.Range = range.getOrElse(scala.meta.internal.semanticdb.Range.defaultInstance)
    def clearRange: OriginalTree = copy(range = None)
    def withRange(__v: scala.meta.internal.semanticdb.Range): OriginalTree = copy(range = Option(__v))
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => range.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => range.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = scala.meta.internal.semanticdb.OriginalTree
}

object OriginalTree extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.OriginalTree] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.OriginalTree] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): scala.meta.internal.semanticdb.OriginalTree = {
    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    scala.meta.internal.semanticdb.OriginalTree(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[_root_.scala.Option[scala.meta.internal.semanticdb.Range]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb.OriginalTree] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      scala.meta.internal.semanticdb.OriginalTree(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb.Range]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticdbProto.javaDescriptor.getMessageTypes.get(49)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticdbProto.scalaDescriptor.messages(49)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = scala.meta.internal.semanticdb.Range
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = scala.meta.internal.semanticdb.OriginalTree(
  )
  implicit class OriginalTreeLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.OriginalTree]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.OriginalTree](_l) {
    def range: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.Range] = field(_.getRange)((c_, f_) => c_.copy(range = Option(f_)))
    def optionalRange: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[scala.meta.internal.semanticdb.Range]] = field(_.range)((c_, f_) => c_.copy(range = f_))
  }
  final val RANGE_FIELD_NUMBER = 1
}

@SerialVersionUID(0L)
final case class SelectTree(
    qual: scala.meta.internal.semanticdb.Tree = scala.meta.internal.semanticdb.SelectTree._typemapper_qual.toCustom(scala.meta.internal.semanticdb.TreeMessage.defaultInstance),
    id: _root_.scala.Option[scala.meta.internal.semanticdb.IdTree] = None
    ) extends scala.meta.internal.semanticdb.Tree with scalapb.GeneratedMessage with scalapb.Message[SelectTree] with scalapb.lenses.Updatable[SelectTree] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = scala.meta.internal.semanticdb.SelectTree._typemapper_qual.toBase(qual)
        if (__value != scala.meta.internal.semanticdb.TreeMessage.defaultInstance) {
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        }
      };
      if (id.isDefined) {
        val __value = id.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = scala.meta.internal.semanticdb.SelectTree._typemapper_qual.toBase(qual)
        if (__v != scala.meta.internal.semanticdb.TreeMessage.defaultInstance) {
          _output__.writeTag(1, 2)
          _output__.writeUInt32NoTag(__v.serializedSize)
          __v.writeTo(_output__)
        }
      };
      id.foreach { __v =>
        val __m = __v
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.SelectTree = {
      var __qual = this.qual
      var __id = this.id
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __qual = scala.meta.internal.semanticdb.SelectTree._typemapper_qual.toCustom(_root_.scalapb.LiteParser.readMessage(_input__, scala.meta.internal.semanticdb.SelectTree._typemapper_qual.toBase(__qual)))
          case 18 =>
            __id = Option(_root_.scalapb.LiteParser.readMessage(_input__, __id.getOrElse(scala.meta.internal.semanticdb.IdTree.defaultInstance)))
          case tag => _input__.skipField(tag)
        }
      }
      scala.meta.internal.semanticdb.SelectTree(
          qual = __qual,
          id = __id
      )
    }
    def withQual(__v: scala.meta.internal.semanticdb.Tree): SelectTree = copy(qual = __v)
    def getId: scala.meta.internal.semanticdb.IdTree = id.getOrElse(scala.meta.internal.semanticdb.IdTree.defaultInstance)
    def clearId: SelectTree = copy(id = None)
    def withId(__v: scala.meta.internal.semanticdb.IdTree): SelectTree = copy(id = Option(__v))
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = scala.meta.internal.semanticdb.SelectTree._typemapper_qual.toBase(qual)
          if (__t != scala.meta.internal.semanticdb.TreeMessage.defaultInstance) __t else null
        }
        case 2 => id.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => scala.meta.internal.semanticdb.SelectTree._typemapper_qual.toBase(qual).toPMessage
        case 2 => id.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = scala.meta.internal.semanticdb.SelectTree
}

object SelectTree extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.SelectTree] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.SelectTree] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): scala.meta.internal.semanticdb.SelectTree = {
    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    scala.meta.internal.semanticdb.SelectTree(
      scala.meta.internal.semanticdb.SelectTree._typemapper_qual.toCustom(__fieldsMap.getOrElse(__fields.get(0), scala.meta.internal.semanticdb.TreeMessage.defaultInstance).asInstanceOf[scala.meta.internal.semanticdb.TreeMessage]),
      __fieldsMap.get(__fields.get(1)).asInstanceOf[_root_.scala.Option[scala.meta.internal.semanticdb.IdTree]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb.SelectTree] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      scala.meta.internal.semanticdb.SelectTree(
        scala.meta.internal.semanticdb.SelectTree._typemapper_qual.toCustom(__fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[scala.meta.internal.semanticdb.TreeMessage]).getOrElse(scala.meta.internal.semanticdb.TreeMessage.defaultInstance)),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb.IdTree]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticdbProto.javaDescriptor.getMessageTypes.get(50)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticdbProto.scalaDescriptor.messages(50)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = scala.meta.internal.semanticdb.TreeMessage
      case 2 => __out = scala.meta.internal.semanticdb.IdTree
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = scala.meta.internal.semanticdb.SelectTree(
  )
  implicit class SelectTreeLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.SelectTree]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.SelectTree](_l) {
    def qual: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.Tree] = field(_.qual)((c_, f_) => c_.copy(qual = f_))
    def id: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.IdTree] = field(_.getId)((c_, f_) => c_.copy(id = Option(f_)))
    def optionalId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[scala.meta.internal.semanticdb.IdTree]] = field(_.id)((c_, f_) => c_.copy(id = f_))
  }
  final val QUAL_FIELD_NUMBER = 1
  final val ID_FIELD_NUMBER = 2
  @transient
  private val _typemapper_qual: _root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TreeMessage, scala.meta.internal.semanticdb.Tree] = implicitly[_root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TreeMessage, scala.meta.internal.semanticdb.Tree]]
}

@SerialVersionUID(0L)
final case class TypeApplyTree(
    fn: scala.meta.internal.semanticdb.Tree = scala.meta.internal.semanticdb.TypeApplyTree._typemapper_fn.toCustom(scala.meta.internal.semanticdb.TreeMessage.defaultInstance),
    targs: _root_.scala.collection.Seq[scala.meta.internal.semanticdb.Type] = _root_.scala.collection.Seq.empty
    ) extends scala.meta.internal.semanticdb.Tree with scalapb.GeneratedMessage with scalapb.Message[TypeApplyTree] with scalapb.lenses.Updatable[TypeApplyTree] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = scala.meta.internal.semanticdb.TypeApplyTree._typemapper_fn.toBase(fn)
        if (__value != scala.meta.internal.semanticdb.TreeMessage.defaultInstance) {
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        }
      };
      targs.foreach { __item =>
        val __value = scala.meta.internal.semanticdb.TypeApplyTree._typemapper_targs.toBase(__item)
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = scala.meta.internal.semanticdb.TypeApplyTree._typemapper_fn.toBase(fn)
        if (__v != scala.meta.internal.semanticdb.TreeMessage.defaultInstance) {
          _output__.writeTag(1, 2)
          _output__.writeUInt32NoTag(__v.serializedSize)
          __v.writeTo(_output__)
        }
      };
      targs.foreach { __v =>
        val __m = scala.meta.internal.semanticdb.TypeApplyTree._typemapper_targs.toBase(__v)
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.TypeApplyTree = {
      var __fn = this.fn
      val __targs = (_root_.scala.collection.immutable.Vector.newBuilder[scala.meta.internal.semanticdb.Type] ++= this.targs)
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __fn = scala.meta.internal.semanticdb.TypeApplyTree._typemapper_fn.toCustom(_root_.scalapb.LiteParser.readMessage(_input__, scala.meta.internal.semanticdb.TypeApplyTree._typemapper_fn.toBase(__fn)))
          case 18 =>
            __targs += scala.meta.internal.semanticdb.TypeApplyTree._typemapper_targs.toCustom(_root_.scalapb.LiteParser.readMessage(_input__, scala.meta.internal.semanticdb.TypeMessage.defaultInstance))
          case tag => _input__.skipField(tag)
        }
      }
      scala.meta.internal.semanticdb.TypeApplyTree(
          fn = __fn,
          targs = __targs.result()
      )
    }
    def withFn(__v: scala.meta.internal.semanticdb.Tree): TypeApplyTree = copy(fn = __v)
    def clearTargs = copy(targs = _root_.scala.collection.Seq.empty)
    def addTargs(__vs: scala.meta.internal.semanticdb.Type*): TypeApplyTree = addAllTargs(__vs)
    def addAllTargs(__vs: TraversableOnce[scala.meta.internal.semanticdb.Type]): TypeApplyTree = copy(targs = targs ++ __vs)
    def withTargs(__v: _root_.scala.collection.Seq[scala.meta.internal.semanticdb.Type]): TypeApplyTree = copy(targs = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = scala.meta.internal.semanticdb.TypeApplyTree._typemapper_fn.toBase(fn)
          if (__t != scala.meta.internal.semanticdb.TreeMessage.defaultInstance) __t else null
        }
        case 2 => targs.map(scala.meta.internal.semanticdb.TypeApplyTree._typemapper_targs.toBase)(_root_.scala.collection.breakOut)
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => scala.meta.internal.semanticdb.TypeApplyTree._typemapper_fn.toBase(fn).toPMessage
        case 2 => _root_.scalapb.descriptors.PRepeated(targs.map(scala.meta.internal.semanticdb.TypeApplyTree._typemapper_targs.toBase(_).toPMessage)(_root_.scala.collection.breakOut))
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = scala.meta.internal.semanticdb.TypeApplyTree
}

object TypeApplyTree extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.TypeApplyTree] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.TypeApplyTree] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): scala.meta.internal.semanticdb.TypeApplyTree = {
    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    scala.meta.internal.semanticdb.TypeApplyTree(
      scala.meta.internal.semanticdb.TypeApplyTree._typemapper_fn.toCustom(__fieldsMap.getOrElse(__fields.get(0), scala.meta.internal.semanticdb.TreeMessage.defaultInstance).asInstanceOf[scala.meta.internal.semanticdb.TreeMessage]),
      __fieldsMap.getOrElse(__fields.get(1), Nil).asInstanceOf[_root_.scala.collection.Seq[scala.meta.internal.semanticdb.TypeMessage]].map(scala.meta.internal.semanticdb.TypeApplyTree._typemapper_targs.toCustom)(_root_.scala.collection.breakOut)
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb.TypeApplyTree] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      scala.meta.internal.semanticdb.TypeApplyTree(
        scala.meta.internal.semanticdb.TypeApplyTree._typemapper_fn.toCustom(__fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[scala.meta.internal.semanticdb.TreeMessage]).getOrElse(scala.meta.internal.semanticdb.TreeMessage.defaultInstance)),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.collection.Seq[scala.meta.internal.semanticdb.TypeMessage]]).getOrElse(_root_.scala.collection.Seq.empty).map(scala.meta.internal.semanticdb.TypeApplyTree._typemapper_targs.toCustom)(_root_.scala.collection.breakOut)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticdbProto.javaDescriptor.getMessageTypes.get(51)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticdbProto.scalaDescriptor.messages(51)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = scala.meta.internal.semanticdb.TreeMessage
      case 2 => __out = scala.meta.internal.semanticdb.TypeMessage
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = scala.meta.internal.semanticdb.TypeApplyTree(
  )
  implicit class TypeApplyTreeLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.TypeApplyTree]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.TypeApplyTree](_l) {
    def fn: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.Tree] = field(_.fn)((c_, f_) => c_.copy(fn = f_))
    def targs: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.Seq[scala.meta.internal.semanticdb.Type]] = field(_.targs)((c_, f_) => c_.copy(targs = f_))
  }
  final val FN_FIELD_NUMBER = 1
  final val TARGS_FIELD_NUMBER = 2
  @transient
  private val _typemapper_fn: _root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TreeMessage, scala.meta.internal.semanticdb.Tree] = implicitly[_root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TreeMessage, scala.meta.internal.semanticdb.Tree]]
  @transient
  private val _typemapper_targs: _root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TypeMessage, scala.meta.internal.semanticdb.Type] = implicitly[_root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TypeMessage, scala.meta.internal.semanticdb.Type]]
}
