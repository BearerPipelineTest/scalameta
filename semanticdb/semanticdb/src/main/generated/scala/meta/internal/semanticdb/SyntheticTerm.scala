// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package scala.meta.internal.semanticdb

sealed trait SyntheticTerm {
  final def isEmpty = this.isInstanceOf[scala.meta.internal.semanticdb.SyntheticTerm.Empty.type]
  final def isDefined = !isEmpty
  final def asMessage: scala.meta.internal.semanticdb.SyntheticTermMessage = scala.meta.internal.semanticdb.SyntheticTerm.SyntheticTermTypeMapper.toBase(this)
}

object SyntheticTerm {
  case object Empty extends scala.meta.internal.semanticdb.SyntheticTerm
  
  def defaultInstance: scala.meta.internal.semanticdb.SyntheticTerm = Empty
  
  implicit val SyntheticTermTypeMapper: _root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.SyntheticTermMessage, scala.meta.internal.semanticdb.SyntheticTerm] = new _root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.SyntheticTermMessage, scala.meta.internal.semanticdb.SyntheticTerm] {
    override def toCustom(__base: scala.meta.internal.semanticdb.SyntheticTermMessage): scala.meta.internal.semanticdb.SyntheticTerm = __base.sealedValue match {
      case __v: scala.meta.internal.semanticdb.SyntheticTermMessage.SealedValue.MethodCall => __v.value
      case scala.meta.internal.semanticdb.SyntheticTermMessage.SealedValue.Empty => Empty
    }
    override def toBase(__custom: scala.meta.internal.semanticdb.SyntheticTerm): scala.meta.internal.semanticdb.SyntheticTermMessage = scala.meta.internal.semanticdb.SyntheticTermMessage(__custom match {
      case __v: scala.meta.internal.semanticdb.SyntheticApply => scala.meta.internal.semanticdb.SyntheticTermMessage.SealedValue.MethodCall(__v)
      case Empty => scala.meta.internal.semanticdb.SyntheticTermMessage.SealedValue.Empty
    })
  }
}
@SerialVersionUID(0L)
final case class SyntheticTermMessage(
    sealedValue: scala.meta.internal.semanticdb.SyntheticTermMessage.SealedValue = scala.meta.internal.semanticdb.SyntheticTermMessage.SealedValue.Empty
    ) extends scalapb.GeneratedMessage with scalapb.Message[SyntheticTermMessage] with scalapb.lenses.Updatable[SyntheticTermMessage] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (sealedValue.methodCall.isDefined) {
        val __value = sealedValue.methodCall.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      sealedValue.methodCall.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.SyntheticTermMessage = {
      var __sealedValue = this.sealedValue
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __sealedValue = scala.meta.internal.semanticdb.SyntheticTermMessage.SealedValue.MethodCall(_root_.scalapb.LiteParser.readMessage(_input__, sealedValue.methodCall.getOrElse(scala.meta.internal.semanticdb.SyntheticApply.defaultInstance)))
          case tag => _input__.skipField(tag)
        }
      }
      scala.meta.internal.semanticdb.SyntheticTermMessage(
          sealedValue = __sealedValue
      )
    }
    def getMethodCall: scala.meta.internal.semanticdb.SyntheticApply = sealedValue.methodCall.getOrElse(scala.meta.internal.semanticdb.SyntheticApply.defaultInstance)
    def withMethodCall(__v: scala.meta.internal.semanticdb.SyntheticApply): SyntheticTermMessage = copy(sealedValue = scala.meta.internal.semanticdb.SyntheticTermMessage.SealedValue.MethodCall(__v))
    def clearSealedValue: SyntheticTermMessage = copy(sealedValue = scala.meta.internal.semanticdb.SyntheticTermMessage.SealedValue.Empty)
    def withSealedValue(__v: scala.meta.internal.semanticdb.SyntheticTermMessage.SealedValue): SyntheticTermMessage = copy(sealedValue = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => sealedValue.methodCall.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => sealedValue.methodCall.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = scala.meta.internal.semanticdb.SyntheticTermMessage
    def toSyntheticTerm: scala.meta.internal.semanticdb.SyntheticTerm = scala.meta.internal.semanticdb.SyntheticTerm.SyntheticTermTypeMapper.toCustom(this)
}

object SyntheticTermMessage extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.SyntheticTermMessage] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.SyntheticTermMessage] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): scala.meta.internal.semanticdb.SyntheticTermMessage = {
    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    scala.meta.internal.semanticdb.SyntheticTermMessage(
      sealedValue = __fieldsMap.get(__fields.get(0)).asInstanceOf[_root_.scala.Option[scala.meta.internal.semanticdb.SyntheticApply]].map(scala.meta.internal.semanticdb.SyntheticTermMessage.SealedValue.MethodCall)
    .getOrElse(scala.meta.internal.semanticdb.SyntheticTermMessage.SealedValue.Empty)
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb.SyntheticTermMessage] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      scala.meta.internal.semanticdb.SyntheticTermMessage(
        sealedValue = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb.SyntheticApply]]).map(scala.meta.internal.semanticdb.SyntheticTermMessage.SealedValue.MethodCall)
    .getOrElse(scala.meta.internal.semanticdb.SyntheticTermMessage.SealedValue.Empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticdbProto.javaDescriptor.getMessageTypes.get(46)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticdbProto.scalaDescriptor.messages(46)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = scala.meta.internal.semanticdb.SyntheticApply
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = scala.meta.internal.semanticdb.SyntheticTermMessage(
  )
  sealed trait SealedValue extends _root_.scalapb.GeneratedOneof {
    def isEmpty: _root_.scala.Boolean = false
    def isDefined: _root_.scala.Boolean = true
    def isMethodCall: _root_.scala.Boolean = false
    def methodCall: _root_.scala.Option[scala.meta.internal.semanticdb.SyntheticApply] = None
  }
  object SealedValue extends {
    @SerialVersionUID(0L)
    case object Empty extends scala.meta.internal.semanticdb.SyntheticTermMessage.SealedValue {
      type ValueType = _root_.scala.Nothing
      override def isEmpty: _root_.scala.Boolean = true
      override def isDefined: _root_.scala.Boolean = false
      override def number: _root_.scala.Int = 0
      override def value: _root_.scala.Nothing = throw new java.util.NoSuchElementException("Empty.value")
    }
  
    @SerialVersionUID(0L)
    final case class MethodCall(value: scala.meta.internal.semanticdb.SyntheticApply) extends scala.meta.internal.semanticdb.SyntheticTermMessage.SealedValue {
      type ValueType = scala.meta.internal.semanticdb.SyntheticApply
      override def isMethodCall: _root_.scala.Boolean = true
      override def methodCall: _root_.scala.Option[scala.meta.internal.semanticdb.SyntheticApply] = Some(value)
      override def number: _root_.scala.Int = 1
    }
  }
  implicit class SyntheticTermMessageLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.SyntheticTermMessage]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.SyntheticTermMessage](_l) {
    def methodCall: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.SyntheticApply] = field(_.getMethodCall)((c_, f_) => c_.copy(sealedValue = scala.meta.internal.semanticdb.SyntheticTermMessage.SealedValue.MethodCall(f_)))
    def sealedValue: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.SyntheticTermMessage.SealedValue] = field(_.sealedValue)((c_, f_) => c_.copy(sealedValue = f_))
  }
  final val METHODCALL_FIELD_NUMBER = 1
}

@SerialVersionUID(0L)
final case class SyntheticApply(
    sym: _root_.scala.Predef.String = "",
    typeArgs: _root_.scala.collection.Seq[scala.meta.internal.semanticdb.Type] = _root_.scala.collection.Seq.empty,
    args: _root_.scala.collection.Seq[scala.meta.internal.semanticdb.SyntheticTerm] = _root_.scala.collection.Seq.empty
    ) extends scala.meta.internal.semanticdb.SyntheticTerm with scalapb.GeneratedMessage with scalapb.Message[SyntheticApply] with scalapb.lenses.Updatable[SyntheticApply] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = sym
        if (__value != "") {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
        }
      };
      typeArgs.foreach { __item =>
        val __value = scala.meta.internal.semanticdb.SyntheticApply._typemapper_typeArgs.toBase(__item)
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      args.foreach { __item =>
        val __value = scala.meta.internal.semanticdb.SyntheticApply._typemapper_args.toBase(__item)
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = sym
        if (__v != "") {
          _output__.writeString(1, __v)
        }
      };
      typeArgs.foreach { __v =>
        val __m = scala.meta.internal.semanticdb.SyntheticApply._typemapper_typeArgs.toBase(__v)
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      args.foreach { __v =>
        val __m = scala.meta.internal.semanticdb.SyntheticApply._typemapper_args.toBase(__v)
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.SyntheticApply = {
      var __sym = this.sym
      val __typeArgs = (_root_.scala.collection.immutable.Vector.newBuilder[scala.meta.internal.semanticdb.Type] ++= this.typeArgs)
      val __args = (_root_.scala.collection.immutable.Vector.newBuilder[scala.meta.internal.semanticdb.SyntheticTerm] ++= this.args)
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __sym = _input__.readString()
          case 18 =>
            __typeArgs += scala.meta.internal.semanticdb.SyntheticApply._typemapper_typeArgs.toCustom(_root_.scalapb.LiteParser.readMessage(_input__, scala.meta.internal.semanticdb.TypeMessage.defaultInstance))
          case 26 =>
            __args += scala.meta.internal.semanticdb.SyntheticApply._typemapper_args.toCustom(_root_.scalapb.LiteParser.readMessage(_input__, scala.meta.internal.semanticdb.SyntheticTermMessage.defaultInstance))
          case tag => _input__.skipField(tag)
        }
      }
      scala.meta.internal.semanticdb.SyntheticApply(
          sym = __sym,
          typeArgs = __typeArgs.result(),
          args = __args.result()
      )
    }
    def withSym(__v: _root_.scala.Predef.String): SyntheticApply = copy(sym = __v)
    def clearTypeArgs = copy(typeArgs = _root_.scala.collection.Seq.empty)
    def addTypeArgs(__vs: scala.meta.internal.semanticdb.Type*): SyntheticApply = addAllTypeArgs(__vs)
    def addAllTypeArgs(__vs: TraversableOnce[scala.meta.internal.semanticdb.Type]): SyntheticApply = copy(typeArgs = typeArgs ++ __vs)
    def withTypeArgs(__v: _root_.scala.collection.Seq[scala.meta.internal.semanticdb.Type]): SyntheticApply = copy(typeArgs = __v)
    def clearArgs = copy(args = _root_.scala.collection.Seq.empty)
    def addArgs(__vs: scala.meta.internal.semanticdb.SyntheticTerm*): SyntheticApply = addAllArgs(__vs)
    def addAllArgs(__vs: TraversableOnce[scala.meta.internal.semanticdb.SyntheticTerm]): SyntheticApply = copy(args = args ++ __vs)
    def withArgs(__v: _root_.scala.collection.Seq[scala.meta.internal.semanticdb.SyntheticTerm]): SyntheticApply = copy(args = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = sym
          if (__t != "") __t else null
        }
        case 2 => typeArgs.map(scala.meta.internal.semanticdb.SyntheticApply._typemapper_typeArgs.toBase)(_root_.scala.collection.breakOut)
        case 3 => args.map(scala.meta.internal.semanticdb.SyntheticApply._typemapper_args.toBase)(_root_.scala.collection.breakOut)
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(sym)
        case 2 => _root_.scalapb.descriptors.PRepeated(typeArgs.map(scala.meta.internal.semanticdb.SyntheticApply._typemapper_typeArgs.toBase(_).toPMessage)(_root_.scala.collection.breakOut))
        case 3 => _root_.scalapb.descriptors.PRepeated(args.map(scala.meta.internal.semanticdb.SyntheticApply._typemapper_args.toBase(_).toPMessage)(_root_.scala.collection.breakOut))
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = scala.meta.internal.semanticdb.SyntheticApply
}

object SyntheticApply extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.SyntheticApply] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.SyntheticApply] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): scala.meta.internal.semanticdb.SyntheticApply = {
    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    scala.meta.internal.semanticdb.SyntheticApply(
      __fieldsMap.getOrElse(__fields.get(0), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.getOrElse(__fields.get(1), Nil).asInstanceOf[_root_.scala.collection.Seq[scala.meta.internal.semanticdb.TypeMessage]].map(scala.meta.internal.semanticdb.SyntheticApply._typemapper_typeArgs.toCustom)(_root_.scala.collection.breakOut),
      __fieldsMap.getOrElse(__fields.get(2), Nil).asInstanceOf[_root_.scala.collection.Seq[scala.meta.internal.semanticdb.SyntheticTermMessage]].map(scala.meta.internal.semanticdb.SyntheticApply._typemapper_args.toCustom)(_root_.scala.collection.breakOut)
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb.SyntheticApply] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      scala.meta.internal.semanticdb.SyntheticApply(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.collection.Seq[scala.meta.internal.semanticdb.TypeMessage]]).getOrElse(_root_.scala.collection.Seq.empty).map(scala.meta.internal.semanticdb.SyntheticApply._typemapper_typeArgs.toCustom)(_root_.scala.collection.breakOut),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.collection.Seq[scala.meta.internal.semanticdb.SyntheticTermMessage]]).getOrElse(_root_.scala.collection.Seq.empty).map(scala.meta.internal.semanticdb.SyntheticApply._typemapper_args.toCustom)(_root_.scala.collection.breakOut)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticdbProto.javaDescriptor.getMessageTypes.get(47)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticdbProto.scalaDescriptor.messages(47)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 2 => __out = scala.meta.internal.semanticdb.TypeMessage
      case 3 => __out = scala.meta.internal.semanticdb.SyntheticTermMessage
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = scala.meta.internal.semanticdb.SyntheticApply(
  )
  implicit class SyntheticApplyLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.SyntheticApply]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.SyntheticApply](_l) {
    def sym: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.sym)((c_, f_) => c_.copy(sym = f_))
    def typeArgs: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.Seq[scala.meta.internal.semanticdb.Type]] = field(_.typeArgs)((c_, f_) => c_.copy(typeArgs = f_))
    def args: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.Seq[scala.meta.internal.semanticdb.SyntheticTerm]] = field(_.args)((c_, f_) => c_.copy(args = f_))
  }
  final val SYM_FIELD_NUMBER = 1
  final val TYPEARGS_FIELD_NUMBER = 2
  final val ARGS_FIELD_NUMBER = 3
  @transient
  private val _typemapper_typeArgs: _root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TypeMessage, scala.meta.internal.semanticdb.Type] = implicitly[_root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TypeMessage, scala.meta.internal.semanticdb.Type]]
  @transient
  private val _typemapper_args: _root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.SyntheticTermMessage, scala.meta.internal.semanticdb.SyntheticTerm] = implicitly[_root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.SyntheticTermMessage, scala.meta.internal.semanticdb.SyntheticTerm]]
}
