// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package scala.meta.internal.semanticidx

@SerialVersionUID(0L)
final case class Index(
    entries: scala.collection.immutable.Map[_root_.scala.Predef.String, scala.meta.internal.semanticidx.Entry] = scala.collection.immutable.Map.empty
    ) extends scalapb.GeneratedMessage with scalapb.Message[Index] with scalapb.lenses.Updatable[Index] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      entries.foreach { __item =>
        val __value = scala.meta.internal.semanticidx.Index._typemapper_entries.toBase(__item)
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      entries.foreach { __v =>
        val __m = scala.meta.internal.semanticidx.Index._typemapper_entries.toBase(__v)
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticidx.Index = {
      val __entries = (scala.collection.immutable.Map.newBuilder[_root_.scala.Predef.String, scala.meta.internal.semanticidx.Entry] ++= this.entries)
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __entries += scala.meta.internal.semanticidx.Index._typemapper_entries.toCustom(_root_.scalapb.LiteParser.readMessage(_input__, scala.meta.internal.semanticidx.Index.EntriesEntry.defaultInstance))
          case tag => _input__.skipField(tag)
        }
      }
      scala.meta.internal.semanticidx.Index(
          entries = __entries.result()
      )
    }
    def clearEntries = copy(entries = scala.collection.immutable.Map.empty)
    def addEntries(__vs: (_root_.scala.Predef.String, scala.meta.internal.semanticidx.Entry)*): Index = addAllEntries(__vs)
    def addAllEntries(__vs: TraversableOnce[(_root_.scala.Predef.String, scala.meta.internal.semanticidx.Entry)]): Index = copy(entries = entries ++ __vs)
    def withEntries(__v: scala.collection.immutable.Map[_root_.scala.Predef.String, scala.meta.internal.semanticidx.Entry]): Index = copy(entries = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => entries.map(scala.meta.internal.semanticidx.Index._typemapper_entries.toBase)(_root_.scala.collection.breakOut)
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PRepeated(entries.map(scala.meta.internal.semanticidx.Index._typemapper_entries.toBase(_).toPMessage)(_root_.scala.collection.breakOut))
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = scala.meta.internal.semanticidx.Index
}

object Index extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticidx.Index] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticidx.Index] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): scala.meta.internal.semanticidx.Index = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    scala.meta.internal.semanticidx.Index(
      __fieldsMap.getOrElse(__fields.get(0), Nil).asInstanceOf[_root_.scala.collection.Seq[scala.meta.internal.semanticidx.Index.EntriesEntry]].map(scala.meta.internal.semanticidx.Index._typemapper_entries.toCustom)(_root_.scala.collection.breakOut)
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticidx.Index] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      scala.meta.internal.semanticidx.Index(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.collection.Seq[scala.meta.internal.semanticidx.Index.EntriesEntry]]).getOrElse(_root_.scala.collection.Seq.empty).map(scala.meta.internal.semanticidx.Index._typemapper_entries.toCustom)(_root_.scala.collection.breakOut)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticidxProto.javaDescriptor.getMessageTypes.get(1)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticidxProto.scalaDescriptor.messages(1)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = scala.meta.internal.semanticidx.Index.EntriesEntry
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq[_root_.scalapb.GeneratedMessageCompanion[_]](
    _root_.scala.meta.internal.semanticidx.Index.EntriesEntry
  )
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = scala.meta.internal.semanticidx.Index(
  )
  @SerialVersionUID(0L)
  final case class EntriesEntry(
      key: _root_.scala.Predef.String = "",
      value: scala.meta.internal.semanticidx.Entry = scala.meta.internal.semanticidx.Index.EntriesEntry._typemapper_value.toCustom(scala.meta.internal.semanticidx.EntryMessage.defaultInstance)
      ) extends scalapb.GeneratedMessage with scalapb.Message[EntriesEntry] with scalapb.lenses.Updatable[EntriesEntry] {
      @transient
      private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
      private[this] def __computeSerializedValue(): _root_.scala.Int = {
        var __size = 0
        
        {
          val __value = key
          if (__value != "") {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
          }
        };
        
        {
          val __value = scala.meta.internal.semanticidx.Index.EntriesEntry._typemapper_value.toBase(value)
          if (__value != scala.meta.internal.semanticidx.EntryMessage.defaultInstance) {
            __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
          }
        };
        __size
      }
      final override def serializedSize: _root_.scala.Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        {
          val __v = key
          if (__v != "") {
            _output__.writeString(1, __v)
          }
        };
        {
          val __v = scala.meta.internal.semanticidx.Index.EntriesEntry._typemapper_value.toBase(value)
          if (__v != scala.meta.internal.semanticidx.EntryMessage.defaultInstance) {
            _output__.writeTag(2, 2)
            _output__.writeUInt32NoTag(__v.serializedSize)
            __v.writeTo(_output__)
          }
        };
      }
      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticidx.Index.EntriesEntry = {
        var __key = this.key
        var __value = this.value
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 10 =>
              __key = _input__.readString()
            case 18 =>
              __value = scala.meta.internal.semanticidx.Index.EntriesEntry._typemapper_value.toCustom(_root_.scalapb.LiteParser.readMessage(_input__, scala.meta.internal.semanticidx.Index.EntriesEntry._typemapper_value.toBase(__value)))
            case tag => _input__.skipField(tag)
          }
        }
        scala.meta.internal.semanticidx.Index.EntriesEntry(
            key = __key,
            value = __value
        )
      }
      def withKey(__v: _root_.scala.Predef.String): EntriesEntry = copy(key = __v)
      def withValue(__v: scala.meta.internal.semanticidx.Entry): EntriesEntry = copy(value = __v)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => {
            val __t = key
            if (__t != "") __t else null
          }
          case 2 => {
            val __t = scala.meta.internal.semanticidx.Index.EntriesEntry._typemapper_value.toBase(value)
            if (__t != scala.meta.internal.semanticidx.EntryMessage.defaultInstance) __t else null
          }
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PString(key)
          case 2 => scala.meta.internal.semanticidx.Index.EntriesEntry._typemapper_value.toBase(value).toPMessage
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion = scala.meta.internal.semanticidx.Index.EntriesEntry
  }
  
  object EntriesEntry extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticidx.Index.EntriesEntry] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticidx.Index.EntriesEntry] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): scala.meta.internal.semanticidx.Index.EntriesEntry = {
      require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      val __fields = javaDescriptor.getFields
      scala.meta.internal.semanticidx.Index.EntriesEntry(
        __fieldsMap.getOrElse(__fields.get(0), "").asInstanceOf[_root_.scala.Predef.String],
        scala.meta.internal.semanticidx.Index.EntriesEntry._typemapper_value.toCustom(__fieldsMap.getOrElse(__fields.get(1), scala.meta.internal.semanticidx.EntryMessage.defaultInstance).asInstanceOf[scala.meta.internal.semanticidx.EntryMessage])
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticidx.Index.EntriesEntry] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        scala.meta.internal.semanticidx.Index.EntriesEntry(
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
          scala.meta.internal.semanticidx.Index.EntriesEntry._typemapper_value.toCustom(__fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[scala.meta.internal.semanticidx.EntryMessage]).getOrElse(scala.meta.internal.semanticidx.EntryMessage.defaultInstance))
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = scala.meta.internal.semanticidx.Index.javaDescriptor.getNestedTypes.get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = scala.meta.internal.semanticidx.Index.scalaDescriptor.nestedMessages(0)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      (__number: @_root_.scala.unchecked) match {
        case 2 => __out = scala.meta.internal.semanticidx.EntryMessage
      }
      __out
    }
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = scala.meta.internal.semanticidx.Index.EntriesEntry(
    )
    implicit class EntriesEntryLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticidx.Index.EntriesEntry]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticidx.Index.EntriesEntry](_l) {
      def key: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.key)((c_, f_) => c_.copy(key = f_))
      def value: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticidx.Entry] = field(_.value)((c_, f_) => c_.copy(value = f_))
    }
    final val KEY_FIELD_NUMBER = 1
    final val VALUE_FIELD_NUMBER = 2
    @transient
    private[Index] val _typemapper_value: _root_.scalapb.TypeMapper[scala.meta.internal.semanticidx.EntryMessage, scala.meta.internal.semanticidx.Entry] = implicitly[_root_.scalapb.TypeMapper[scala.meta.internal.semanticidx.EntryMessage, scala.meta.internal.semanticidx.Entry]]
    implicit val keyValueMapper: _root_.scalapb.TypeMapper[scala.meta.internal.semanticidx.Index.EntriesEntry, (_root_.scala.Predef.String, scala.meta.internal.semanticidx.Entry)] =
      _root_.scalapb.TypeMapper[scala.meta.internal.semanticidx.Index.EntriesEntry, (_root_.scala.Predef.String, scala.meta.internal.semanticidx.Entry)](__m => (__m.key, __m.value))(__p => scala.meta.internal.semanticidx.Index.EntriesEntry(__p._1, __p._2))
  }
  
  implicit class IndexLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticidx.Index]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticidx.Index](_l) {
    def entries: _root_.scalapb.lenses.Lens[UpperPB, scala.collection.immutable.Map[_root_.scala.Predef.String, scala.meta.internal.semanticidx.Entry]] = field(_.entries)((c_, f_) => c_.copy(entries = f_))
  }
  final val ENTRIES_FIELD_NUMBER = 1
  @transient
  private val _typemapper_entries: _root_.scalapb.TypeMapper[scala.meta.internal.semanticidx.Index.EntriesEntry, (_root_.scala.Predef.String, scala.meta.internal.semanticidx.Entry)] = implicitly[_root_.scalapb.TypeMapper[scala.meta.internal.semanticidx.Index.EntriesEntry, (_root_.scala.Predef.String, scala.meta.internal.semanticidx.Entry)]]
}
