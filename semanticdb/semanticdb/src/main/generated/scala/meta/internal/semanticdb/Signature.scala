// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package scala.meta.internal.semanticdb

sealed trait Signature {
  final def isEmpty = this.isInstanceOf[scala.meta.internal.semanticdb.Signature.Empty.type]
  final def isDefined = !isEmpty
  final def asMessage: scala.meta.internal.semanticdb.SignatureMessage = scala.meta.internal.semanticdb.Signature.SignatureTypeMapper.toBase(this)
}

object Signature {
  case object Empty extends scala.meta.internal.semanticdb.Signature
  
  def defaultInstance: scala.meta.internal.semanticdb.Signature = Empty
  
  implicit val SignatureTypeMapper: _root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.SignatureMessage, scala.meta.internal.semanticdb.Signature] = new _root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.SignatureMessage, scala.meta.internal.semanticdb.Signature] {
    override def toCustom(__base: scala.meta.internal.semanticdb.SignatureMessage): scala.meta.internal.semanticdb.Signature = __base.sealedValue match {
      case __v: scala.meta.internal.semanticdb.SignatureMessage.SealedValue.ClassSignature => __v.value
      case __v: scala.meta.internal.semanticdb.SignatureMessage.SealedValue.MethodSignature => __v.value
      case __v: scala.meta.internal.semanticdb.SignatureMessage.SealedValue.TypeSignature => __v.value
      case __v: scala.meta.internal.semanticdb.SignatureMessage.SealedValue.ValueSignature => __v.value
      case scala.meta.internal.semanticdb.SignatureMessage.SealedValue.Empty => Empty
    }
    override def toBase(__custom: scala.meta.internal.semanticdb.Signature): scala.meta.internal.semanticdb.SignatureMessage = scala.meta.internal.semanticdb.SignatureMessage(__custom match {
      case __v: scala.meta.internal.semanticdb.ClassSignature => scala.meta.internal.semanticdb.SignatureMessage.SealedValue.ClassSignature(__v)
      case __v: scala.meta.internal.semanticdb.MethodSignature => scala.meta.internal.semanticdb.SignatureMessage.SealedValue.MethodSignature(__v)
      case __v: scala.meta.internal.semanticdb.TypeSignature => scala.meta.internal.semanticdb.SignatureMessage.SealedValue.TypeSignature(__v)
      case __v: scala.meta.internal.semanticdb.ValueSignature => scala.meta.internal.semanticdb.SignatureMessage.SealedValue.ValueSignature(__v)
      case Empty => scala.meta.internal.semanticdb.SignatureMessage.SealedValue.Empty
    })
  }
}
@SerialVersionUID(0L)
final case class SignatureMessage(
    sealedValue: scala.meta.internal.semanticdb.SignatureMessage.SealedValue = scala.meta.internal.semanticdb.SignatureMessage.SealedValue.Empty
    ) extends scalapb.GeneratedMessage with scalapb.Message[SignatureMessage] with scalapb.lenses.Updatable[SignatureMessage] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (sealedValue.classSignature.isDefined) {
        val __value = sealedValue.classSignature.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (sealedValue.methodSignature.isDefined) {
        val __value = sealedValue.methodSignature.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (sealedValue.typeSignature.isDefined) {
        val __value = sealedValue.typeSignature.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (sealedValue.valueSignature.isDefined) {
        val __value = sealedValue.valueSignature.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      sealedValue.classSignature.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      sealedValue.methodSignature.foreach { __v =>
        val __m = __v
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      sealedValue.typeSignature.foreach { __v =>
        val __m = __v
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      sealedValue.valueSignature.foreach { __v =>
        val __m = __v
        _output__.writeTag(4, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.SignatureMessage = {
      var __sealedValue = this.sealedValue
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __sealedValue = scala.meta.internal.semanticdb.SignatureMessage.SealedValue.ClassSignature(_root_.scalapb.LiteParser.readMessage(_input__, sealedValue.classSignature.getOrElse(scala.meta.internal.semanticdb.ClassSignature.defaultInstance)))
          case 18 =>
            __sealedValue = scala.meta.internal.semanticdb.SignatureMessage.SealedValue.MethodSignature(_root_.scalapb.LiteParser.readMessage(_input__, sealedValue.methodSignature.getOrElse(scala.meta.internal.semanticdb.MethodSignature.defaultInstance)))
          case 26 =>
            __sealedValue = scala.meta.internal.semanticdb.SignatureMessage.SealedValue.TypeSignature(_root_.scalapb.LiteParser.readMessage(_input__, sealedValue.typeSignature.getOrElse(scala.meta.internal.semanticdb.TypeSignature.defaultInstance)))
          case 34 =>
            __sealedValue = scala.meta.internal.semanticdb.SignatureMessage.SealedValue.ValueSignature(_root_.scalapb.LiteParser.readMessage(_input__, sealedValue.valueSignature.getOrElse(scala.meta.internal.semanticdb.ValueSignature.defaultInstance)))
          case tag => _input__.skipField(tag)
        }
      }
      scala.meta.internal.semanticdb.SignatureMessage(
          sealedValue = __sealedValue
      )
    }
    def getClassSignature: scala.meta.internal.semanticdb.ClassSignature = sealedValue.classSignature.getOrElse(scala.meta.internal.semanticdb.ClassSignature.defaultInstance)
    def withClassSignature(__v: scala.meta.internal.semanticdb.ClassSignature): SignatureMessage = copy(sealedValue = scala.meta.internal.semanticdb.SignatureMessage.SealedValue.ClassSignature(__v))
    def getMethodSignature: scala.meta.internal.semanticdb.MethodSignature = sealedValue.methodSignature.getOrElse(scala.meta.internal.semanticdb.MethodSignature.defaultInstance)
    def withMethodSignature(__v: scala.meta.internal.semanticdb.MethodSignature): SignatureMessage = copy(sealedValue = scala.meta.internal.semanticdb.SignatureMessage.SealedValue.MethodSignature(__v))
    def getTypeSignature: scala.meta.internal.semanticdb.TypeSignature = sealedValue.typeSignature.getOrElse(scala.meta.internal.semanticdb.TypeSignature.defaultInstance)
    def withTypeSignature(__v: scala.meta.internal.semanticdb.TypeSignature): SignatureMessage = copy(sealedValue = scala.meta.internal.semanticdb.SignatureMessage.SealedValue.TypeSignature(__v))
    def getValueSignature: scala.meta.internal.semanticdb.ValueSignature = sealedValue.valueSignature.getOrElse(scala.meta.internal.semanticdb.ValueSignature.defaultInstance)
    def withValueSignature(__v: scala.meta.internal.semanticdb.ValueSignature): SignatureMessage = copy(sealedValue = scala.meta.internal.semanticdb.SignatureMessage.SealedValue.ValueSignature(__v))
    def clearSealedValue: SignatureMessage = copy(sealedValue = scala.meta.internal.semanticdb.SignatureMessage.SealedValue.Empty)
    def withSealedValue(__v: scala.meta.internal.semanticdb.SignatureMessage.SealedValue): SignatureMessage = copy(sealedValue = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => sealedValue.classSignature.orNull
        case 2 => sealedValue.methodSignature.orNull
        case 3 => sealedValue.typeSignature.orNull
        case 4 => sealedValue.valueSignature.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => sealedValue.classSignature.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => sealedValue.methodSignature.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => sealedValue.typeSignature.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => sealedValue.valueSignature.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = scala.meta.internal.semanticdb.SignatureMessage
    def toSignature: scala.meta.internal.semanticdb.Signature = scala.meta.internal.semanticdb.Signature.SignatureTypeMapper.toCustom(this)
}

object SignatureMessage extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.SignatureMessage] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.SignatureMessage] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): scala.meta.internal.semanticdb.SignatureMessage = {
    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    scala.meta.internal.semanticdb.SignatureMessage(
      sealedValue = __fieldsMap.get(__fields.get(0)).asInstanceOf[_root_.scala.Option[scala.meta.internal.semanticdb.ClassSignature]].map(scala.meta.internal.semanticdb.SignatureMessage.SealedValue.ClassSignature)
    .orElse[scala.meta.internal.semanticdb.SignatureMessage.SealedValue](__fieldsMap.get(__fields.get(1)).asInstanceOf[_root_.scala.Option[scala.meta.internal.semanticdb.MethodSignature]].map(scala.meta.internal.semanticdb.SignatureMessage.SealedValue.MethodSignature))
    .orElse[scala.meta.internal.semanticdb.SignatureMessage.SealedValue](__fieldsMap.get(__fields.get(2)).asInstanceOf[_root_.scala.Option[scala.meta.internal.semanticdb.TypeSignature]].map(scala.meta.internal.semanticdb.SignatureMessage.SealedValue.TypeSignature))
    .orElse[scala.meta.internal.semanticdb.SignatureMessage.SealedValue](__fieldsMap.get(__fields.get(3)).asInstanceOf[_root_.scala.Option[scala.meta.internal.semanticdb.ValueSignature]].map(scala.meta.internal.semanticdb.SignatureMessage.SealedValue.ValueSignature))
    .getOrElse(scala.meta.internal.semanticdb.SignatureMessage.SealedValue.Empty)
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb.SignatureMessage] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      scala.meta.internal.semanticdb.SignatureMessage(
        sealedValue = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb.ClassSignature]]).map(scala.meta.internal.semanticdb.SignatureMessage.SealedValue.ClassSignature)
    .orElse[scala.meta.internal.semanticdb.SignatureMessage.SealedValue](__fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb.MethodSignature]]).map(scala.meta.internal.semanticdb.SignatureMessage.SealedValue.MethodSignature))
    .orElse[scala.meta.internal.semanticdb.SignatureMessage.SealedValue](__fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb.TypeSignature]]).map(scala.meta.internal.semanticdb.SignatureMessage.SealedValue.TypeSignature))
    .orElse[scala.meta.internal.semanticdb.SignatureMessage.SealedValue](__fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb.ValueSignature]]).map(scala.meta.internal.semanticdb.SignatureMessage.SealedValue.ValueSignature))
    .getOrElse(scala.meta.internal.semanticdb.SignatureMessage.SealedValue.Empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticdbProto.javaDescriptor.getMessageTypes.get(32)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticdbProto.scalaDescriptor.messages(32)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = scala.meta.internal.semanticdb.ClassSignature
      case 2 => __out = scala.meta.internal.semanticdb.MethodSignature
      case 3 => __out = scala.meta.internal.semanticdb.TypeSignature
      case 4 => __out = scala.meta.internal.semanticdb.ValueSignature
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = scala.meta.internal.semanticdb.SignatureMessage(
  )
  sealed trait SealedValue extends _root_.scalapb.GeneratedOneof {
    def isEmpty: _root_.scala.Boolean = false
    def isDefined: _root_.scala.Boolean = true
    def isClassSignature: _root_.scala.Boolean = false
    def isMethodSignature: _root_.scala.Boolean = false
    def isTypeSignature: _root_.scala.Boolean = false
    def isValueSignature: _root_.scala.Boolean = false
    def classSignature: _root_.scala.Option[scala.meta.internal.semanticdb.ClassSignature] = None
    def methodSignature: _root_.scala.Option[scala.meta.internal.semanticdb.MethodSignature] = None
    def typeSignature: _root_.scala.Option[scala.meta.internal.semanticdb.TypeSignature] = None
    def valueSignature: _root_.scala.Option[scala.meta.internal.semanticdb.ValueSignature] = None
  }
  object SealedValue extends {
    @SerialVersionUID(0L)
    case object Empty extends scala.meta.internal.semanticdb.SignatureMessage.SealedValue {
      type ValueType = _root_.scala.Nothing
      override def isEmpty: _root_.scala.Boolean = true
      override def isDefined: _root_.scala.Boolean = false
      override def number: _root_.scala.Int = 0
      override def value: _root_.scala.Nothing = throw new java.util.NoSuchElementException("Empty.value")
    }
  
    @SerialVersionUID(0L)
    final case class ClassSignature(value: scala.meta.internal.semanticdb.ClassSignature) extends scala.meta.internal.semanticdb.SignatureMessage.SealedValue {
      type ValueType = scala.meta.internal.semanticdb.ClassSignature
      override def isClassSignature: _root_.scala.Boolean = true
      override def classSignature: _root_.scala.Option[scala.meta.internal.semanticdb.ClassSignature] = Some(value)
      override def number: _root_.scala.Int = 1
    }
    @SerialVersionUID(0L)
    final case class MethodSignature(value: scala.meta.internal.semanticdb.MethodSignature) extends scala.meta.internal.semanticdb.SignatureMessage.SealedValue {
      type ValueType = scala.meta.internal.semanticdb.MethodSignature
      override def isMethodSignature: _root_.scala.Boolean = true
      override def methodSignature: _root_.scala.Option[scala.meta.internal.semanticdb.MethodSignature] = Some(value)
      override def number: _root_.scala.Int = 2
    }
    @SerialVersionUID(0L)
    final case class TypeSignature(value: scala.meta.internal.semanticdb.TypeSignature) extends scala.meta.internal.semanticdb.SignatureMessage.SealedValue {
      type ValueType = scala.meta.internal.semanticdb.TypeSignature
      override def isTypeSignature: _root_.scala.Boolean = true
      override def typeSignature: _root_.scala.Option[scala.meta.internal.semanticdb.TypeSignature] = Some(value)
      override def number: _root_.scala.Int = 3
    }
    @SerialVersionUID(0L)
    final case class ValueSignature(value: scala.meta.internal.semanticdb.ValueSignature) extends scala.meta.internal.semanticdb.SignatureMessage.SealedValue {
      type ValueType = scala.meta.internal.semanticdb.ValueSignature
      override def isValueSignature: _root_.scala.Boolean = true
      override def valueSignature: _root_.scala.Option[scala.meta.internal.semanticdb.ValueSignature] = Some(value)
      override def number: _root_.scala.Int = 4
    }
  }
  implicit class SignatureMessageLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.SignatureMessage]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.SignatureMessage](_l) {
    def classSignature: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.ClassSignature] = field(_.getClassSignature)((c_, f_) => c_.copy(sealedValue = scala.meta.internal.semanticdb.SignatureMessage.SealedValue.ClassSignature(f_)))
    def methodSignature: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.MethodSignature] = field(_.getMethodSignature)((c_, f_) => c_.copy(sealedValue = scala.meta.internal.semanticdb.SignatureMessage.SealedValue.MethodSignature(f_)))
    def typeSignature: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.TypeSignature] = field(_.getTypeSignature)((c_, f_) => c_.copy(sealedValue = scala.meta.internal.semanticdb.SignatureMessage.SealedValue.TypeSignature(f_)))
    def valueSignature: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.ValueSignature] = field(_.getValueSignature)((c_, f_) => c_.copy(sealedValue = scala.meta.internal.semanticdb.SignatureMessage.SealedValue.ValueSignature(f_)))
    def sealedValue: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.SignatureMessage.SealedValue] = field(_.sealedValue)((c_, f_) => c_.copy(sealedValue = f_))
  }
  final val CLASSSIGNATURE_FIELD_NUMBER = 1
  final val METHODSIGNATURE_FIELD_NUMBER = 2
  final val TYPESIGNATURE_FIELD_NUMBER = 3
  final val VALUESIGNATURE_FIELD_NUMBER = 4
}

@SerialVersionUID(0L)
final case class ClassSignature(
    typeParameters: _root_.scala.Option[scala.meta.internal.semanticdb.Scope] = None,
    parents: _root_.scala.collection.Seq[scala.meta.internal.semanticdb.Type] = _root_.scala.collection.Seq.empty,
    self: scala.meta.internal.semanticdb.Type = scala.meta.internal.semanticdb.ClassSignature._typemapper_self.toCustom(scala.meta.internal.semanticdb.TypeMessage.defaultInstance),
    declarations: _root_.scala.Option[scala.meta.internal.semanticdb.Scope] = None
    ) extends scala.meta.internal.semanticdb.Signature with scalapb.GeneratedMessage with scalapb.Message[ClassSignature] with scalapb.lenses.Updatable[ClassSignature] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (typeParameters.isDefined) {
        val __value = typeParameters.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      parents.foreach { __item =>
        val __value = scala.meta.internal.semanticdb.ClassSignature._typemapper_parents.toBase(__item)
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      
      {
        val __value = scala.meta.internal.semanticdb.ClassSignature._typemapper_self.toBase(self)
        if (__value != scala.meta.internal.semanticdb.TypeMessage.defaultInstance) {
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        }
      };
      if (declarations.isDefined) {
        val __value = declarations.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      typeParameters.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      parents.foreach { __v =>
        val __m = scala.meta.internal.semanticdb.ClassSignature._typemapper_parents.toBase(__v)
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      {
        val __v = scala.meta.internal.semanticdb.ClassSignature._typemapper_self.toBase(self)
        if (__v != scala.meta.internal.semanticdb.TypeMessage.defaultInstance) {
          _output__.writeTag(3, 2)
          _output__.writeUInt32NoTag(__v.serializedSize)
          __v.writeTo(_output__)
        }
      };
      declarations.foreach { __v =>
        val __m = __v
        _output__.writeTag(4, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.ClassSignature = {
      var __typeParameters = this.typeParameters
      val __parents = (_root_.scala.collection.immutable.Vector.newBuilder[scala.meta.internal.semanticdb.Type] ++= this.parents)
      var __self = this.self
      var __declarations = this.declarations
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __typeParameters = Option(_root_.scalapb.LiteParser.readMessage(_input__, __typeParameters.getOrElse(scala.meta.internal.semanticdb.Scope.defaultInstance)))
          case 18 =>
            __parents += scala.meta.internal.semanticdb.ClassSignature._typemapper_parents.toCustom(_root_.scalapb.LiteParser.readMessage(_input__, scala.meta.internal.semanticdb.TypeMessage.defaultInstance))
          case 26 =>
            __self = scala.meta.internal.semanticdb.ClassSignature._typemapper_self.toCustom(_root_.scalapb.LiteParser.readMessage(_input__, scala.meta.internal.semanticdb.ClassSignature._typemapper_self.toBase(__self)))
          case 34 =>
            __declarations = Option(_root_.scalapb.LiteParser.readMessage(_input__, __declarations.getOrElse(scala.meta.internal.semanticdb.Scope.defaultInstance)))
          case tag => _input__.skipField(tag)
        }
      }
      scala.meta.internal.semanticdb.ClassSignature(
          typeParameters = __typeParameters,
          parents = __parents.result(),
          self = __self,
          declarations = __declarations
      )
    }
    def getTypeParameters: scala.meta.internal.semanticdb.Scope = typeParameters.getOrElse(scala.meta.internal.semanticdb.Scope.defaultInstance)
    def clearTypeParameters: ClassSignature = copy(typeParameters = None)
    def withTypeParameters(__v: scala.meta.internal.semanticdb.Scope): ClassSignature = copy(typeParameters = Option(__v))
    def clearParents = copy(parents = _root_.scala.collection.Seq.empty)
    def addParents(__vs: scala.meta.internal.semanticdb.Type*): ClassSignature = addAllParents(__vs)
    def addAllParents(__vs: TraversableOnce[scala.meta.internal.semanticdb.Type]): ClassSignature = copy(parents = parents ++ __vs)
    def withParents(__v: _root_.scala.collection.Seq[scala.meta.internal.semanticdb.Type]): ClassSignature = copy(parents = __v)
    def withSelf(__v: scala.meta.internal.semanticdb.Type): ClassSignature = copy(self = __v)
    def getDeclarations: scala.meta.internal.semanticdb.Scope = declarations.getOrElse(scala.meta.internal.semanticdb.Scope.defaultInstance)
    def clearDeclarations: ClassSignature = copy(declarations = None)
    def withDeclarations(__v: scala.meta.internal.semanticdb.Scope): ClassSignature = copy(declarations = Option(__v))
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => typeParameters.orNull
        case 2 => parents.map(scala.meta.internal.semanticdb.ClassSignature._typemapper_parents.toBase)(_root_.scala.collection.breakOut)
        case 3 => {
          val __t = scala.meta.internal.semanticdb.ClassSignature._typemapper_self.toBase(self)
          if (__t != scala.meta.internal.semanticdb.TypeMessage.defaultInstance) __t else null
        }
        case 4 => declarations.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => typeParameters.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => _root_.scalapb.descriptors.PRepeated(parents.map(scala.meta.internal.semanticdb.ClassSignature._typemapper_parents.toBase(_).toPMessage)(_root_.scala.collection.breakOut))
        case 3 => scala.meta.internal.semanticdb.ClassSignature._typemapper_self.toBase(self).toPMessage
        case 4 => declarations.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = scala.meta.internal.semanticdb.ClassSignature
}

object ClassSignature extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.ClassSignature] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.ClassSignature] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): scala.meta.internal.semanticdb.ClassSignature = {
    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    scala.meta.internal.semanticdb.ClassSignature(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[_root_.scala.Option[scala.meta.internal.semanticdb.Scope]],
      __fieldsMap.getOrElse(__fields.get(1), Nil).asInstanceOf[_root_.scala.collection.Seq[scala.meta.internal.semanticdb.TypeMessage]].map(scala.meta.internal.semanticdb.ClassSignature._typemapper_parents.toCustom)(_root_.scala.collection.breakOut),
      scala.meta.internal.semanticdb.ClassSignature._typemapper_self.toCustom(__fieldsMap.getOrElse(__fields.get(2), scala.meta.internal.semanticdb.TypeMessage.defaultInstance).asInstanceOf[scala.meta.internal.semanticdb.TypeMessage]),
      __fieldsMap.get(__fields.get(3)).asInstanceOf[_root_.scala.Option[scala.meta.internal.semanticdb.Scope]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb.ClassSignature] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      scala.meta.internal.semanticdb.ClassSignature(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb.Scope]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.collection.Seq[scala.meta.internal.semanticdb.TypeMessage]]).getOrElse(_root_.scala.collection.Seq.empty).map(scala.meta.internal.semanticdb.ClassSignature._typemapper_parents.toCustom)(_root_.scala.collection.breakOut),
        scala.meta.internal.semanticdb.ClassSignature._typemapper_self.toCustom(__fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[scala.meta.internal.semanticdb.TypeMessage]).getOrElse(scala.meta.internal.semanticdb.TypeMessage.defaultInstance)),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb.Scope]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticdbProto.javaDescriptor.getMessageTypes.get(33)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticdbProto.scalaDescriptor.messages(33)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = scala.meta.internal.semanticdb.Scope
      case 2 => __out = scala.meta.internal.semanticdb.TypeMessage
      case 3 => __out = scala.meta.internal.semanticdb.TypeMessage
      case 4 => __out = scala.meta.internal.semanticdb.Scope
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = scala.meta.internal.semanticdb.ClassSignature(
  )
  implicit class ClassSignatureLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.ClassSignature]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.ClassSignature](_l) {
    def typeParameters: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.Scope] = field(_.getTypeParameters)((c_, f_) => c_.copy(typeParameters = Option(f_)))
    def optionalTypeParameters: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[scala.meta.internal.semanticdb.Scope]] = field(_.typeParameters)((c_, f_) => c_.copy(typeParameters = f_))
    def parents: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.Seq[scala.meta.internal.semanticdb.Type]] = field(_.parents)((c_, f_) => c_.copy(parents = f_))
    def self: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.Type] = field(_.self)((c_, f_) => c_.copy(self = f_))
    def declarations: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.Scope] = field(_.getDeclarations)((c_, f_) => c_.copy(declarations = Option(f_)))
    def optionalDeclarations: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[scala.meta.internal.semanticdb.Scope]] = field(_.declarations)((c_, f_) => c_.copy(declarations = f_))
  }
  final val TYPE_PARAMETERS_FIELD_NUMBER = 1
  final val PARENTS_FIELD_NUMBER = 2
  final val SELF_FIELD_NUMBER = 3
  final val DECLARATIONS_FIELD_NUMBER = 4
  @transient
  private val _typemapper_parents: _root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TypeMessage, scala.meta.internal.semanticdb.Type] = implicitly[_root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TypeMessage, scala.meta.internal.semanticdb.Type]]
  @transient
  private val _typemapper_self: _root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TypeMessage, scala.meta.internal.semanticdb.Type] = implicitly[_root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TypeMessage, scala.meta.internal.semanticdb.Type]]
}

@SerialVersionUID(0L)
final case class MethodSignature(
    typeParameters: _root_.scala.Option[scala.meta.internal.semanticdb.Scope] = None,
    parameterLists: _root_.scala.collection.Seq[scala.meta.internal.semanticdb.Scope] = _root_.scala.collection.Seq.empty,
    returnType: scala.meta.internal.semanticdb.Type = scala.meta.internal.semanticdb.MethodSignature._typemapper_returnType.toCustom(scala.meta.internal.semanticdb.TypeMessage.defaultInstance)
    ) extends scala.meta.internal.semanticdb.Signature with scalapb.GeneratedMessage with scalapb.Message[MethodSignature] with scalapb.lenses.Updatable[MethodSignature] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (typeParameters.isDefined) {
        val __value = typeParameters.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      parameterLists.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      
      {
        val __value = scala.meta.internal.semanticdb.MethodSignature._typemapper_returnType.toBase(returnType)
        if (__value != scala.meta.internal.semanticdb.TypeMessage.defaultInstance) {
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        }
      };
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      typeParameters.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      parameterLists.foreach { __v =>
        val __m = __v
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      {
        val __v = scala.meta.internal.semanticdb.MethodSignature._typemapper_returnType.toBase(returnType)
        if (__v != scala.meta.internal.semanticdb.TypeMessage.defaultInstance) {
          _output__.writeTag(3, 2)
          _output__.writeUInt32NoTag(__v.serializedSize)
          __v.writeTo(_output__)
        }
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.MethodSignature = {
      var __typeParameters = this.typeParameters
      val __parameterLists = (_root_.scala.collection.immutable.Vector.newBuilder[scala.meta.internal.semanticdb.Scope] ++= this.parameterLists)
      var __returnType = this.returnType
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __typeParameters = Option(_root_.scalapb.LiteParser.readMessage(_input__, __typeParameters.getOrElse(scala.meta.internal.semanticdb.Scope.defaultInstance)))
          case 18 =>
            __parameterLists += _root_.scalapb.LiteParser.readMessage(_input__, scala.meta.internal.semanticdb.Scope.defaultInstance)
          case 26 =>
            __returnType = scala.meta.internal.semanticdb.MethodSignature._typemapper_returnType.toCustom(_root_.scalapb.LiteParser.readMessage(_input__, scala.meta.internal.semanticdb.MethodSignature._typemapper_returnType.toBase(__returnType)))
          case tag => _input__.skipField(tag)
        }
      }
      scala.meta.internal.semanticdb.MethodSignature(
          typeParameters = __typeParameters,
          parameterLists = __parameterLists.result(),
          returnType = __returnType
      )
    }
    def getTypeParameters: scala.meta.internal.semanticdb.Scope = typeParameters.getOrElse(scala.meta.internal.semanticdb.Scope.defaultInstance)
    def clearTypeParameters: MethodSignature = copy(typeParameters = None)
    def withTypeParameters(__v: scala.meta.internal.semanticdb.Scope): MethodSignature = copy(typeParameters = Option(__v))
    def clearParameterLists = copy(parameterLists = _root_.scala.collection.Seq.empty)
    def addParameterLists(__vs: scala.meta.internal.semanticdb.Scope*): MethodSignature = addAllParameterLists(__vs)
    def addAllParameterLists(__vs: TraversableOnce[scala.meta.internal.semanticdb.Scope]): MethodSignature = copy(parameterLists = parameterLists ++ __vs)
    def withParameterLists(__v: _root_.scala.collection.Seq[scala.meta.internal.semanticdb.Scope]): MethodSignature = copy(parameterLists = __v)
    def withReturnType(__v: scala.meta.internal.semanticdb.Type): MethodSignature = copy(returnType = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => typeParameters.orNull
        case 2 => parameterLists
        case 3 => {
          val __t = scala.meta.internal.semanticdb.MethodSignature._typemapper_returnType.toBase(returnType)
          if (__t != scala.meta.internal.semanticdb.TypeMessage.defaultInstance) __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => typeParameters.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => _root_.scalapb.descriptors.PRepeated(parameterLists.map(_.toPMessage)(_root_.scala.collection.breakOut))
        case 3 => scala.meta.internal.semanticdb.MethodSignature._typemapper_returnType.toBase(returnType).toPMessage
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = scala.meta.internal.semanticdb.MethodSignature
}

object MethodSignature extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.MethodSignature] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.MethodSignature] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): scala.meta.internal.semanticdb.MethodSignature = {
    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    scala.meta.internal.semanticdb.MethodSignature(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[_root_.scala.Option[scala.meta.internal.semanticdb.Scope]],
      __fieldsMap.getOrElse(__fields.get(1), Nil).asInstanceOf[_root_.scala.collection.Seq[scala.meta.internal.semanticdb.Scope]],
      scala.meta.internal.semanticdb.MethodSignature._typemapper_returnType.toCustom(__fieldsMap.getOrElse(__fields.get(2), scala.meta.internal.semanticdb.TypeMessage.defaultInstance).asInstanceOf[scala.meta.internal.semanticdb.TypeMessage])
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb.MethodSignature] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      scala.meta.internal.semanticdb.MethodSignature(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb.Scope]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.collection.Seq[scala.meta.internal.semanticdb.Scope]]).getOrElse(_root_.scala.collection.Seq.empty),
        scala.meta.internal.semanticdb.MethodSignature._typemapper_returnType.toCustom(__fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[scala.meta.internal.semanticdb.TypeMessage]).getOrElse(scala.meta.internal.semanticdb.TypeMessage.defaultInstance))
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticdbProto.javaDescriptor.getMessageTypes.get(34)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticdbProto.scalaDescriptor.messages(34)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = scala.meta.internal.semanticdb.Scope
      case 2 => __out = scala.meta.internal.semanticdb.Scope
      case 3 => __out = scala.meta.internal.semanticdb.TypeMessage
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = scala.meta.internal.semanticdb.MethodSignature(
  )
  implicit class MethodSignatureLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.MethodSignature]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.MethodSignature](_l) {
    def typeParameters: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.Scope] = field(_.getTypeParameters)((c_, f_) => c_.copy(typeParameters = Option(f_)))
    def optionalTypeParameters: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[scala.meta.internal.semanticdb.Scope]] = field(_.typeParameters)((c_, f_) => c_.copy(typeParameters = f_))
    def parameterLists: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.Seq[scala.meta.internal.semanticdb.Scope]] = field(_.parameterLists)((c_, f_) => c_.copy(parameterLists = f_))
    def returnType: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.Type] = field(_.returnType)((c_, f_) => c_.copy(returnType = f_))
  }
  final val TYPE_PARAMETERS_FIELD_NUMBER = 1
  final val PARAMETERLISTS_FIELD_NUMBER = 2
  final val RETURN_TYPE_FIELD_NUMBER = 3
  @transient
  private val _typemapper_returnType: _root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TypeMessage, scala.meta.internal.semanticdb.Type] = implicitly[_root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TypeMessage, scala.meta.internal.semanticdb.Type]]
}

@SerialVersionUID(0L)
final case class TypeSignature(
    typeParameters: _root_.scala.Option[scala.meta.internal.semanticdb.Scope] = None,
    lowerBound: scala.meta.internal.semanticdb.Type = scala.meta.internal.semanticdb.TypeSignature._typemapper_lowerBound.toCustom(scala.meta.internal.semanticdb.TypeMessage.defaultInstance),
    upperBound: scala.meta.internal.semanticdb.Type = scala.meta.internal.semanticdb.TypeSignature._typemapper_upperBound.toCustom(scala.meta.internal.semanticdb.TypeMessage.defaultInstance)
    ) extends scala.meta.internal.semanticdb.Signature with scalapb.GeneratedMessage with scalapb.Message[TypeSignature] with scalapb.lenses.Updatable[TypeSignature] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (typeParameters.isDefined) {
        val __value = typeParameters.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      
      {
        val __value = scala.meta.internal.semanticdb.TypeSignature._typemapper_lowerBound.toBase(lowerBound)
        if (__value != scala.meta.internal.semanticdb.TypeMessage.defaultInstance) {
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        }
      };
      
      {
        val __value = scala.meta.internal.semanticdb.TypeSignature._typemapper_upperBound.toBase(upperBound)
        if (__value != scala.meta.internal.semanticdb.TypeMessage.defaultInstance) {
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        }
      };
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      typeParameters.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      {
        val __v = scala.meta.internal.semanticdb.TypeSignature._typemapper_lowerBound.toBase(lowerBound)
        if (__v != scala.meta.internal.semanticdb.TypeMessage.defaultInstance) {
          _output__.writeTag(2, 2)
          _output__.writeUInt32NoTag(__v.serializedSize)
          __v.writeTo(_output__)
        }
      };
      {
        val __v = scala.meta.internal.semanticdb.TypeSignature._typemapper_upperBound.toBase(upperBound)
        if (__v != scala.meta.internal.semanticdb.TypeMessage.defaultInstance) {
          _output__.writeTag(3, 2)
          _output__.writeUInt32NoTag(__v.serializedSize)
          __v.writeTo(_output__)
        }
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.TypeSignature = {
      var __typeParameters = this.typeParameters
      var __lowerBound = this.lowerBound
      var __upperBound = this.upperBound
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __typeParameters = Option(_root_.scalapb.LiteParser.readMessage(_input__, __typeParameters.getOrElse(scala.meta.internal.semanticdb.Scope.defaultInstance)))
          case 18 =>
            __lowerBound = scala.meta.internal.semanticdb.TypeSignature._typemapper_lowerBound.toCustom(_root_.scalapb.LiteParser.readMessage(_input__, scala.meta.internal.semanticdb.TypeSignature._typemapper_lowerBound.toBase(__lowerBound)))
          case 26 =>
            __upperBound = scala.meta.internal.semanticdb.TypeSignature._typemapper_upperBound.toCustom(_root_.scalapb.LiteParser.readMessage(_input__, scala.meta.internal.semanticdb.TypeSignature._typemapper_upperBound.toBase(__upperBound)))
          case tag => _input__.skipField(tag)
        }
      }
      scala.meta.internal.semanticdb.TypeSignature(
          typeParameters = __typeParameters,
          lowerBound = __lowerBound,
          upperBound = __upperBound
      )
    }
    def getTypeParameters: scala.meta.internal.semanticdb.Scope = typeParameters.getOrElse(scala.meta.internal.semanticdb.Scope.defaultInstance)
    def clearTypeParameters: TypeSignature = copy(typeParameters = None)
    def withTypeParameters(__v: scala.meta.internal.semanticdb.Scope): TypeSignature = copy(typeParameters = Option(__v))
    def withLowerBound(__v: scala.meta.internal.semanticdb.Type): TypeSignature = copy(lowerBound = __v)
    def withUpperBound(__v: scala.meta.internal.semanticdb.Type): TypeSignature = copy(upperBound = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => typeParameters.orNull
        case 2 => {
          val __t = scala.meta.internal.semanticdb.TypeSignature._typemapper_lowerBound.toBase(lowerBound)
          if (__t != scala.meta.internal.semanticdb.TypeMessage.defaultInstance) __t else null
        }
        case 3 => {
          val __t = scala.meta.internal.semanticdb.TypeSignature._typemapper_upperBound.toBase(upperBound)
          if (__t != scala.meta.internal.semanticdb.TypeMessage.defaultInstance) __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => typeParameters.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => scala.meta.internal.semanticdb.TypeSignature._typemapper_lowerBound.toBase(lowerBound).toPMessage
        case 3 => scala.meta.internal.semanticdb.TypeSignature._typemapper_upperBound.toBase(upperBound).toPMessage
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = scala.meta.internal.semanticdb.TypeSignature
}

object TypeSignature extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.TypeSignature] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.TypeSignature] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): scala.meta.internal.semanticdb.TypeSignature = {
    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    scala.meta.internal.semanticdb.TypeSignature(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[_root_.scala.Option[scala.meta.internal.semanticdb.Scope]],
      scala.meta.internal.semanticdb.TypeSignature._typemapper_lowerBound.toCustom(__fieldsMap.getOrElse(__fields.get(1), scala.meta.internal.semanticdb.TypeMessage.defaultInstance).asInstanceOf[scala.meta.internal.semanticdb.TypeMessage]),
      scala.meta.internal.semanticdb.TypeSignature._typemapper_upperBound.toCustom(__fieldsMap.getOrElse(__fields.get(2), scala.meta.internal.semanticdb.TypeMessage.defaultInstance).asInstanceOf[scala.meta.internal.semanticdb.TypeMessage])
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb.TypeSignature] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      scala.meta.internal.semanticdb.TypeSignature(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb.Scope]]),
        scala.meta.internal.semanticdb.TypeSignature._typemapper_lowerBound.toCustom(__fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[scala.meta.internal.semanticdb.TypeMessage]).getOrElse(scala.meta.internal.semanticdb.TypeMessage.defaultInstance)),
        scala.meta.internal.semanticdb.TypeSignature._typemapper_upperBound.toCustom(__fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[scala.meta.internal.semanticdb.TypeMessage]).getOrElse(scala.meta.internal.semanticdb.TypeMessage.defaultInstance))
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticdbProto.javaDescriptor.getMessageTypes.get(35)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticdbProto.scalaDescriptor.messages(35)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = scala.meta.internal.semanticdb.Scope
      case 2 => __out = scala.meta.internal.semanticdb.TypeMessage
      case 3 => __out = scala.meta.internal.semanticdb.TypeMessage
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = scala.meta.internal.semanticdb.TypeSignature(
  )
  implicit class TypeSignatureLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.TypeSignature]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.TypeSignature](_l) {
    def typeParameters: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.Scope] = field(_.getTypeParameters)((c_, f_) => c_.copy(typeParameters = Option(f_)))
    def optionalTypeParameters: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[scala.meta.internal.semanticdb.Scope]] = field(_.typeParameters)((c_, f_) => c_.copy(typeParameters = f_))
    def lowerBound: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.Type] = field(_.lowerBound)((c_, f_) => c_.copy(lowerBound = f_))
    def upperBound: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.Type] = field(_.upperBound)((c_, f_) => c_.copy(upperBound = f_))
  }
  final val TYPE_PARAMETERS_FIELD_NUMBER = 1
  final val LOWER_BOUND_FIELD_NUMBER = 2
  final val UPPER_BOUND_FIELD_NUMBER = 3
  @transient
  private val _typemapper_lowerBound: _root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TypeMessage, scala.meta.internal.semanticdb.Type] = implicitly[_root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TypeMessage, scala.meta.internal.semanticdb.Type]]
  @transient
  private val _typemapper_upperBound: _root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TypeMessage, scala.meta.internal.semanticdb.Type] = implicitly[_root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TypeMessage, scala.meta.internal.semanticdb.Type]]
}

@SerialVersionUID(0L)
final case class ValueSignature(
    tpe: scala.meta.internal.semanticdb.Type = scala.meta.internal.semanticdb.ValueSignature._typemapper_tpe.toCustom(scala.meta.internal.semanticdb.TypeMessage.defaultInstance)
    ) extends scala.meta.internal.semanticdb.Signature with scalapb.GeneratedMessage with scalapb.Message[ValueSignature] with scalapb.lenses.Updatable[ValueSignature] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = scala.meta.internal.semanticdb.ValueSignature._typemapper_tpe.toBase(tpe)
        if (__value != scala.meta.internal.semanticdb.TypeMessage.defaultInstance) {
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        }
      };
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = scala.meta.internal.semanticdb.ValueSignature._typemapper_tpe.toBase(tpe)
        if (__v != scala.meta.internal.semanticdb.TypeMessage.defaultInstance) {
          _output__.writeTag(1, 2)
          _output__.writeUInt32NoTag(__v.serializedSize)
          __v.writeTo(_output__)
        }
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.ValueSignature = {
      var __tpe = this.tpe
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __tpe = scala.meta.internal.semanticdb.ValueSignature._typemapper_tpe.toCustom(_root_.scalapb.LiteParser.readMessage(_input__, scala.meta.internal.semanticdb.ValueSignature._typemapper_tpe.toBase(__tpe)))
          case tag => _input__.skipField(tag)
        }
      }
      scala.meta.internal.semanticdb.ValueSignature(
          tpe = __tpe
      )
    }
    def withTpe(__v: scala.meta.internal.semanticdb.Type): ValueSignature = copy(tpe = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = scala.meta.internal.semanticdb.ValueSignature._typemapper_tpe.toBase(tpe)
          if (__t != scala.meta.internal.semanticdb.TypeMessage.defaultInstance) __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => scala.meta.internal.semanticdb.ValueSignature._typemapper_tpe.toBase(tpe).toPMessage
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = scala.meta.internal.semanticdb.ValueSignature
}

object ValueSignature extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.ValueSignature] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.ValueSignature] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): scala.meta.internal.semanticdb.ValueSignature = {
    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    scala.meta.internal.semanticdb.ValueSignature(
      scala.meta.internal.semanticdb.ValueSignature._typemapper_tpe.toCustom(__fieldsMap.getOrElse(__fields.get(0), scala.meta.internal.semanticdb.TypeMessage.defaultInstance).asInstanceOf[scala.meta.internal.semanticdb.TypeMessage])
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb.ValueSignature] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      scala.meta.internal.semanticdb.ValueSignature(
        scala.meta.internal.semanticdb.ValueSignature._typemapper_tpe.toCustom(__fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[scala.meta.internal.semanticdb.TypeMessage]).getOrElse(scala.meta.internal.semanticdb.TypeMessage.defaultInstance))
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticdbProto.javaDescriptor.getMessageTypes.get(36)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticdbProto.scalaDescriptor.messages(36)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = scala.meta.internal.semanticdb.TypeMessage
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = scala.meta.internal.semanticdb.ValueSignature(
  )
  implicit class ValueSignatureLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.ValueSignature]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.ValueSignature](_l) {
    def tpe: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.Type] = field(_.tpe)((c_, f_) => c_.copy(tpe = f_))
  }
  final val TPE_FIELD_NUMBER = 1
  @transient
  private val _typemapper_tpe: _root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TypeMessage, scala.meta.internal.semanticdb.Type] = implicitly[_root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TypeMessage, scala.meta.internal.semanticdb.Type]]
}
