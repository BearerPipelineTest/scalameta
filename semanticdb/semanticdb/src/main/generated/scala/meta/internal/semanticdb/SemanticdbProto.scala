// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package scala.meta.internal.semanticdb

object SemanticdbProto extends _root_.scalapb.GeneratedFileObject {
  lazy val dependencies: Seq[_root_.scalapb.GeneratedFileObject] = Seq(
  )
  lazy val messagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq(
    scala.meta.internal.semanticdb.TextDocuments,
    scala.meta.internal.semanticdb.TextDocument,
    scala.meta.internal.semanticdb.Range,
    scala.meta.internal.semanticdb.Location,
    scala.meta.internal.semanticdb.Scope,
    scala.meta.internal.semanticdb.TypeMessage,
    scala.meta.internal.semanticdb.TypeRef,
    scala.meta.internal.semanticdb.SingletonType,
    scala.meta.internal.semanticdb.IntersectionType,
    scala.meta.internal.semanticdb.UnionType,
    scala.meta.internal.semanticdb.WithType,
    scala.meta.internal.semanticdb.StructuralType,
    scala.meta.internal.semanticdb.AnnotatedType,
    scala.meta.internal.semanticdb.ExistentialType,
    scala.meta.internal.semanticdb.UniversalType,
    scala.meta.internal.semanticdb.ClassInfoType,
    scala.meta.internal.semanticdb.MethodType,
    scala.meta.internal.semanticdb.ByNameType,
    scala.meta.internal.semanticdb.RepeatedType,
    scala.meta.internal.semanticdb.TypeType,
    scala.meta.internal.semanticdb.SymbolInformation,
    scala.meta.internal.semanticdb.Annotation,
    scala.meta.internal.semanticdb.Accessibility,
    scala.meta.internal.semanticdb.SymbolOccurrence,
    scala.meta.internal.semanticdb.Diagnostic,
    scala.meta.internal.semanticdb.Synthetic
  )
  private lazy val ProtoBytes: Array[Byte] =
      scalapb.Encoding.fromBase64(scala.collection.Seq(
  """CiZzZW1hbnRpY2RiL3NlbWFudGljZGIvc2VtYW50aWNkYi5wcm90bxIec2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiI
  lsKDVRleHREb2N1bWVudHMSSgoJZG9jdW1lbnRzGAEgAygLMiwuc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiLlRleHREb
  2N1bWVudFIJZG9jdW1lbnRzIpIECgxUZXh0RG9jdW1lbnQSPgoGc2NoZW1hGAEgASgOMiYuc2NhbGEubWV0YS5pbnRlcm5hbC5zZ
  W1hbnRpY2RiLlNjaGVtYVIGc2NoZW1hEhAKA3VyaRgCIAEoCVIDdXJpEhIKBHRleHQYAyABKAlSBHRleHQSEAoDbWQ1GAsgASgJU
  gNtZDUSRAoIbGFuZ3VhZ2UYCiABKA4yKC5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIuTGFuZ3VhZ2VSCGxhbmd1YWdlE
  ksKB3N5bWJvbHMYBSADKAsyMS5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIuU3ltYm9sSW5mb3JtYXRpb25SB3N5bWJvb
  HMSUgoLb2NjdXJyZW5jZXMYBiADKAsyMC5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIuU3ltYm9sT2NjdXJyZW5jZVILb
  2NjdXJyZW5jZXMSTAoLZGlhZ25vc3RpY3MYByADKAsyKi5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIuRGlhZ25vc3RpY
  1ILZGlhZ25vc3RpY3MSSQoKc3ludGhldGljcxgIIAMoCzIpLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYi5TeW50aGV0a
  WNSCnN5bnRoZXRpY3NKBAgEEAVKBAgJEAoijwEKBVJhbmdlEh0KCnN0YXJ0X2xpbmUYASABKAVSCXN0YXJ0TGluZRInCg9zdGFyd
  F9jaGFyYWN0ZXIYAiABKAVSDnN0YXJ0Q2hhcmFjdGVyEhkKCGVuZF9saW5lGAMgASgFUgdlbmRMaW5lEiMKDWVuZF9jaGFyYWN0Z
  XIYBCABKAVSDGVuZENoYXJhY3RlciJZCghMb2NhdGlvbhIQCgN1cmkYASABKAlSA3VyaRI7CgVyYW5nZRgCIAEoCzIlLnNjYWxhL
  m1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYi5SYW5nZVIFcmFuZ2UidAoFU2NvcGUSGgoIc3ltbGlua3MYASADKAlSCHN5bWxpbmtzE
  k8KCWhhcmRsaW5rcxgCIAMoCzIxLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYi5TeW1ib2xJbmZvcm1hdGlvblIJaGFyZ
  GxpbmtzIrcJCgRUeXBlEkMKB3R5cGVSZWYYAiABKAsyJy5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIuVHlwZVJlZkgAU
  gd0eXBlUmVmElUKDXNpbmdsZXRvblR5cGUYECABKAsyLS5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIuU2luZ2xldG9uV
  HlwZUgAUg1zaW5nbGV0b25UeXBlEl4KEGludGVyc2VjdGlvblR5cGUYESABKAsyMC5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFud
  GljZGIuSW50ZXJzZWN0aW9uVHlwZUgAUhBpbnRlcnNlY3Rpb25UeXBlEkkKCXVuaW9uVHlwZRgSIAEoCzIpLnNjYWxhLm1ldGEua
  W50ZXJuYWwuc2VtYW50aWNkYi5VbmlvblR5cGVIAFIJdW5pb25UeXBlEkYKCHdpdGhUeXBlGBMgASgLMiguc2NhbGEubWV0YS5pb
  nRlcm5hbC5zZW1hbnRpY2RiLldpdGhUeXBlSABSCHdpdGhUeXBlElgKDnN0cnVjdHVyYWxUeXBlGAcgASgLMi4uc2NhbGEubWV0Y
  S5pbnRlcm5hbC5zZW1hbnRpY2RiLlN0cnVjdHVyYWxUeXBlSABSDnN0cnVjdHVyYWxUeXBlElUKDWFubm90YXRlZFR5cGUYCCABK
  AsyLS5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIuQW5ub3RhdGVkVHlwZUgAUg1hbm5vdGF0ZWRUeXBlElsKD2V4aXN0Z
  W50aWFsVHlwZRgJIAEoCzIvLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYi5FeGlzdGVudGlhbFR5cGVIAFIPZXhpc3Rlb
  nRpYWxUeXBlElUKDXVuaXZlcnNhbFR5cGUYCiABKAsyLS5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIuVW5pdmVyc2FsV
  HlwZUgAUg11bml2ZXJzYWxUeXBlElUKDWNsYXNzSW5mb1R5cGUYCyABKAsyLS5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZ
  GIuQ2xhc3NJbmZvVHlwZUgAUg1jbGFzc0luZm9UeXBlEkwKCm1ldGhvZFR5cGUYDCABKAsyKi5zY2FsYS5tZXRhLmludGVybmFsL
  nNlbWFudGljZGIuTWV0aG9kVHlwZUgAUgptZXRob2RUeXBlEkwKCmJ5TmFtZVR5cGUYDSABKAsyKi5zY2FsYS5tZXRhLmludGVyb
  mFsLnNlbWFudGljZGIuQnlOYW1lVHlwZUgAUgpieU5hbWVUeXBlElIKDHJlcGVhdGVkVHlwZRgOIAEoCzIsLnNjYWxhLm1ldGEua
  W50ZXJuYWwuc2VtYW50aWNkYi5SZXBlYXRlZFR5cGVIAFIMcmVwZWF0ZWRUeXBlEkYKCHR5cGVUeXBlGA8gASgLMiguc2NhbGEub
  WV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiLlR5cGVUeXBlSABSCHR5cGVUeXBlQg4KDHNlYWxlZF92YWx1ZUoECAEQAkoECAMQBEoEC
  AQQBUoECAUQBkoECAYQByKsAQoHVHlwZVJlZhI8CgZwcmVmaXgYASABKAsyJC5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZ
  GIuVHlwZVIGcHJlZml4EhYKBnN5bWJvbBgCIAEoCVIGc3ltYm9sEksKDnR5cGVfYXJndW1lbnRzGAMgAygLMiQuc2NhbGEubWV0Y
  S5pbnRlcm5hbC5zZW1hbnRpY2RiLlR5cGVSDXR5cGVBcmd1bWVudHMilgMKDVNpbmdsZXRvblR5cGUSQwoDdGFnGAEgASgOMjEuc
  2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiLlNpbmdsZXRvblR5cGUuVGFnUgN0YWcSPAoGcHJlZml4GAIgASgLMiQuc2Nhb
  GEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiLlR5cGVSBnByZWZpeBIWCgZzeW1ib2wYAyABKAlSBnN5bWJvbBIcCglwcmltaXRpd
  mUYBCABKANSCXByaW1pdGl2ZRIWCgZzdHJpbmcYBSABKAlSBnN0cmluZyKzAQoDVGFnEhUKEVVOS05PV05fU0lOR0xFVE9OEAASC
  goGU1lNQk9MEAESCAoEVEhJUxACEgkKBVNVUEVSEAMSCAoEVU5JVBAEEgsKB0JPT0xFQU4QBRIICgRCWVRFEAYSCQoFU0hPUlQQB
  xIICgRDSEFSEAgSBwoDSU5UEAkSCAoETE9ORxAKEgkKBUZMT0FUEAsSCgoGRE9VQkxFEAwSCgoGU1RSSU5HEA0SCAoETlVMTBAOI
  k4KEEludGVyc2VjdGlvblR5cGUSOgoFdHlwZXMYASADKAsyJC5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIuVHlwZVIFd
  HlwZXMiRwoJVW5pb25UeXBlEjoKBXR5cGVzGAEgAygLMiQuc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiLlR5cGVSBXR5c
  GVzIkYKCFdpdGhUeXBlEjoKBXR5cGVzGAEgAygLMiQuc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiLlR5cGVSBXR5cGVzI
  qUBCg5TdHJ1Y3R1cmFsVHlwZRI2CgN0cGUYBCABKAsyJC5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIuVHlwZVIDdHBlE
  kkKDGRlY2xhcmF0aW9ucxgFIAEoCzIlLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYi5TY29wZVIMZGVjbGFyYXRpb25zS
  gQIARACSgQIAhADSgQIAxAEIpsBCg1Bbm5vdGF0ZWRUeXBlEkwKC2Fubm90YXRpb25zGAMgAygLMiouc2NhbGEubWV0YS5pbnRlc
  m5hbC5zZW1hbnRpY2RiLkFubm90YXRpb25SC2Fubm90YXRpb25zEjYKA3RwZRgBIAEoCzIkLnNjYWxhLm1ldGEuaW50ZXJuYWwuc
  2VtYW50aWNkYi5UeXBlUgN0cGVKBAgCEAMimgEKD0V4aXN0ZW50aWFsVHlwZRI2CgN0cGUYASABKAsyJC5zY2FsYS5tZXRhLmlud
  GVybmFsLnNlbWFudGljZGIuVHlwZVIDdHBlEkkKDGRlY2xhcmF0aW9ucxgDIAEoCzIlLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtY
  W50aWNkYi5TY29wZVIMZGVjbGFyYXRpb25zSgQIAhADIp0BCg1Vbml2ZXJzYWxUeXBlEk4KD3R5cGVfcGFyYW1ldGVycxgDIAEoC
  zIlLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYi5TY29wZVIOdHlwZVBhcmFtZXRlcnMSNgoDdHBlGAIgASgLMiQuc2Nhb
  GEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiLlR5cGVSA3RwZUoECAEQAiL2AQoNQ2xhc3NJbmZvVHlwZRJOCg90eXBlX3BhcmFtZ
  XRlcnMYBCABKAsyJS5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIuU2NvcGVSDnR5cGVQYXJhbWV0ZXJzEj4KB3BhcmVud
  HMYAiADKAsyJC5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIuVHlwZVIHcGFyZW50cxJJCgxkZWNsYXJhdGlvbnMYBSABK
  AsyJS5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIuU2NvcGVSDGRlY2xhcmF0aW9uc0oECAEQAkoECAMQBCL+AQoKTWV0a
  G9kVHlwZRJOCg90eXBlX3BhcmFtZXRlcnMYBCABKAsyJS5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIuU2NvcGVSDnR5c
  GVQYXJhbWV0ZXJzEk0KDnBhcmFtZXRlckxpc3RzGAUgAygLMiUuc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiLlNjb3BlU
  g5wYXJhbWV0ZXJMaXN0cxJFCgtyZXR1cm5fdHlwZRgDIAEoCzIkLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYi5UeXBlU
  gpyZXR1cm5UeXBlSgQIARACSgQIAhADIkQKCkJ5TmFtZVR5cGUSNgoDdHBlGAEgASgLMiQuc2NhbGEubWV0YS5pbnRlcm5hbC5zZ
  W1hbnRpY2RiLlR5cGVSA3RwZSJGCgxSZXBlYXRlZFR5cGUSNgoDdHBlGAEgASgLMiQuc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hb
  nRpY2RiLlR5cGVSA3RwZSLuAQoIVHlwZVR5cGUSTgoPdHlwZV9wYXJhbWV0ZXJzGAQgASgLMiUuc2NhbGEubWV0YS5pbnRlcm5hb
  C5zZW1hbnRpY2RiLlNjb3BlUg50eXBlUGFyYW1ldGVycxJFCgtsb3dlcl9ib3VuZBgCIAEoCzIkLnNjYWxhLm1ldGEuaW50ZXJuY
  Wwuc2VtYW50aWNkYi5UeXBlUgpsb3dlckJvdW5kEkUKC3VwcGVyX2JvdW5kGAMgASgLMiQuc2NhbGEubWV0YS5pbnRlcm5hbC5zZ
  W1hbnRpY2RiLlR5cGVSCnVwcGVyQm91bmRKBAgBEAIi4gcKEVN5bWJvbEluZm9ybWF0aW9uEhYKBnN5bWJvbBgBIAEoCVIGc3ltY
  m9sEkQKCGxhbmd1YWdlGBAgASgOMiguc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiLkxhbmd1YWdlUghsYW5ndWFnZRJKC
  gRraW5kGAMgASgOMjYuc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiLlN5bWJvbEluZm9ybWF0aW9uLktpbmRSBGtpbmQSH
  goKcHJvcGVydGllcxgEIAEoBVIKcHJvcGVydGllcxISCgRuYW1lGAUgASgJUgRuYW1lEjYKA3RwZRgLIAEoCzIkLnNjYWxhLm1ld
  GEuaW50ZXJuYWwuc2VtYW50aWNkYi5UeXBlUgN0cGUSTAoLYW5ub3RhdGlvbnMYDSADKAsyKi5zY2FsYS5tZXRhLmludGVybmFsL
  nNlbWFudGljZGIuQW5ub3RhdGlvblILYW5ub3RhdGlvbnMSUwoNYWNjZXNzaWJpbGl0eRgOIAEoCzItLnNjYWxhLm1ldGEuaW50Z
  XJuYWwuc2VtYW50aWNkYi5BY2Nlc3NpYmlsaXR5Ug1hY2Nlc3NpYmlsaXR5Io0CCgRLaW5kEhAKDFVOS05PV05fS0lORBAAEgkKB
  UxPQ0FMEBMSCQoFRklFTEQQFBIKCgZNRVRIT0QQAxIPCgtDT05TVFJVQ1RPUhAVEgkKBU1BQ1JPEAYSCAoEVFlQRRAHEg0KCVBBU
  kFNRVRFUhAIEhIKDlNFTEZfUEFSQU1FVEVSEBESEgoOVFlQRV9QQVJBTUVURVIQCRIKCgZPQkpFQ1QQChILCgdQQUNLQUdFEAsSE
  goOUEFDS0FHRV9PQkpFQ1QQDBIJCgVDTEFTUxANEgkKBVRSQUlUEA4SDQoJSU5URVJGQUNFEBIiBAgBEAEiBAgCEAIiBAgEEAQiB
  AgFEAUiBAgPEA8iBAgQEBAi0wEKCFByb3BlcnR5EhQKEFVOS05PV05fUFJPUEVSVFkQABIMCghBQlNUUkFDVBAEEgkKBUZJTkFME
  AgSCgoGU0VBTEVEEBASDAoISU1QTElDSVQQIBIICgRMQVpZEEASCQoEQ0FTRRCAARIOCglDT1ZBUklBTlQQgAISEgoNQ09OVFJBV
  kFSSUFOVBCABBIICgNWQUwQgAgSCAoDVkFSEIAQEgsKBlNUQVRJQxCAIBIMCgdQUklNQVJZEIBAEgoKBEVOVU0QgIABIgQIARABI
  gQIAhACSgQIAhADSgQIBhAHSgQIBxAISgQICBAJSgQICRAKSgQIChALSgQIDBANSgQIDxAQIkQKCkFubm90YXRpb24SNgoDdHBlG
  AEgASgLMiQuc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiLlR5cGVSA3RwZSKHAgoNQWNjZXNzaWJpbGl0eRJDCgN0YWcYA
  SABKA4yMS5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIuQWNjZXNzaWJpbGl0eS5UYWdSA3RhZxIWCgZzeW1ib2wYAiABK
  AlSBnN5bWJvbCKYAQoDVGFnEhkKFVVOS05PV05fQUNDRVNTSUJJTElUWRAAEgsKB1BSSVZBVEUQARIQCgxQUklWQVRFX1RISVMQA
  hISCg5QUklWQVRFX1dJVEhJThADEg0KCVBST1RFQ1RFRBAEEhIKDlBST1RFQ1RFRF9USElTEAUSFAoQUFJPVEVDVEVEX1dJVEhJT
  hAGEgoKBlBVQkxJQxAHIusBChBTeW1ib2xPY2N1cnJlbmNlEjsKBXJhbmdlGAEgASgLMiUuc2NhbGEubWV0YS5pbnRlcm5hbC5zZ
  W1hbnRpY2RiLlJhbmdlUgVyYW5nZRIWCgZzeW1ib2wYAiABKAlSBnN5bWJvbBJJCgRyb2xlGAMgASgOMjUuc2NhbGEubWV0YS5pb
  nRlcm5hbC5zZW1hbnRpY2RiLlN5bWJvbE9jY3VycmVuY2UuUm9sZVIEcm9sZSI3CgRSb2xlEhAKDFVOS05PV05fUk9MRRAAEg0KC
  VJFRkVSRU5DRRABEg4KCkRFRklOSVRJT04QAiKJAgoKRGlhZ25vc3RpYxI7CgVyYW5nZRgBIAEoCzIlLnNjYWxhLm1ldGEuaW50Z
  XJuYWwuc2VtYW50aWNkYi5SYW5nZVIFcmFuZ2USTwoIc2V2ZXJpdHkYAiABKA4yMy5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFud
  GljZGIuRGlhZ25vc3RpYy5TZXZlcml0eVIIc2V2ZXJpdHkSGAoHbWVzc2FnZRgDIAEoCVIHbWVzc2FnZSJTCghTZXZlcml0eRIUC
  hBVTktOT1dOX1NFVkVSSVRZEAASCQoFRVJST1IQARILCgdXQVJOSU5HEAISDwoLSU5GT1JNQVRJT04QAxIICgRISU5UEAQiigEKC
  VN5bnRoZXRpYxI7CgVyYW5nZRgBIAEoCzIlLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYi5SYW5nZVIFcmFuZ2USQAoEd
  GV4dBgCIAEoCzIsLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYi5UZXh0RG9jdW1lbnRSBHRleHQqNgoGU2NoZW1hEgoKB
  kxFR0FDWRAAEg8KC1NFTUFOVElDREIzEAMSDwoLU0VNQU5USUNEQjQQBCo1CghMYW5ndWFnZRIUChBVTktOT1dOX0xBTkdVQUdFE
  AASCQoFU0NBTEEQARIICgRKQVZBEAJiBnByb3RvMw=="""
      ).mkString)
  lazy val scalaDescriptor: _root_.scalapb.descriptors.FileDescriptor = {
    val scalaProto = com.google.protobuf.descriptor.FileDescriptorProto.parseFrom(ProtoBytes)
    _root_.scalapb.descriptors.FileDescriptor.buildFrom(scalaProto, dependencies.map(_.scalaDescriptor))
  }
  lazy val javaDescriptor: com.google.protobuf.Descriptors.FileDescriptor = {
    val javaProto = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(ProtoBytes)
    com.google.protobuf.Descriptors.FileDescriptor.buildFrom(javaProto, Array(
    ))
  }
  @deprecated("Use javaDescriptor instead. In a future version this will refer to scalaDescriptor.", "ScalaPB 0.5.47")
  def descriptor: com.google.protobuf.Descriptors.FileDescriptor = javaDescriptor
}