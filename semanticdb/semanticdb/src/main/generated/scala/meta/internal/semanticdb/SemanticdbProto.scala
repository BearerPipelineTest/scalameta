// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package scala.meta.internal.semanticdb

object SemanticdbProto extends _root_.scalapb.GeneratedFileObject {
  lazy val dependencies: Seq[_root_.scalapb.GeneratedFileObject] = Seq(
  )
  lazy val messagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq(
    scala.meta.internal.semanticdb.TextDocuments,
    scala.meta.internal.semanticdb.TextDocument,
    scala.meta.internal.semanticdb.Range,
    scala.meta.internal.semanticdb.Location,
    scala.meta.internal.semanticdb.Scope,
    scala.meta.internal.semanticdb.TypeMessage,
    scala.meta.internal.semanticdb.TypeRef,
    scala.meta.internal.semanticdb.SingleType,
    scala.meta.internal.semanticdb.ThisType,
    scala.meta.internal.semanticdb.SuperType,
    scala.meta.internal.semanticdb.ConstantType,
    scala.meta.internal.semanticdb.IntersectionType,
    scala.meta.internal.semanticdb.UnionType,
    scala.meta.internal.semanticdb.WithType,
    scala.meta.internal.semanticdb.StructuralType,
    scala.meta.internal.semanticdb.AnnotatedType,
    scala.meta.internal.semanticdb.ExistentialType,
    scala.meta.internal.semanticdb.UniversalType,
    scala.meta.internal.semanticdb.ByNameType,
    scala.meta.internal.semanticdb.RepeatedType,
    scala.meta.internal.semanticdb.ConstantMessage,
    scala.meta.internal.semanticdb.UnitConstant,
    scala.meta.internal.semanticdb.BooleanConstant,
    scala.meta.internal.semanticdb.ByteConstant,
    scala.meta.internal.semanticdb.ShortConstant,
    scala.meta.internal.semanticdb.CharConstant,
    scala.meta.internal.semanticdb.IntConstant,
    scala.meta.internal.semanticdb.LongConstant,
    scala.meta.internal.semanticdb.FloatConstant,
    scala.meta.internal.semanticdb.DoubleConstant,
    scala.meta.internal.semanticdb.StringConstant,
    scala.meta.internal.semanticdb.NullConstant,
    scala.meta.internal.semanticdb.SignatureMessage,
    scala.meta.internal.semanticdb.ClassSignature,
    scala.meta.internal.semanticdb.MethodSignature,
    scala.meta.internal.semanticdb.TypeSignature,
    scala.meta.internal.semanticdb.ValueSignature,
    scala.meta.internal.semanticdb.SymbolInformation,
    scala.meta.internal.semanticdb.Annotation,
    scala.meta.internal.semanticdb.Accessibility,
    scala.meta.internal.semanticdb.SymbolOccurrence,
    scala.meta.internal.semanticdb.Diagnostic,
    scala.meta.internal.semanticdb.Synthetic
  )
  private lazy val ProtoBytes: Array[Byte] =
      scalapb.Encoding.fromBase64(scala.collection.Seq(
  """CiZzZW1hbnRpY2RiL3NlbWFudGljZGIvc2VtYW50aWNkYi5wcm90bxIec2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiI
  lsKDVRleHREb2N1bWVudHMSSgoJZG9jdW1lbnRzGAEgAygLMiwuc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiLlRleHREb
  2N1bWVudFIJZG9jdW1lbnRzIpIECgxUZXh0RG9jdW1lbnQSPgoGc2NoZW1hGAEgASgOMiYuc2NhbGEubWV0YS5pbnRlcm5hbC5zZ
  W1hbnRpY2RiLlNjaGVtYVIGc2NoZW1hEhAKA3VyaRgCIAEoCVIDdXJpEhIKBHRleHQYAyABKAlSBHRleHQSEAoDbWQ1GAsgASgJU
  gNtZDUSRAoIbGFuZ3VhZ2UYCiABKA4yKC5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIuTGFuZ3VhZ2VSCGxhbmd1YWdlE
  ksKB3N5bWJvbHMYBSADKAsyMS5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIuU3ltYm9sSW5mb3JtYXRpb25SB3N5bWJvb
  HMSUgoLb2NjdXJyZW5jZXMYBiADKAsyMC5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIuU3ltYm9sT2NjdXJyZW5jZVILb
  2NjdXJyZW5jZXMSTAoLZGlhZ25vc3RpY3MYByADKAsyKi5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIuRGlhZ25vc3RpY
  1ILZGlhZ25vc3RpY3MSSQoKc3ludGhldGljcxgIIAMoCzIpLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYi5TeW50aGV0a
  WNSCnN5bnRoZXRpY3NKBAgEEAVKBAgJEAoijwEKBVJhbmdlEh0KCnN0YXJ0X2xpbmUYASABKAVSCXN0YXJ0TGluZRInCg9zdGFyd
  F9jaGFyYWN0ZXIYAiABKAVSDnN0YXJ0Q2hhcmFjdGVyEhkKCGVuZF9saW5lGAMgASgFUgdlbmRMaW5lEiMKDWVuZF9jaGFyYWN0Z
  XIYBCABKAVSDGVuZENoYXJhY3RlciJZCghMb2NhdGlvbhIQCgN1cmkYASABKAlSA3VyaRI7CgVyYW5nZRgCIAEoCzIlLnNjYWxhL
  m1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYi5SYW5nZVIFcmFuZ2UidAoFU2NvcGUSGgoIc3ltbGlua3MYASADKAlSCHN5bWxpbmtzE
  k8KCWhhcmRsaW5rcxgCIAMoCzIxLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYi5TeW1ib2xJbmZvcm1hdGlvblIJaGFyZ
  GxpbmtzIsAJCgRUeXBlEkMKB3R5cGVSZWYYAiABKAsyJy5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIuVHlwZVJlZkgAU
  gd0eXBlUmVmEkwKCnNpbmdsZVR5cGUYFCABKAsyKi5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIuU2luZ2xlVHlwZUgAU
  gpzaW5nbGVUeXBlEkYKCHRoaXNUeXBlGBUgASgLMiguc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiLlRoaXNUeXBlSABSC
  HRoaXNUeXBlEkkKCXN1cGVyVHlwZRgWIAEoCzIpLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYi5TdXBlclR5cGVIAFIJc
  3VwZXJUeXBlElIKDGNvbnN0YW50VHlwZRgXIAEoCzIsLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYi5Db25zdGFudFR5c
  GVIAFIMY29uc3RhbnRUeXBlEl4KEGludGVyc2VjdGlvblR5cGUYESABKAsyMC5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZ
  GIuSW50ZXJzZWN0aW9uVHlwZUgAUhBpbnRlcnNlY3Rpb25UeXBlEkkKCXVuaW9uVHlwZRgSIAEoCzIpLnNjYWxhLm1ldGEuaW50Z
  XJuYWwuc2VtYW50aWNkYi5VbmlvblR5cGVIAFIJdW5pb25UeXBlEkYKCHdpdGhUeXBlGBMgASgLMiguc2NhbGEubWV0YS5pbnRlc
  m5hbC5zZW1hbnRpY2RiLldpdGhUeXBlSABSCHdpdGhUeXBlElgKDnN0cnVjdHVyYWxUeXBlGAcgASgLMi4uc2NhbGEubWV0YS5pb
  nRlcm5hbC5zZW1hbnRpY2RiLlN0cnVjdHVyYWxUeXBlSABSDnN0cnVjdHVyYWxUeXBlElUKDWFubm90YXRlZFR5cGUYCCABKAsyL
  S5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIuQW5ub3RhdGVkVHlwZUgAUg1hbm5vdGF0ZWRUeXBlElsKD2V4aXN0ZW50a
  WFsVHlwZRgJIAEoCzIvLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYi5FeGlzdGVudGlhbFR5cGVIAFIPZXhpc3RlbnRpY
  WxUeXBlElUKDXVuaXZlcnNhbFR5cGUYCiABKAsyLS5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIuVW5pdmVyc2FsVHlwZ
  UgAUg11bml2ZXJzYWxUeXBlEkwKCmJ5TmFtZVR5cGUYDSABKAsyKi5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIuQnlOY
  W1lVHlwZUgAUgpieU5hbWVUeXBlElIKDHJlcGVhdGVkVHlwZRgOIAEoCzIsLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkY
  i5SZXBlYXRlZFR5cGVIAFIMcmVwZWF0ZWRUeXBlQg4KDHNlYWxlZF92YWx1ZUoECAEQAkoECAMQBEoECAQQBUoECAUQBkoECAYQB
  0oECAsQDEoECAwQDUoECA8QEEoECBAQESKsAQoHVHlwZVJlZhI8CgZwcmVmaXgYASABKAsyJC5zY2FsYS5tZXRhLmludGVybmFsL
  nNlbWFudGljZGIuVHlwZVIGcHJlZml4EhYKBnN5bWJvbBgCIAEoCVIGc3ltYm9sEksKDnR5cGVfYXJndW1lbnRzGAMgAygLMiQuc
  2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiLlR5cGVSDXR5cGVBcmd1bWVudHMiYgoKU2luZ2xlVHlwZRI8CgZwcmVmaXgYA
  SABKAsyJC5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIuVHlwZVIGcHJlZml4EhYKBnN5bWJvbBgCIAEoCVIGc3ltYm9sI
  iIKCFRoaXNUeXBlEhYKBnN5bWJvbBgBIAEoCVIGc3ltYm9sImEKCVN1cGVyVHlwZRI8CgZwcmVmaXgYASABKAsyJC5zY2FsYS5tZ
  XRhLmludGVybmFsLnNlbWFudGljZGIuVHlwZVIGcHJlZml4EhYKBnN5bWJvbBgCIAEoCVIGc3ltYm9sIlQKDENvbnN0YW50VHlwZ
  RJECghjb25zdGFudBgBIAEoCzIoLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYi5Db25zdGFudFIIY29uc3RhbnQiTgoQS
  W50ZXJzZWN0aW9uVHlwZRI6CgV0eXBlcxgBIAMoCzIkLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYi5UeXBlUgV0eXBlc
  yJHCglVbmlvblR5cGUSOgoFdHlwZXMYASADKAsyJC5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIuVHlwZVIFdHlwZXMiR
  goIV2l0aFR5cGUSOgoFdHlwZXMYASADKAsyJC5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIuVHlwZVIFdHlwZXMipQEKD
  lN0cnVjdHVyYWxUeXBlEjYKA3RwZRgEIAEoCzIkLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYi5UeXBlUgN0cGUSSQoMZ
  GVjbGFyYXRpb25zGAUgASgLMiUuc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiLlNjb3BlUgxkZWNsYXJhdGlvbnNKBAgBE
  AJKBAgCEANKBAgDEAQimwEKDUFubm90YXRlZFR5cGUSTAoLYW5ub3RhdGlvbnMYAyADKAsyKi5zY2FsYS5tZXRhLmludGVybmFsL
  nNlbWFudGljZGIuQW5ub3RhdGlvblILYW5ub3RhdGlvbnMSNgoDdHBlGAEgASgLMiQuc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hb
  nRpY2RiLlR5cGVSA3RwZUoECAIQAyKaAQoPRXhpc3RlbnRpYWxUeXBlEjYKA3RwZRgBIAEoCzIkLnNjYWxhLm1ldGEuaW50ZXJuY
  Wwuc2VtYW50aWNkYi5UeXBlUgN0cGUSSQoMZGVjbGFyYXRpb25zGAMgASgLMiUuc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY
  2RiLlNjb3BlUgxkZWNsYXJhdGlvbnNKBAgCEAMinQEKDVVuaXZlcnNhbFR5cGUSTgoPdHlwZV9wYXJhbWV0ZXJzGAMgASgLMiUuc
  2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiLlNjb3BlUg50eXBlUGFyYW1ldGVycxI2CgN0cGUYAiABKAsyJC5zY2FsYS5tZ
  XRhLmludGVybmFsLnNlbWFudGljZGIuVHlwZVIDdHBlSgQIARACIkQKCkJ5TmFtZVR5cGUSNgoDdHBlGAEgASgLMiQuc2NhbGEub
  WV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiLlR5cGVSA3RwZSJGCgxSZXBlYXRlZFR5cGUSNgoDdHBlGAEgASgLMiQuc2NhbGEubWV0Y
  S5pbnRlcm5hbC5zZW1hbnRpY2RiLlR5cGVSA3RwZSLOBwoIQ29uc3RhbnQSUgoMdW5pdENvbnN0YW50GAEgASgLMiwuc2NhbGEub
  WV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiLlVuaXRDb25zdGFudEgAUgx1bml0Q29uc3RhbnQSWwoPYm9vbGVhbkNvbnN0YW50GAIgA
  SgLMi8uc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiLkJvb2xlYW5Db25zdGFudEgAUg9ib29sZWFuQ29uc3RhbnQSUgoMY
  nl0ZUNvbnN0YW50GAMgASgLMiwuc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiLkJ5dGVDb25zdGFudEgAUgxieXRlQ29uc
  3RhbnQSVQoNc2hvcnRDb25zdGFudBgEIAEoCzItLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYi5TaG9ydENvbnN0YW50S
  ABSDXNob3J0Q29uc3RhbnQSUgoMY2hhckNvbnN0YW50GAUgASgLMiwuc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiLkNoY
  XJDb25zdGFudEgAUgxjaGFyQ29uc3RhbnQSTwoLaW50Q29uc3RhbnQYBiABKAsyKy5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFud
  GljZGIuSW50Q29uc3RhbnRIAFILaW50Q29uc3RhbnQSUgoMbG9uZ0NvbnN0YW50GAcgASgLMiwuc2NhbGEubWV0YS5pbnRlcm5hb
  C5zZW1hbnRpY2RiLkxvbmdDb25zdGFudEgAUgxsb25nQ29uc3RhbnQSVQoNZmxvYXRDb25zdGFudBgIIAEoCzItLnNjYWxhLm1ld
  GEuaW50ZXJuYWwuc2VtYW50aWNkYi5GbG9hdENvbnN0YW50SABSDWZsb2F0Q29uc3RhbnQSWAoOZG91YmxlQ29uc3RhbnQYCSABK
  AsyLi5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIuRG91YmxlQ29uc3RhbnRIAFIOZG91YmxlQ29uc3RhbnQSWAoOc3Rya
  W5nQ29uc3RhbnQYCiABKAsyLi5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIuU3RyaW5nQ29uc3RhbnRIAFIOc3RyaW5nQ
  29uc3RhbnQSUgoMbnVsbENvbnN0YW50GAsgASgLMiwuc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiLk51bGxDb25zdGFud
  EgAUgxudWxsQ29uc3RhbnRCDgoMc2VhbGVkX3ZhbHVlIg4KDFVuaXRDb25zdGFudCInCg9Cb29sZWFuQ29uc3RhbnQSFAoFdmFsd
  WUYASABKAhSBXZhbHVlIiQKDEJ5dGVDb25zdGFudBIUCgV2YWx1ZRgBIAEoBVIFdmFsdWUiJQoNU2hvcnRDb25zdGFudBIUCgV2Y
  Wx1ZRgBIAEoBVIFdmFsdWUiJAoMQ2hhckNvbnN0YW50EhQKBXZhbHVlGAEgASgFUgV2YWx1ZSIjCgtJbnRDb25zdGFudBIUCgV2Y
  Wx1ZRgBIAEoBVIFdmFsdWUiJAoMTG9uZ0NvbnN0YW50EhQKBXZhbHVlGAEgASgDUgV2YWx1ZSIlCg1GbG9hdENvbnN0YW50EhQKB
  XZhbHVlGAEgASgCUgV2YWx1ZSImCg5Eb3VibGVDb25zdGFudBIUCgV2YWx1ZRgBIAEoAVIFdmFsdWUiJgoOU3RyaW5nQ29uc3Rhb
  nQSFAoFdmFsdWUYASABKAlSBXZhbHVlIg4KDE51bGxDb25zdGFudCKDAwoJU2lnbmF0dXJlElgKDmNsYXNzU2lnbmF0dXJlGAEgA
  SgLMi4uc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiLkNsYXNzU2lnbmF0dXJlSABSDmNsYXNzU2lnbmF0dXJlElsKD21ld
  GhvZFNpZ25hdHVyZRgCIAEoCzIvLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYi5NZXRob2RTaWduYXR1cmVIAFIPbWV0a
  G9kU2lnbmF0dXJlElUKDXR5cGVTaWduYXR1cmUYAyABKAsyLS5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIuVHlwZVNpZ
  25hdHVyZUgAUg10eXBlU2lnbmF0dXJlElgKDnZhbHVlU2lnbmF0dXJlGAQgASgLMi4uc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hb
  nRpY2RiLlZhbHVlU2lnbmF0dXJlSABSDnZhbHVlU2lnbmF0dXJlQg4KDHNlYWxlZF92YWx1ZSKlAgoOQ2xhc3NTaWduYXR1cmUST
  goPdHlwZV9wYXJhbWV0ZXJzGAEgASgLMiUuc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiLlNjb3BlUg50eXBlUGFyYW1ld
  GVycxI+CgdwYXJlbnRzGAIgAygLMiQuc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiLlR5cGVSB3BhcmVudHMSOAoEc2VsZ
  hgDIAEoCzIkLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYi5UeXBlUgRzZWxmEkkKDGRlY2xhcmF0aW9ucxgEIAEoCzIlL
  nNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYi5TY29wZVIMZGVjbGFyYXRpb25zIvcBCg9NZXRob2RTaWduYXR1cmUSTgoPd
  HlwZV9wYXJhbWV0ZXJzGAEgASgLMiUuc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiLlNjb3BlUg50eXBlUGFyYW1ldGVyc
  xJNCg5wYXJhbWV0ZXJMaXN0cxgCIAMoCzIlLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYi5TY29wZVIOcGFyYW1ldGVyT
  GlzdHMSRQoLcmV0dXJuX3R5cGUYAyABKAsyJC5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIuVHlwZVIKcmV0dXJuVHlwZ
  SLtAQoNVHlwZVNpZ25hdHVyZRJOCg90eXBlX3BhcmFtZXRlcnMYASABKAsyJS5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZ
  GIuU2NvcGVSDnR5cGVQYXJhbWV0ZXJzEkUKC2xvd2VyX2JvdW5kGAIgASgLMiQuc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY
  2RiLlR5cGVSCmxvd2VyQm91bmQSRQoLdXBwZXJfYm91bmQYAyABKAsyJC5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIuV
  HlwZVIKdXBwZXJCb3VuZCJICg5WYWx1ZVNpZ25hdHVyZRI2CgN0cGUYASABKAsyJC5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFud
  GljZGIuVHlwZVIDdHBlIvkHChFTeW1ib2xJbmZvcm1hdGlvbhIWCgZzeW1ib2wYASABKAlSBnN5bWJvbBJECghsYW5ndWFnZRgQI
  AEoDjIoLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYi5MYW5ndWFnZVIIbGFuZ3VhZ2USSgoEa2luZBgDIAEoDjI2LnNjY
  WxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYi5TeW1ib2xJbmZvcm1hdGlvbi5LaW5kUgRraW5kEh4KCnByb3BlcnRpZXMYBCABK
  AVSCnByb3BlcnRpZXMSEgoEbmFtZRgFIAEoCVIEbmFtZRJHCglzaWduYXR1cmUYESABKAsyKS5zY2FsYS5tZXRhLmludGVybmFsL
  nNlbWFudGljZGIuU2lnbmF0dXJlUglzaWduYXR1cmUSTAoLYW5ub3RhdGlvbnMYDSADKAsyKi5zY2FsYS5tZXRhLmludGVybmFsL
  nNlbWFudGljZGIuQW5ub3RhdGlvblILYW5ub3RhdGlvbnMSUwoNYWNjZXNzaWJpbGl0eRgOIAEoCzItLnNjYWxhLm1ldGEuaW50Z
  XJuYWwuc2VtYW50aWNkYi5BY2Nlc3NpYmlsaXR5Ug1hY2Nlc3NpYmlsaXR5Io0CCgRLaW5kEhAKDFVOS05PV05fS0lORBAAEgkKB
  UxPQ0FMEBMSCQoFRklFTEQQFBIKCgZNRVRIT0QQAxIPCgtDT05TVFJVQ1RPUhAVEgkKBU1BQ1JPEAYSCAoEVFlQRRAHEg0KCVBBU
  kFNRVRFUhAIEhIKDlNFTEZfUEFSQU1FVEVSEBESEgoOVFlQRV9QQVJBTUVURVIQCRIKCgZPQkpFQ1QQChILCgdQQUNLQUdFEAsSE
  goOUEFDS0FHRV9PQkpFQ1QQDBIJCgVDTEFTUxANEgkKBVRSQUlUEA4SDQoJSU5URVJGQUNFEBIiBAgBEAEiBAgCEAIiBAgEEAQiB
  AgFEAUiBAgPEA8iBAgQEBAi0wEKCFByb3BlcnR5EhQKEFVOS05PV05fUFJPUEVSVFkQABIMCghBQlNUUkFDVBAEEgkKBUZJTkFME
  AgSCgoGU0VBTEVEEBASDAoISU1QTElDSVQQIBIICgRMQVpZEEASCQoEQ0FTRRCAARIOCglDT1ZBUklBTlQQgAISEgoNQ09OVFJBV
  kFSSUFOVBCABBIICgNWQUwQgAgSCAoDVkFSEIAQEgsKBlNUQVRJQxCAIBIMCgdQUklNQVJZEIBAEgoKBEVOVU0QgIABIgQIARABI
  gQIAhACSgQIAhADSgQIBhAHSgQIBxAISgQICBAJSgQICRAKSgQIChALSgQICxAMSgQIDBANSgQIDxAQIkQKCkFubm90YXRpb24SN
  goDdHBlGAEgASgLMiQuc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiLlR5cGVSA3RwZSKHAgoNQWNjZXNzaWJpbGl0eRJDC
  gN0YWcYASABKA4yMS5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIuQWNjZXNzaWJpbGl0eS5UYWdSA3RhZxIWCgZzeW1ib
  2wYAiABKAlSBnN5bWJvbCKYAQoDVGFnEhkKFVVOS05PV05fQUNDRVNTSUJJTElUWRAAEgsKB1BSSVZBVEUQARIQCgxQUklWQVRFX
  1RISVMQAhISCg5QUklWQVRFX1dJVEhJThADEg0KCVBST1RFQ1RFRBAEEhIKDlBST1RFQ1RFRF9USElTEAUSFAoQUFJPVEVDVEVEX
  1dJVEhJThAGEgoKBlBVQkxJQxAHIusBChBTeW1ib2xPY2N1cnJlbmNlEjsKBXJhbmdlGAEgASgLMiUuc2NhbGEubWV0YS5pbnRlc
  m5hbC5zZW1hbnRpY2RiLlJhbmdlUgVyYW5nZRIWCgZzeW1ib2wYAiABKAlSBnN5bWJvbBJJCgRyb2xlGAMgASgOMjUuc2NhbGEub
  WV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiLlN5bWJvbE9jY3VycmVuY2UuUm9sZVIEcm9sZSI3CgRSb2xlEhAKDFVOS05PV05fUk9MR
  RAAEg0KCVJFRkVSRU5DRRABEg4KCkRFRklOSVRJT04QAiKJAgoKRGlhZ25vc3RpYxI7CgVyYW5nZRgBIAEoCzIlLnNjYWxhLm1ld
  GEuaW50ZXJuYWwuc2VtYW50aWNkYi5SYW5nZVIFcmFuZ2USTwoIc2V2ZXJpdHkYAiABKA4yMy5zY2FsYS5tZXRhLmludGVybmFsL
  nNlbWFudGljZGIuRGlhZ25vc3RpYy5TZXZlcml0eVIIc2V2ZXJpdHkSGAoHbWVzc2FnZRgDIAEoCVIHbWVzc2FnZSJTCghTZXZlc
  ml0eRIUChBVTktOT1dOX1NFVkVSSVRZEAASCQoFRVJST1IQARILCgdXQVJOSU5HEAISDwoLSU5GT1JNQVRJT04QAxIICgRISU5UE
  AQiigEKCVN5bnRoZXRpYxI7CgVyYW5nZRgBIAEoCzIlLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYi5SYW5nZVIFcmFuZ
  2USQAoEdGV4dBgCIAEoCzIsLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYi5UZXh0RG9jdW1lbnRSBHRleHQqNgoGU2NoZ
  W1hEgoKBkxFR0FDWRAAEg8KC1NFTUFOVElDREIzEAMSDwoLU0VNQU5USUNEQjQQBCo1CghMYW5ndWFnZRIUChBVTktOT1dOX0xBT
  kdVQUdFEAASCQoFU0NBTEEQARIICgRKQVZBEAJiBnByb3RvMw=="""
      ).mkString)
  lazy val scalaDescriptor: _root_.scalapb.descriptors.FileDescriptor = {
    val scalaProto = com.google.protobuf.descriptor.FileDescriptorProto.parseFrom(ProtoBytes)
    _root_.scalapb.descriptors.FileDescriptor.buildFrom(scalaProto, dependencies.map(_.scalaDescriptor))
  }
  lazy val javaDescriptor: com.google.protobuf.Descriptors.FileDescriptor = {
    val javaProto = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(ProtoBytes)
    com.google.protobuf.Descriptors.FileDescriptor.buildFrom(javaProto, Array(
    ))
  }
  @deprecated("Use javaDescriptor instead. In a future version this will refer to scalaDescriptor.", "ScalaPB 0.5.47")
  def descriptor: com.google.protobuf.Descriptors.FileDescriptor = javaDescriptor
}