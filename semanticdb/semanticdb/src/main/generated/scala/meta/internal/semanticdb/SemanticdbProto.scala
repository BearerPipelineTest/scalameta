// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package scala.meta.internal.semanticdb

object SemanticdbProto extends _root_.scalapb.GeneratedFileObject {
  lazy val dependencies: Seq[_root_.scalapb.GeneratedFileObject] = Seq(
  )
  lazy val messagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq(
    scala.meta.internal.semanticdb.TextDocuments,
    scala.meta.internal.semanticdb.TextDocument,
    scala.meta.internal.semanticdb.Range,
    scala.meta.internal.semanticdb.Location,
    scala.meta.internal.semanticdb.Scope,
    scala.meta.internal.semanticdb.TypeMessage,
    scala.meta.internal.semanticdb.TypeRef,
    scala.meta.internal.semanticdb.SingletonType,
    scala.meta.internal.semanticdb.IntersectionType,
    scala.meta.internal.semanticdb.UnionType,
    scala.meta.internal.semanticdb.WithType,
    scala.meta.internal.semanticdb.StructuralType,
    scala.meta.internal.semanticdb.AnnotatedType,
    scala.meta.internal.semanticdb.ExistentialType,
    scala.meta.internal.semanticdb.UniversalType,
    scala.meta.internal.semanticdb.ByNameType,
    scala.meta.internal.semanticdb.RepeatedType,
    scala.meta.internal.semanticdb.SignatureMessage,
    scala.meta.internal.semanticdb.ClassSignature,
    scala.meta.internal.semanticdb.MethodSignature,
    scala.meta.internal.semanticdb.TypeSignature,
    scala.meta.internal.semanticdb.ValueSignature,
    scala.meta.internal.semanticdb.SymbolInformation,
    scala.meta.internal.semanticdb.Annotation,
    scala.meta.internal.semanticdb.Accessibility,
    scala.meta.internal.semanticdb.SymbolOccurrence,
    scala.meta.internal.semanticdb.Diagnostic,
    scala.meta.internal.semanticdb.Synthetic
  )
  private lazy val ProtoBytes: Array[Byte] =
      scalapb.Encoding.fromBase64(scala.collection.Seq(
  """CiZzZW1hbnRpY2RiL3NlbWFudGljZGIvc2VtYW50aWNkYi5wcm90bxIec2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiI
  lsKDVRleHREb2N1bWVudHMSSgoJZG9jdW1lbnRzGAEgAygLMiwuc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiLlRleHREb
  2N1bWVudFIJZG9jdW1lbnRzIpIECgxUZXh0RG9jdW1lbnQSPgoGc2NoZW1hGAEgASgOMiYuc2NhbGEubWV0YS5pbnRlcm5hbC5zZ
  W1hbnRpY2RiLlNjaGVtYVIGc2NoZW1hEhAKA3VyaRgCIAEoCVIDdXJpEhIKBHRleHQYAyABKAlSBHRleHQSEAoDbWQ1GAsgASgJU
  gNtZDUSRAoIbGFuZ3VhZ2UYCiABKA4yKC5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIuTGFuZ3VhZ2VSCGxhbmd1YWdlE
  ksKB3N5bWJvbHMYBSADKAsyMS5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIuU3ltYm9sSW5mb3JtYXRpb25SB3N5bWJvb
  HMSUgoLb2NjdXJyZW5jZXMYBiADKAsyMC5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIuU3ltYm9sT2NjdXJyZW5jZVILb
  2NjdXJyZW5jZXMSTAoLZGlhZ25vc3RpY3MYByADKAsyKi5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIuRGlhZ25vc3RpY
  1ILZGlhZ25vc3RpY3MSSQoKc3ludGhldGljcxgIIAMoCzIpLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYi5TeW50aGV0a
  WNSCnN5bnRoZXRpY3NKBAgEEAVKBAgJEAoijwEKBVJhbmdlEh0KCnN0YXJ0X2xpbmUYASABKAVSCXN0YXJ0TGluZRInCg9zdGFyd
  F9jaGFyYWN0ZXIYAiABKAVSDnN0YXJ0Q2hhcmFjdGVyEhkKCGVuZF9saW5lGAMgASgFUgdlbmRMaW5lEiMKDWVuZF9jaGFyYWN0Z
  XIYBCABKAVSDGVuZENoYXJhY3RlciJZCghMb2NhdGlvbhIQCgN1cmkYASABKAlSA3VyaRI7CgVyYW5nZRgCIAEoCzIlLnNjYWxhL
  m1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYi5SYW5nZVIFcmFuZ2UidAoFU2NvcGUSGgoIc3ltbGlua3MYASADKAlSCHN5bWxpbmtzE
  k8KCWhhcmRsaW5rcxgCIAMoCzIxLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYi5TeW1ib2xJbmZvcm1hdGlvblIJaGFyZ
  GxpbmtzItwHCgRUeXBlEkMKB3R5cGVSZWYYAiABKAsyJy5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIuVHlwZVJlZkgAU
  gd0eXBlUmVmElUKDXNpbmdsZXRvblR5cGUYECABKAsyLS5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIuU2luZ2xldG9uV
  HlwZUgAUg1zaW5nbGV0b25UeXBlEl4KEGludGVyc2VjdGlvblR5cGUYESABKAsyMC5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFud
  GljZGIuSW50ZXJzZWN0aW9uVHlwZUgAUhBpbnRlcnNlY3Rpb25UeXBlEkkKCXVuaW9uVHlwZRgSIAEoCzIpLnNjYWxhLm1ldGEua
  W50ZXJuYWwuc2VtYW50aWNkYi5VbmlvblR5cGVIAFIJdW5pb25UeXBlEkYKCHdpdGhUeXBlGBMgASgLMiguc2NhbGEubWV0YS5pb
  nRlcm5hbC5zZW1hbnRpY2RiLldpdGhUeXBlSABSCHdpdGhUeXBlElgKDnN0cnVjdHVyYWxUeXBlGAcgASgLMi4uc2NhbGEubWV0Y
  S5pbnRlcm5hbC5zZW1hbnRpY2RiLlN0cnVjdHVyYWxUeXBlSABSDnN0cnVjdHVyYWxUeXBlElUKDWFubm90YXRlZFR5cGUYCCABK
  AsyLS5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIuQW5ub3RhdGVkVHlwZUgAUg1hbm5vdGF0ZWRUeXBlElsKD2V4aXN0Z
  W50aWFsVHlwZRgJIAEoCzIvLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYi5FeGlzdGVudGlhbFR5cGVIAFIPZXhpc3Rlb
  nRpYWxUeXBlElUKDXVuaXZlcnNhbFR5cGUYCiABKAsyLS5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIuVW5pdmVyc2FsV
  HlwZUgAUg11bml2ZXJzYWxUeXBlEkwKCmJ5TmFtZVR5cGUYDSABKAsyKi5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIuQ
  nlOYW1lVHlwZUgAUgpieU5hbWVUeXBlElIKDHJlcGVhdGVkVHlwZRgOIAEoCzIsLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50a
  WNkYi5SZXBlYXRlZFR5cGVIAFIMcmVwZWF0ZWRUeXBlQg4KDHNlYWxlZF92YWx1ZUoECAEQAkoECAMQBEoECAQQBUoECAUQBkoEC
  AYQB0oECAsQDEoECAwQDUoECA8QECKsAQoHVHlwZVJlZhI8CgZwcmVmaXgYASABKAsyJC5zY2FsYS5tZXRhLmludGVybmFsLnNlb
  WFudGljZGIuVHlwZVIGcHJlZml4EhYKBnN5bWJvbBgCIAEoCVIGc3ltYm9sEksKDnR5cGVfYXJndW1lbnRzGAMgAygLMiQuc2Nhb
  GEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiLlR5cGVSDXR5cGVBcmd1bWVudHMilgMKDVNpbmdsZXRvblR5cGUSQwoDdGFnGAEgA
  SgOMjEuc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiLlNpbmdsZXRvblR5cGUuVGFnUgN0YWcSPAoGcHJlZml4GAIgASgLM
  iQuc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiLlR5cGVSBnByZWZpeBIWCgZzeW1ib2wYAyABKAlSBnN5bWJvbBIcCglwc
  mltaXRpdmUYBCABKANSCXByaW1pdGl2ZRIWCgZzdHJpbmcYBSABKAlSBnN0cmluZyKzAQoDVGFnEhUKEVVOS05PV05fU0lOR0xFV
  E9OEAASCgoGU1lNQk9MEAESCAoEVEhJUxACEgkKBVNVUEVSEAMSCAoEVU5JVBAEEgsKB0JPT0xFQU4QBRIICgRCWVRFEAYSCQoFU
  0hPUlQQBxIICgRDSEFSEAgSBwoDSU5UEAkSCAoETE9ORxAKEgkKBUZMT0FUEAsSCgoGRE9VQkxFEAwSCgoGU1RSSU5HEA0SCAoET
  lVMTBAOIk4KEEludGVyc2VjdGlvblR5cGUSOgoFdHlwZXMYASADKAsyJC5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIuV
  HlwZVIFdHlwZXMiRwoJVW5pb25UeXBlEjoKBXR5cGVzGAEgAygLMiQuc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiLlR5c
  GVSBXR5cGVzIkYKCFdpdGhUeXBlEjoKBXR5cGVzGAEgAygLMiQuc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiLlR5cGVSB
  XR5cGVzIqUBCg5TdHJ1Y3R1cmFsVHlwZRI2CgN0cGUYBCABKAsyJC5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIuVHlwZ
  VIDdHBlEkkKDGRlY2xhcmF0aW9ucxgFIAEoCzIlLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYi5TY29wZVIMZGVjbGFyY
  XRpb25zSgQIARACSgQIAhADSgQIAxAEIpsBCg1Bbm5vdGF0ZWRUeXBlEkwKC2Fubm90YXRpb25zGAMgAygLMiouc2NhbGEubWV0Y
  S5pbnRlcm5hbC5zZW1hbnRpY2RiLkFubm90YXRpb25SC2Fubm90YXRpb25zEjYKA3RwZRgBIAEoCzIkLnNjYWxhLm1ldGEuaW50Z
  XJuYWwuc2VtYW50aWNkYi5UeXBlUgN0cGVKBAgCEAMimgEKD0V4aXN0ZW50aWFsVHlwZRI2CgN0cGUYASABKAsyJC5zY2FsYS5tZ
  XRhLmludGVybmFsLnNlbWFudGljZGIuVHlwZVIDdHBlEkkKDGRlY2xhcmF0aW9ucxgDIAEoCzIlLnNjYWxhLm1ldGEuaW50ZXJuY
  Wwuc2VtYW50aWNkYi5TY29wZVIMZGVjbGFyYXRpb25zSgQIAhADIp0BCg1Vbml2ZXJzYWxUeXBlEk4KD3R5cGVfcGFyYW1ldGVyc
  xgDIAEoCzIlLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYi5TY29wZVIOdHlwZVBhcmFtZXRlcnMSNgoDdHBlGAIgASgLM
  iQuc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiLlR5cGVSA3RwZUoECAEQAiJECgpCeU5hbWVUeXBlEjYKA3RwZRgBIAEoC
  zIkLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYi5UeXBlUgN0cGUiRgoMUmVwZWF0ZWRUeXBlEjYKA3RwZRgBIAEoCzIkL
  nNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYi5UeXBlUgN0cGUigwMKCVNpZ25hdHVyZRJYCg5jbGFzc1NpZ25hdHVyZRgBI
  AEoCzIuLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYi5DbGFzc1NpZ25hdHVyZUgAUg5jbGFzc1NpZ25hdHVyZRJbCg9tZ
  XRob2RTaWduYXR1cmUYAiABKAsyLy5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIuTWV0aG9kU2lnbmF0dXJlSABSD21ld
  GhvZFNpZ25hdHVyZRJVCg10eXBlU2lnbmF0dXJlGAMgASgLMi0uc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiLlR5cGVTa
  WduYXR1cmVIAFINdHlwZVNpZ25hdHVyZRJYCg52YWx1ZVNpZ25hdHVyZRgEIAEoCzIuLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtY
  W50aWNkYi5WYWx1ZVNpZ25hdHVyZUgAUg52YWx1ZVNpZ25hdHVyZUIOCgxzZWFsZWRfdmFsdWUi6wEKDkNsYXNzU2lnbmF0dXJlE
  k4KD3R5cGVfcGFyYW1ldGVycxgBIAEoCzIlLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYi5TY29wZVIOdHlwZVBhcmFtZ
  XRlcnMSPgoHcGFyZW50cxgCIAMoCzIkLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYi5UeXBlUgdwYXJlbnRzEkkKDGRlY
  2xhcmF0aW9ucxgDIAEoCzIlLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYi5TY29wZVIMZGVjbGFyYXRpb25zIvcBCg9NZ
  XRob2RTaWduYXR1cmUSTgoPdHlwZV9wYXJhbWV0ZXJzGAEgASgLMiUuc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiLlNjb
  3BlUg50eXBlUGFyYW1ldGVycxJNCg5wYXJhbWV0ZXJMaXN0cxgCIAMoCzIlLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkY
  i5TY29wZVIOcGFyYW1ldGVyTGlzdHMSRQoLcmV0dXJuX3R5cGUYAyABKAsyJC5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZ
  GIuVHlwZVIKcmV0dXJuVHlwZSLtAQoNVHlwZVNpZ25hdHVyZRJOCg90eXBlX3BhcmFtZXRlcnMYASABKAsyJS5zY2FsYS5tZXRhL
  mludGVybmFsLnNlbWFudGljZGIuU2NvcGVSDnR5cGVQYXJhbWV0ZXJzEkUKC2xvd2VyX2JvdW5kGAIgASgLMiQuc2NhbGEubWV0Y
  S5pbnRlcm5hbC5zZW1hbnRpY2RiLlR5cGVSCmxvd2VyQm91bmQSRQoLdXBwZXJfYm91bmQYAyABKAsyJC5zY2FsYS5tZXRhLmlud
  GVybmFsLnNlbWFudGljZGIuVHlwZVIKdXBwZXJCb3VuZCJICg5WYWx1ZVNpZ25hdHVyZRI2CgN0cGUYASABKAsyJC5zY2FsYS5tZ
  XRhLmludGVybmFsLnNlbWFudGljZGIuVHlwZVIDdHBlIvkHChFTeW1ib2xJbmZvcm1hdGlvbhIWCgZzeW1ib2wYASABKAlSBnN5b
  WJvbBJECghsYW5ndWFnZRgQIAEoDjIoLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYi5MYW5ndWFnZVIIbGFuZ3VhZ2USS
  goEa2luZBgDIAEoDjI2LnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYi5TeW1ib2xJbmZvcm1hdGlvbi5LaW5kUgRraW5kE
  h4KCnByb3BlcnRpZXMYBCABKAVSCnByb3BlcnRpZXMSEgoEbmFtZRgFIAEoCVIEbmFtZRJHCglzaWduYXR1cmUYESABKAsyKS5zY
  2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIuU2lnbmF0dXJlUglzaWduYXR1cmUSTAoLYW5ub3RhdGlvbnMYDSADKAsyKi5zY
  2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIuQW5ub3RhdGlvblILYW5ub3RhdGlvbnMSUwoNYWNjZXNzaWJpbGl0eRgOIAEoC
  zItLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYi5BY2Nlc3NpYmlsaXR5Ug1hY2Nlc3NpYmlsaXR5Io0CCgRLaW5kEhAKD
  FVOS05PV05fS0lORBAAEgkKBUxPQ0FMEBMSCQoFRklFTEQQFBIKCgZNRVRIT0QQAxIPCgtDT05TVFJVQ1RPUhAVEgkKBU1BQ1JPE
  AYSCAoEVFlQRRAHEg0KCVBBUkFNRVRFUhAIEhIKDlNFTEZfUEFSQU1FVEVSEBESEgoOVFlQRV9QQVJBTUVURVIQCRIKCgZPQkpFQ
  1QQChILCgdQQUNLQUdFEAsSEgoOUEFDS0FHRV9PQkpFQ1QQDBIJCgVDTEFTUxANEgkKBVRSQUlUEA4SDQoJSU5URVJGQUNFEBIiB
  AgBEAEiBAgCEAIiBAgEEAQiBAgFEAUiBAgPEA8iBAgQEBAi0wEKCFByb3BlcnR5EhQKEFVOS05PV05fUFJPUEVSVFkQABIMCghBQ
  lNUUkFDVBAEEgkKBUZJTkFMEAgSCgoGU0VBTEVEEBASDAoISU1QTElDSVQQIBIICgRMQVpZEEASCQoEQ0FTRRCAARIOCglDT1ZBU
  klBTlQQgAISEgoNQ09OVFJBVkFSSUFOVBCABBIICgNWQUwQgAgSCAoDVkFSEIAQEgsKBlNUQVRJQxCAIBIMCgdQUklNQVJZEIBAE
  goKBEVOVU0QgIABIgQIARABIgQIAhACSgQIAhADSgQIBhAHSgQIBxAISgQICBAJSgQICRAKSgQIChALSgQICxAMSgQIDBANSgQID
  xAQIkQKCkFubm90YXRpb24SNgoDdHBlGAEgASgLMiQuc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiLlR5cGVSA3RwZSKHA
  goNQWNjZXNzaWJpbGl0eRJDCgN0YWcYASABKA4yMS5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIuQWNjZXNzaWJpbGl0e
  S5UYWdSA3RhZxIWCgZzeW1ib2wYAiABKAlSBnN5bWJvbCKYAQoDVGFnEhkKFVVOS05PV05fQUNDRVNTSUJJTElUWRAAEgsKB1BSS
  VZBVEUQARIQCgxQUklWQVRFX1RISVMQAhISCg5QUklWQVRFX1dJVEhJThADEg0KCVBST1RFQ1RFRBAEEhIKDlBST1RFQ1RFRF9US
  ElTEAUSFAoQUFJPVEVDVEVEX1dJVEhJThAGEgoKBlBVQkxJQxAHIusBChBTeW1ib2xPY2N1cnJlbmNlEjsKBXJhbmdlGAEgASgLM
  iUuc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiLlJhbmdlUgVyYW5nZRIWCgZzeW1ib2wYAiABKAlSBnN5bWJvbBJJCgRyb
  2xlGAMgASgOMjUuc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiLlN5bWJvbE9jY3VycmVuY2UuUm9sZVIEcm9sZSI3CgRSb
  2xlEhAKDFVOS05PV05fUk9MRRAAEg0KCVJFRkVSRU5DRRABEg4KCkRFRklOSVRJT04QAiKJAgoKRGlhZ25vc3RpYxI7CgVyYW5nZ
  RgBIAEoCzIlLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYi5SYW5nZVIFcmFuZ2USTwoIc2V2ZXJpdHkYAiABKA4yMy5zY
  2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIuRGlhZ25vc3RpYy5TZXZlcml0eVIIc2V2ZXJpdHkSGAoHbWVzc2FnZRgDIAEoC
  VIHbWVzc2FnZSJTCghTZXZlcml0eRIUChBVTktOT1dOX1NFVkVSSVRZEAASCQoFRVJST1IQARILCgdXQVJOSU5HEAISDwoLSU5GT
  1JNQVRJT04QAxIICgRISU5UEAQiigEKCVN5bnRoZXRpYxI7CgVyYW5nZRgBIAEoCzIlLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtY
  W50aWNkYi5SYW5nZVIFcmFuZ2USQAoEdGV4dBgCIAEoCzIsLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYi5UZXh0RG9jd
  W1lbnRSBHRleHQqNgoGU2NoZW1hEgoKBkxFR0FDWRAAEg8KC1NFTUFOVElDREIzEAMSDwoLU0VNQU5USUNEQjQQBCo1CghMYW5nd
  WFnZRIUChBVTktOT1dOX0xBTkdVQUdFEAASCQoFU0NBTEEQARIICgRKQVZBEAJiBnByb3RvMw=="""
      ).mkString)
  lazy val scalaDescriptor: _root_.scalapb.descriptors.FileDescriptor = {
    val scalaProto = com.google.protobuf.descriptor.FileDescriptorProto.parseFrom(ProtoBytes)
    _root_.scalapb.descriptors.FileDescriptor.buildFrom(scalaProto, dependencies.map(_.scalaDescriptor))
  }
  lazy val javaDescriptor: com.google.protobuf.Descriptors.FileDescriptor = {
    val javaProto = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(ProtoBytes)
    com.google.protobuf.Descriptors.FileDescriptor.buildFrom(javaProto, Array(
    ))
  }
  @deprecated("Use javaDescriptor instead. In a future version this will refer to scalaDescriptor.", "ScalaPB 0.5.47")
  def descriptor: com.google.protobuf.Descriptors.FileDescriptor = javaDescriptor
}