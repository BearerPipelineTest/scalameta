// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package scala.meta.internal.semanticdb

object SemanticdbProto extends _root_.scalapb.GeneratedFileObject {
  lazy val dependencies: Seq[_root_.scalapb.GeneratedFileObject] = Seq(
  )
  lazy val messagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq(
    scala.meta.internal.semanticdb.TextDocuments,
    scala.meta.internal.semanticdb.TextDocument,
    scala.meta.internal.semanticdb.Range,
    scala.meta.internal.semanticdb.Location,
    scala.meta.internal.semanticdb.Scope,
    scala.meta.internal.semanticdb.TypeMessage,
    scala.meta.internal.semanticdb.TypeRef,
    scala.meta.internal.semanticdb.SingleType,
    scala.meta.internal.semanticdb.ThisType,
    scala.meta.internal.semanticdb.SuperType,
    scala.meta.internal.semanticdb.ConstantType,
    scala.meta.internal.semanticdb.IntersectionType,
    scala.meta.internal.semanticdb.UnionType,
    scala.meta.internal.semanticdb.WithType,
    scala.meta.internal.semanticdb.StructuralType,
    scala.meta.internal.semanticdb.AnnotatedType,
    scala.meta.internal.semanticdb.ExistentialType,
    scala.meta.internal.semanticdb.UniversalType,
    scala.meta.internal.semanticdb.ByNameType,
    scala.meta.internal.semanticdb.RepeatedType,
    scala.meta.internal.semanticdb.ConstantMessage,
    scala.meta.internal.semanticdb.UnitConstant,
    scala.meta.internal.semanticdb.BooleanConstant,
    scala.meta.internal.semanticdb.ByteConstant,
    scala.meta.internal.semanticdb.ShortConstant,
    scala.meta.internal.semanticdb.CharConstant,
    scala.meta.internal.semanticdb.IntConstant,
    scala.meta.internal.semanticdb.LongConstant,
    scala.meta.internal.semanticdb.FloatConstant,
    scala.meta.internal.semanticdb.DoubleConstant,
    scala.meta.internal.semanticdb.StringConstant,
    scala.meta.internal.semanticdb.NullConstant,
    scala.meta.internal.semanticdb.SignatureMessage,
    scala.meta.internal.semanticdb.ClassSignature,
    scala.meta.internal.semanticdb.MethodSignature,
    scala.meta.internal.semanticdb.TypeSignature,
    scala.meta.internal.semanticdb.ValueSignature,
    scala.meta.internal.semanticdb.SymbolInformation,
    scala.meta.internal.semanticdb.Annotation,
    scala.meta.internal.semanticdb.Accessibility,
    scala.meta.internal.semanticdb.SymbolOccurrence,
    scala.meta.internal.semanticdb.Diagnostic,
    scala.meta.internal.semanticdb.Synthetic,
    scala.meta.internal.semanticdb.NewSynthetic,
    scala.meta.internal.semanticdb.TreeMessage,
    scala.meta.internal.semanticdb.ApplyTree,
    scala.meta.internal.semanticdb.FunctionTree,
    scala.meta.internal.semanticdb.IdTree,
    scala.meta.internal.semanticdb.LiteralTree,
    scala.meta.internal.semanticdb.MacroExpansionTree,
    scala.meta.internal.semanticdb.OriginalTree,
    scala.meta.internal.semanticdb.SelectTree,
    scala.meta.internal.semanticdb.TypeApplyTree
  )
  private lazy val ProtoBytes: Array[Byte] =
      scalapb.Encoding.fromBase64(scala.collection.Seq(
  """CiZzZW1hbnRpY2RiL3NlbWFudGljZGIvc2VtYW50aWNkYi5wcm90bxIec2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiI
  lsKDVRleHREb2N1bWVudHMSSgoJZG9jdW1lbnRzGAEgAygLMiwuc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiLlRleHREb
  2N1bWVudFIJZG9jdW1lbnRzIuYECgxUZXh0RG9jdW1lbnQSPgoGc2NoZW1hGAEgASgOMiYuc2NhbGEubWV0YS5pbnRlcm5hbC5zZ
  W1hbnRpY2RiLlNjaGVtYVIGc2NoZW1hEhAKA3VyaRgCIAEoCVIDdXJpEhIKBHRleHQYAyABKAlSBHRleHQSEAoDbWQ1GAsgASgJU
  gNtZDUSRAoIbGFuZ3VhZ2UYCiABKA4yKC5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIuTGFuZ3VhZ2VSCGxhbmd1YWdlE
  ksKB3N5bWJvbHMYBSADKAsyMS5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIuU3ltYm9sSW5mb3JtYXRpb25SB3N5bWJvb
  HMSUgoLb2NjdXJyZW5jZXMYBiADKAsyMC5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIuU3ltYm9sT2NjdXJyZW5jZVILb
  2NjdXJyZW5jZXMSTAoLZGlhZ25vc3RpY3MYByADKAsyKi5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIuRGlhZ25vc3RpY
  1ILZGlhZ25vc3RpY3MSSQoKc3ludGhldGljcxgIIAMoCzIpLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYi5TeW50aGV0a
  WNSCnN5bnRoZXRpY3MSUgoNbmV3U3ludGhldGljcxgMIAMoCzIsLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYi5OZXdTe
  W50aGV0aWNSDW5ld1N5bnRoZXRpY3NKBAgEEAVKBAgJEAoijwEKBVJhbmdlEh0KCnN0YXJ0X2xpbmUYASABKAVSCXN0YXJ0TGluZ
  RInCg9zdGFydF9jaGFyYWN0ZXIYAiABKAVSDnN0YXJ0Q2hhcmFjdGVyEhkKCGVuZF9saW5lGAMgASgFUgdlbmRMaW5lEiMKDWVuZ
  F9jaGFyYWN0ZXIYBCABKAVSDGVuZENoYXJhY3RlciJZCghMb2NhdGlvbhIQCgN1cmkYASABKAlSA3VyaRI7CgVyYW5nZRgCIAEoC
  zIlLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYi5SYW5nZVIFcmFuZ2UidAoFU2NvcGUSGgoIc3ltbGlua3MYASADKAlSC
  HN5bWxpbmtzEk8KCWhhcmRsaW5rcxgCIAMoCzIxLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYi5TeW1ib2xJbmZvcm1hd
  GlvblIJaGFyZGxpbmtzIsAJCgRUeXBlEkMKB3R5cGVSZWYYAiABKAsyJy5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIuV
  HlwZVJlZkgAUgd0eXBlUmVmEkwKCnNpbmdsZVR5cGUYFCABKAsyKi5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIuU2luZ
  2xlVHlwZUgAUgpzaW5nbGVUeXBlEkYKCHRoaXNUeXBlGBUgASgLMiguc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiLlRoa
  XNUeXBlSABSCHRoaXNUeXBlEkkKCXN1cGVyVHlwZRgWIAEoCzIpLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYi5TdXBlc
  lR5cGVIAFIJc3VwZXJUeXBlElIKDGNvbnN0YW50VHlwZRgXIAEoCzIsLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYi5Db
  25zdGFudFR5cGVIAFIMY29uc3RhbnRUeXBlEl4KEGludGVyc2VjdGlvblR5cGUYESABKAsyMC5zY2FsYS5tZXRhLmludGVybmFsL
  nNlbWFudGljZGIuSW50ZXJzZWN0aW9uVHlwZUgAUhBpbnRlcnNlY3Rpb25UeXBlEkkKCXVuaW9uVHlwZRgSIAEoCzIpLnNjYWxhL
  m1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYi5VbmlvblR5cGVIAFIJdW5pb25UeXBlEkYKCHdpdGhUeXBlGBMgASgLMiguc2NhbGEub
  WV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiLldpdGhUeXBlSABSCHdpdGhUeXBlElgKDnN0cnVjdHVyYWxUeXBlGAcgASgLMi4uc2Nhb
  GEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiLlN0cnVjdHVyYWxUeXBlSABSDnN0cnVjdHVyYWxUeXBlElUKDWFubm90YXRlZFR5c
  GUYCCABKAsyLS5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIuQW5ub3RhdGVkVHlwZUgAUg1hbm5vdGF0ZWRUeXBlElsKD
  2V4aXN0ZW50aWFsVHlwZRgJIAEoCzIvLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYi5FeGlzdGVudGlhbFR5cGVIAFIPZ
  Xhpc3RlbnRpYWxUeXBlElUKDXVuaXZlcnNhbFR5cGUYCiABKAsyLS5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIuVW5pd
  mVyc2FsVHlwZUgAUg11bml2ZXJzYWxUeXBlEkwKCmJ5TmFtZVR5cGUYDSABKAsyKi5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFud
  GljZGIuQnlOYW1lVHlwZUgAUgpieU5hbWVUeXBlElIKDHJlcGVhdGVkVHlwZRgOIAEoCzIsLnNjYWxhLm1ldGEuaW50ZXJuYWwuc
  2VtYW50aWNkYi5SZXBlYXRlZFR5cGVIAFIMcmVwZWF0ZWRUeXBlQg4KDHNlYWxlZF92YWx1ZUoECAEQAkoECAMQBEoECAQQBUoEC
  AUQBkoECAYQB0oECAsQDEoECAwQDUoECA8QEEoECBAQESKsAQoHVHlwZVJlZhI8CgZwcmVmaXgYASABKAsyJC5zY2FsYS5tZXRhL
  mludGVybmFsLnNlbWFudGljZGIuVHlwZVIGcHJlZml4EhYKBnN5bWJvbBgCIAEoCVIGc3ltYm9sEksKDnR5cGVfYXJndW1lbnRzG
  AMgAygLMiQuc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiLlR5cGVSDXR5cGVBcmd1bWVudHMiYgoKU2luZ2xlVHlwZRI8C
  gZwcmVmaXgYASABKAsyJC5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIuVHlwZVIGcHJlZml4EhYKBnN5bWJvbBgCIAEoC
  VIGc3ltYm9sIiIKCFRoaXNUeXBlEhYKBnN5bWJvbBgBIAEoCVIGc3ltYm9sImEKCVN1cGVyVHlwZRI8CgZwcmVmaXgYASABKAsyJ
  C5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIuVHlwZVIGcHJlZml4EhYKBnN5bWJvbBgCIAEoCVIGc3ltYm9sIlQKDENvb
  nN0YW50VHlwZRJECghjb25zdGFudBgBIAEoCzIoLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYi5Db25zdGFudFIIY29uc
  3RhbnQiTgoQSW50ZXJzZWN0aW9uVHlwZRI6CgV0eXBlcxgBIAMoCzIkLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYi5Ue
  XBlUgV0eXBlcyJHCglVbmlvblR5cGUSOgoFdHlwZXMYASADKAsyJC5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIuVHlwZ
  VIFdHlwZXMiRgoIV2l0aFR5cGUSOgoFdHlwZXMYASADKAsyJC5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIuVHlwZVIFd
  HlwZXMipQEKDlN0cnVjdHVyYWxUeXBlEjYKA3RwZRgEIAEoCzIkLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYi5UeXBlU
  gN0cGUSSQoMZGVjbGFyYXRpb25zGAUgASgLMiUuc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiLlNjb3BlUgxkZWNsYXJhd
  GlvbnNKBAgBEAJKBAgCEANKBAgDEAQimwEKDUFubm90YXRlZFR5cGUSTAoLYW5ub3RhdGlvbnMYAyADKAsyKi5zY2FsYS5tZXRhL
  mludGVybmFsLnNlbWFudGljZGIuQW5ub3RhdGlvblILYW5ub3RhdGlvbnMSNgoDdHBlGAEgASgLMiQuc2NhbGEubWV0YS5pbnRlc
  m5hbC5zZW1hbnRpY2RiLlR5cGVSA3RwZUoECAIQAyKaAQoPRXhpc3RlbnRpYWxUeXBlEjYKA3RwZRgBIAEoCzIkLnNjYWxhLm1ld
  GEuaW50ZXJuYWwuc2VtYW50aWNkYi5UeXBlUgN0cGUSSQoMZGVjbGFyYXRpb25zGAMgASgLMiUuc2NhbGEubWV0YS5pbnRlcm5hb
  C5zZW1hbnRpY2RiLlNjb3BlUgxkZWNsYXJhdGlvbnNKBAgCEAMinQEKDVVuaXZlcnNhbFR5cGUSTgoPdHlwZV9wYXJhbWV0ZXJzG
  AMgASgLMiUuc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiLlNjb3BlUg50eXBlUGFyYW1ldGVycxI2CgN0cGUYAiABKAsyJ
  C5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIuVHlwZVIDdHBlSgQIARACIkQKCkJ5TmFtZVR5cGUSNgoDdHBlGAEgASgLM
  iQuc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiLlR5cGVSA3RwZSJGCgxSZXBlYXRlZFR5cGUSNgoDdHBlGAEgASgLMiQuc
  2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiLlR5cGVSA3RwZSLOBwoIQ29uc3RhbnQSUgoMdW5pdENvbnN0YW50GAEgASgLM
  iwuc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiLlVuaXRDb25zdGFudEgAUgx1bml0Q29uc3RhbnQSWwoPYm9vbGVhbkNvb
  nN0YW50GAIgASgLMi8uc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiLkJvb2xlYW5Db25zdGFudEgAUg9ib29sZWFuQ29uc
  3RhbnQSUgoMYnl0ZUNvbnN0YW50GAMgASgLMiwuc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiLkJ5dGVDb25zdGFudEgAU
  gxieXRlQ29uc3RhbnQSVQoNc2hvcnRDb25zdGFudBgEIAEoCzItLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYi5TaG9yd
  ENvbnN0YW50SABSDXNob3J0Q29uc3RhbnQSUgoMY2hhckNvbnN0YW50GAUgASgLMiwuc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hb
  nRpY2RiLkNoYXJDb25zdGFudEgAUgxjaGFyQ29uc3RhbnQSTwoLaW50Q29uc3RhbnQYBiABKAsyKy5zY2FsYS5tZXRhLmludGVyb
  mFsLnNlbWFudGljZGIuSW50Q29uc3RhbnRIAFILaW50Q29uc3RhbnQSUgoMbG9uZ0NvbnN0YW50GAcgASgLMiwuc2NhbGEubWV0Y
  S5pbnRlcm5hbC5zZW1hbnRpY2RiLkxvbmdDb25zdGFudEgAUgxsb25nQ29uc3RhbnQSVQoNZmxvYXRDb25zdGFudBgIIAEoCzItL
  nNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYi5GbG9hdENvbnN0YW50SABSDWZsb2F0Q29uc3RhbnQSWAoOZG91YmxlQ29uc
  3RhbnQYCSABKAsyLi5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIuRG91YmxlQ29uc3RhbnRIAFIOZG91YmxlQ29uc3Rhb
  nQSWAoOc3RyaW5nQ29uc3RhbnQYCiABKAsyLi5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIuU3RyaW5nQ29uc3RhbnRIA
  FIOc3RyaW5nQ29uc3RhbnQSUgoMbnVsbENvbnN0YW50GAsgASgLMiwuc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiLk51b
  GxDb25zdGFudEgAUgxudWxsQ29uc3RhbnRCDgoMc2VhbGVkX3ZhbHVlIg4KDFVuaXRDb25zdGFudCInCg9Cb29sZWFuQ29uc3Rhb
  nQSFAoFdmFsdWUYASABKAhSBXZhbHVlIiQKDEJ5dGVDb25zdGFudBIUCgV2YWx1ZRgBIAEoBVIFdmFsdWUiJQoNU2hvcnRDb25zd
  GFudBIUCgV2YWx1ZRgBIAEoBVIFdmFsdWUiJAoMQ2hhckNvbnN0YW50EhQKBXZhbHVlGAEgASgFUgV2YWx1ZSIjCgtJbnRDb25zd
  GFudBIUCgV2YWx1ZRgBIAEoBVIFdmFsdWUiJAoMTG9uZ0NvbnN0YW50EhQKBXZhbHVlGAEgASgDUgV2YWx1ZSIlCg1GbG9hdENvb
  nN0YW50EhQKBXZhbHVlGAEgASgCUgV2YWx1ZSImCg5Eb3VibGVDb25zdGFudBIUCgV2YWx1ZRgBIAEoAVIFdmFsdWUiJgoOU3Rya
  W5nQ29uc3RhbnQSFAoFdmFsdWUYASABKAlSBXZhbHVlIg4KDE51bGxDb25zdGFudCKDAwoJU2lnbmF0dXJlElgKDmNsYXNzU2lnb
  mF0dXJlGAEgASgLMi4uc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiLkNsYXNzU2lnbmF0dXJlSABSDmNsYXNzU2lnbmF0d
  XJlElsKD21ldGhvZFNpZ25hdHVyZRgCIAEoCzIvLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYi5NZXRob2RTaWduYXR1c
  mVIAFIPbWV0aG9kU2lnbmF0dXJlElUKDXR5cGVTaWduYXR1cmUYAyABKAsyLS5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZ
  GIuVHlwZVNpZ25hdHVyZUgAUg10eXBlU2lnbmF0dXJlElgKDnZhbHVlU2lnbmF0dXJlGAQgASgLMi4uc2NhbGEubWV0YS5pbnRlc
  m5hbC5zZW1hbnRpY2RiLlZhbHVlU2lnbmF0dXJlSABSDnZhbHVlU2lnbmF0dXJlQg4KDHNlYWxlZF92YWx1ZSKlAgoOQ2xhc3NTa
  WduYXR1cmUSTgoPdHlwZV9wYXJhbWV0ZXJzGAEgASgLMiUuc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiLlNjb3BlUg50e
  XBlUGFyYW1ldGVycxI+CgdwYXJlbnRzGAIgAygLMiQuc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiLlR5cGVSB3BhcmVud
  HMSOAoEc2VsZhgDIAEoCzIkLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYi5UeXBlUgRzZWxmEkkKDGRlY2xhcmF0aW9uc
  xgEIAEoCzIlLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYi5TY29wZVIMZGVjbGFyYXRpb25zIvcBCg9NZXRob2RTaWduY
  XR1cmUSTgoPdHlwZV9wYXJhbWV0ZXJzGAEgASgLMiUuc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiLlNjb3BlUg50eXBlU
  GFyYW1ldGVycxJNCg5wYXJhbWV0ZXJMaXN0cxgCIAMoCzIlLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYi5TY29wZVIOc
  GFyYW1ldGVyTGlzdHMSRQoLcmV0dXJuX3R5cGUYAyABKAsyJC5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIuVHlwZVIKc
  mV0dXJuVHlwZSLtAQoNVHlwZVNpZ25hdHVyZRJOCg90eXBlX3BhcmFtZXRlcnMYASABKAsyJS5zY2FsYS5tZXRhLmludGVybmFsL
  nNlbWFudGljZGIuU2NvcGVSDnR5cGVQYXJhbWV0ZXJzEkUKC2xvd2VyX2JvdW5kGAIgASgLMiQuc2NhbGEubWV0YS5pbnRlcm5hb
  C5zZW1hbnRpY2RiLlR5cGVSCmxvd2VyQm91bmQSRQoLdXBwZXJfYm91bmQYAyABKAsyJC5zY2FsYS5tZXRhLmludGVybmFsLnNlb
  WFudGljZGIuVHlwZVIKdXBwZXJCb3VuZCJICg5WYWx1ZVNpZ25hdHVyZRI2CgN0cGUYASABKAsyJC5zY2FsYS5tZXRhLmludGVyb
  mFsLnNlbWFudGljZGIuVHlwZVIDdHBlIvkHChFTeW1ib2xJbmZvcm1hdGlvbhIWCgZzeW1ib2wYASABKAlSBnN5bWJvbBJECghsY
  W5ndWFnZRgQIAEoDjIoLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYi5MYW5ndWFnZVIIbGFuZ3VhZ2USSgoEa2luZBgDI
  AEoDjI2LnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYi5TeW1ib2xJbmZvcm1hdGlvbi5LaW5kUgRraW5kEh4KCnByb3Blc
  nRpZXMYBCABKAVSCnByb3BlcnRpZXMSEgoEbmFtZRgFIAEoCVIEbmFtZRJHCglzaWduYXR1cmUYESABKAsyKS5zY2FsYS5tZXRhL
  mludGVybmFsLnNlbWFudGljZGIuU2lnbmF0dXJlUglzaWduYXR1cmUSTAoLYW5ub3RhdGlvbnMYDSADKAsyKi5zY2FsYS5tZXRhL
  mludGVybmFsLnNlbWFudGljZGIuQW5ub3RhdGlvblILYW5ub3RhdGlvbnMSUwoNYWNjZXNzaWJpbGl0eRgOIAEoCzItLnNjYWxhL
  m1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYi5BY2Nlc3NpYmlsaXR5Ug1hY2Nlc3NpYmlsaXR5Io0CCgRLaW5kEhAKDFVOS05PV05fS
  0lORBAAEgkKBUxPQ0FMEBMSCQoFRklFTEQQFBIKCgZNRVRIT0QQAxIPCgtDT05TVFJVQ1RPUhAVEgkKBU1BQ1JPEAYSCAoEVFlQR
  RAHEg0KCVBBUkFNRVRFUhAIEhIKDlNFTEZfUEFSQU1FVEVSEBESEgoOVFlQRV9QQVJBTUVURVIQCRIKCgZPQkpFQ1QQChILCgdQQ
  UNLQUdFEAsSEgoOUEFDS0FHRV9PQkpFQ1QQDBIJCgVDTEFTUxANEgkKBVRSQUlUEA4SDQoJSU5URVJGQUNFEBIiBAgBEAEiBAgCE
  AIiBAgEEAQiBAgFEAUiBAgPEA8iBAgQEBAi0wEKCFByb3BlcnR5EhQKEFVOS05PV05fUFJPUEVSVFkQABIMCghBQlNUUkFDVBAEE
  gkKBUZJTkFMEAgSCgoGU0VBTEVEEBASDAoISU1QTElDSVQQIBIICgRMQVpZEEASCQoEQ0FTRRCAARIOCglDT1ZBUklBTlQQgAISE
  goNQ09OVFJBVkFSSUFOVBCABBIICgNWQUwQgAgSCAoDVkFSEIAQEgsKBlNUQVRJQxCAIBIMCgdQUklNQVJZEIBAEgoKBEVOVU0Qg
  IABIgQIARABIgQIAhACSgQIAhADSgQIBhAHSgQIBxAISgQICBAJSgQICRAKSgQIChALSgQICxAMSgQIDBANSgQIDxAQIkQKCkFub
  m90YXRpb24SNgoDdHBlGAEgASgLMiQuc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiLlR5cGVSA3RwZSKHAgoNQWNjZXNza
  WJpbGl0eRJDCgN0YWcYASABKA4yMS5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIuQWNjZXNzaWJpbGl0eS5UYWdSA3RhZ
  xIWCgZzeW1ib2wYAiABKAlSBnN5bWJvbCKYAQoDVGFnEhkKFVVOS05PV05fQUNDRVNTSUJJTElUWRAAEgsKB1BSSVZBVEUQARIQC
  gxQUklWQVRFX1RISVMQAhISCg5QUklWQVRFX1dJVEhJThADEg0KCVBST1RFQ1RFRBAEEhIKDlBST1RFQ1RFRF9USElTEAUSFAoQU
  FJPVEVDVEVEX1dJVEhJThAGEgoKBlBVQkxJQxAHIusBChBTeW1ib2xPY2N1cnJlbmNlEjsKBXJhbmdlGAEgASgLMiUuc2NhbGEub
  WV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiLlJhbmdlUgVyYW5nZRIWCgZzeW1ib2wYAiABKAlSBnN5bWJvbBJJCgRyb2xlGAMgASgOM
  jUuc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiLlN5bWJvbE9jY3VycmVuY2UuUm9sZVIEcm9sZSI3CgRSb2xlEhAKDFVOS
  05PV05fUk9MRRAAEg0KCVJFRkVSRU5DRRABEg4KCkRFRklOSVRJT04QAiKJAgoKRGlhZ25vc3RpYxI7CgVyYW5nZRgBIAEoCzIlL
  nNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYi5SYW5nZVIFcmFuZ2USTwoIc2V2ZXJpdHkYAiABKA4yMy5zY2FsYS5tZXRhL
  mludGVybmFsLnNlbWFudGljZGIuRGlhZ25vc3RpYy5TZXZlcml0eVIIc2V2ZXJpdHkSGAoHbWVzc2FnZRgDIAEoCVIHbWVzc2FnZ
  SJTCghTZXZlcml0eRIUChBVTktOT1dOX1NFVkVSSVRZEAASCQoFRVJST1IQARILCgdXQVJOSU5HEAISDwoLSU5GT1JNQVRJT04QA
  xIICgRISU5UEAQiigEKCVN5bnRoZXRpYxI7CgVyYW5nZRgBIAEoCzIlLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYi5SY
  W5nZVIFcmFuZ2USQAoEdGV4dBgCIAEoCzIsLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYi5UZXh0RG9jdW1lbnRSBHRle
  HQihQEKDE5ld1N5bnRoZXRpYxI7CgVyYW5nZRgBIAEoCzIlLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYi5SYW5nZVIFc
  mFuZ2USOAoEdHJlZRgCIAEoCzIkLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYi5UcmVlUgR0cmVlIucECgRUcmVlEkEKB
  WFwcGx5GAEgASgLMikuc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiLkFwcGx5VHJlZUgAUgVhcHBseRJKCghmdW5jdGlvb
  hgCIAEoCzIsLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYi5GdW5jdGlvblRyZWVIAFIIZnVuY3Rpb24SOAoCaWQYAyABK
  AsyJi5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIuSWRUcmVlSABSAmlkEkcKB2xpdGVyYWwYBCABKAsyKy5zY2FsYS5tZ
  XRhLmludGVybmFsLnNlbWFudGljZGIuTGl0ZXJhbFRyZWVIAFIHbGl0ZXJhbBJcCg5tYWNyb0V4cGFuc2lvbhgFIAEoCzIyLnNjY
  WxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYi5NYWNyb0V4cGFuc2lvblRyZWVIAFIObWFjcm9FeHBhbnNpb24SSgoIb3JpZ2luY
  WwYBiABKAsyLC5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIuT3JpZ2luYWxUcmVlSABSCG9yaWdpbmFsEkQKBnNlbGVjd
  BgHIAEoCzIqLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYi5TZWxlY3RUcmVlSABSBnNlbGVjdBJNCgl0eXBlQXBwbHkYC
  CABKAsyLS5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIuVHlwZUFwcGx5VHJlZUgAUgl0eXBlQXBwbHlCDgoMc2VhbGVkX
  3ZhbHVlInsKCUFwcGx5VHJlZRI0CgJmbhgBIAEoCzIkLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYi5UcmVlUgJmbhI4C
  gRhcmdzGAIgAygLMiQuc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiLlRyZWVSBGFyZ3MiiAEKDEZ1bmN0aW9uVHJlZRI+C
  gZwYXJhbXMYASADKAsyJi5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIuSWRUcmVlUgZwYXJhbXMSOAoEdGVybRgCIAEoC
  zIkLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYi5UcmVlUgR0ZXJtIhoKBklkVHJlZRIQCgNzeW0YASABKAlSA3N5bSJNC
  gtMaXRlcmFsVHJlZRI+CgVjb25zdBgBIAEoCzIoLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYi5Db25zdGFudFIFY29uc
  3QikAEKEk1hY3JvRXhwYW5zaW9uVHJlZRJACghleHBhbmRlZRgBIAEoCzIkLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkY
  i5UcmVlUghleHBhbmRlZRI4CgR0eXBlGAIgASgLMiQuc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiLlR5cGVSBHR5cGUiS
  woMT3JpZ2luYWxUcmVlEjsKBXJhbmdlGAEgASgLMiUuc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiLlJhbmdlUgVyYW5nZ
  SJ+CgpTZWxlY3RUcmVlEjgKBHF1YWwYASABKAsyJC5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIuVHJlZVIEcXVhbBI2C
  gJpZBgCIAEoCzImLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYi5JZFRyZWVSAmlkIoEBCg1UeXBlQXBwbHlUcmVlEjQKA
  mZuGAEgASgLMiQuc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiLlRyZWVSAmZuEjoKBXRhcmdzGAIgAygLMiQuc2NhbGEub
  WV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiLlR5cGVSBXRhcmdzKjYKBlNjaGVtYRIKCgZMRUdBQ1kQABIPCgtTRU1BTlRJQ0RCMxADE
  g8KC1NFTUFOVElDREI0EAQqNQoITGFuZ3VhZ2USFAoQVU5LTk9XTl9MQU5HVUFHRRAAEgkKBVNDQUxBEAESCAoESkFWQRACYgZwc
  m90bzM="""
      ).mkString)
  lazy val scalaDescriptor: _root_.scalapb.descriptors.FileDescriptor = {
    val scalaProto = com.google.protobuf.descriptor.FileDescriptorProto.parseFrom(ProtoBytes)
    _root_.scalapb.descriptors.FileDescriptor.buildFrom(scalaProto, dependencies.map(_.scalaDescriptor))
  }
  lazy val javaDescriptor: com.google.protobuf.Descriptors.FileDescriptor = {
    val javaProto = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(ProtoBytes)
    com.google.protobuf.Descriptors.FileDescriptor.buildFrom(javaProto, Array(
    ))
  }
  @deprecated("Use javaDescriptor instead. In a future version this will refer to scalaDescriptor.", "ScalaPB 0.5.47")
  def descriptor: com.google.protobuf.Descriptors.FileDescriptor = javaDescriptor
}