// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package scala.meta.internal.semanticdb3

/** @param tag
  *   reserved 3, 4, 5, 6;
  */
@SerialVersionUID(0L)
final case class Type(
    tag: scala.meta.internal.semanticdb3.Type.Tag = scala.meta.internal.semanticdb3.Type.Tag.UNKNOWN_TYPE,
    typeRef: _root_.scala.Option[scala.meta.internal.semanticdb3.TypeRef] = None,
    singletonType: _root_.scala.Option[scala.meta.internal.semanticdb3.SingletonType] = None,
    intersectionType: _root_.scala.Option[scala.meta.internal.semanticdb3.IntersectionType] = None,
    unionType: _root_.scala.Option[scala.meta.internal.semanticdb3.UnionType] = None,
    withType: _root_.scala.Option[scala.meta.internal.semanticdb3.WithType] = None,
    structuralType: _root_.scala.Option[scala.meta.internal.semanticdb3.StructuralType] = None,
    annotatedType: _root_.scala.Option[scala.meta.internal.semanticdb3.AnnotatedType] = None,
    existentialType: _root_.scala.Option[scala.meta.internal.semanticdb3.ExistentialType] = None,
    universalType: _root_.scala.Option[scala.meta.internal.semanticdb3.UniversalType] = None,
    classInfoType: _root_.scala.Option[scala.meta.internal.semanticdb3.ClassInfoType] = None,
    methodType: _root_.scala.Option[scala.meta.internal.semanticdb3.MethodType] = None,
    byNameType: _root_.scala.Option[scala.meta.internal.semanticdb3.ByNameType] = None,
    repeatedType: _root_.scala.Option[scala.meta.internal.semanticdb3.RepeatedType] = None,
    typeType: _root_.scala.Option[scala.meta.internal.semanticdb3.TypeType] = None
    ) extends scalapb.GeneratedMessage with scalapb.Message[Type] with scalapb.lenses.Updatable[Type] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = tag
        if (__value != scala.meta.internal.semanticdb3.Type.Tag.UNKNOWN_TYPE) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(1, __value.value)
        }
      };
      if (typeRef.isDefined) {
        val __value = typeRef.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (singletonType.isDefined) {
        val __value = singletonType.get
        __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (intersectionType.isDefined) {
        val __value = intersectionType.get
        __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (unionType.isDefined) {
        val __value = unionType.get
        __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (withType.isDefined) {
        val __value = withType.get
        __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (structuralType.isDefined) {
        val __value = structuralType.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (annotatedType.isDefined) {
        val __value = annotatedType.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (existentialType.isDefined) {
        val __value = existentialType.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (universalType.isDefined) {
        val __value = universalType.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (classInfoType.isDefined) {
        val __value = classInfoType.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (methodType.isDefined) {
        val __value = methodType.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (byNameType.isDefined) {
        val __value = byNameType.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (repeatedType.isDefined) {
        val __value = repeatedType.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (typeType.isDefined) {
        val __value = typeType.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = tag
        if (__v != scala.meta.internal.semanticdb3.Type.Tag.UNKNOWN_TYPE) {
          _output__.writeEnum(1, __v.value)
        }
      };
      typeRef.foreach { __v =>
        val __m = __v
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      structuralType.foreach { __v =>
        val __m = __v
        _output__.writeTag(7, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      annotatedType.foreach { __v =>
        val __m = __v
        _output__.writeTag(8, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      existentialType.foreach { __v =>
        val __m = __v
        _output__.writeTag(9, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      universalType.foreach { __v =>
        val __m = __v
        _output__.writeTag(10, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      classInfoType.foreach { __v =>
        val __m = __v
        _output__.writeTag(11, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      methodType.foreach { __v =>
        val __m = __v
        _output__.writeTag(12, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      byNameType.foreach { __v =>
        val __m = __v
        _output__.writeTag(13, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      repeatedType.foreach { __v =>
        val __m = __v
        _output__.writeTag(14, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      typeType.foreach { __v =>
        val __m = __v
        _output__.writeTag(15, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      singletonType.foreach { __v =>
        val __m = __v
        _output__.writeTag(16, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      intersectionType.foreach { __v =>
        val __m = __v
        _output__.writeTag(17, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unionType.foreach { __v =>
        val __m = __v
        _output__.writeTag(18, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      withType.foreach { __v =>
        val __m = __v
        _output__.writeTag(19, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb3.Type = {
      var __tag = this.tag
      var __typeRef = this.typeRef
      var __singletonType = this.singletonType
      var __intersectionType = this.intersectionType
      var __unionType = this.unionType
      var __withType = this.withType
      var __structuralType = this.structuralType
      var __annotatedType = this.annotatedType
      var __existentialType = this.existentialType
      var __universalType = this.universalType
      var __classInfoType = this.classInfoType
      var __methodType = this.methodType
      var __byNameType = this.byNameType
      var __repeatedType = this.repeatedType
      var __typeType = this.typeType
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __tag = scala.meta.internal.semanticdb3.Type.Tag.fromValue(_input__.readEnum())
          case 18 =>
            __typeRef = Option(_root_.scalapb.LiteParser.readMessage(_input__, __typeRef.getOrElse(scala.meta.internal.semanticdb3.TypeRef.defaultInstance)))
          case 130 =>
            __singletonType = Option(_root_.scalapb.LiteParser.readMessage(_input__, __singletonType.getOrElse(scala.meta.internal.semanticdb3.SingletonType.defaultInstance)))
          case 138 =>
            __intersectionType = Option(_root_.scalapb.LiteParser.readMessage(_input__, __intersectionType.getOrElse(scala.meta.internal.semanticdb3.IntersectionType.defaultInstance)))
          case 146 =>
            __unionType = Option(_root_.scalapb.LiteParser.readMessage(_input__, __unionType.getOrElse(scala.meta.internal.semanticdb3.UnionType.defaultInstance)))
          case 154 =>
            __withType = Option(_root_.scalapb.LiteParser.readMessage(_input__, __withType.getOrElse(scala.meta.internal.semanticdb3.WithType.defaultInstance)))
          case 58 =>
            __structuralType = Option(_root_.scalapb.LiteParser.readMessage(_input__, __structuralType.getOrElse(scala.meta.internal.semanticdb3.StructuralType.defaultInstance)))
          case 66 =>
            __annotatedType = Option(_root_.scalapb.LiteParser.readMessage(_input__, __annotatedType.getOrElse(scala.meta.internal.semanticdb3.AnnotatedType.defaultInstance)))
          case 74 =>
            __existentialType = Option(_root_.scalapb.LiteParser.readMessage(_input__, __existentialType.getOrElse(scala.meta.internal.semanticdb3.ExistentialType.defaultInstance)))
          case 82 =>
            __universalType = Option(_root_.scalapb.LiteParser.readMessage(_input__, __universalType.getOrElse(scala.meta.internal.semanticdb3.UniversalType.defaultInstance)))
          case 90 =>
            __classInfoType = Option(_root_.scalapb.LiteParser.readMessage(_input__, __classInfoType.getOrElse(scala.meta.internal.semanticdb3.ClassInfoType.defaultInstance)))
          case 98 =>
            __methodType = Option(_root_.scalapb.LiteParser.readMessage(_input__, __methodType.getOrElse(scala.meta.internal.semanticdb3.MethodType.defaultInstance)))
          case 106 =>
            __byNameType = Option(_root_.scalapb.LiteParser.readMessage(_input__, __byNameType.getOrElse(scala.meta.internal.semanticdb3.ByNameType.defaultInstance)))
          case 114 =>
            __repeatedType = Option(_root_.scalapb.LiteParser.readMessage(_input__, __repeatedType.getOrElse(scala.meta.internal.semanticdb3.RepeatedType.defaultInstance)))
          case 122 =>
            __typeType = Option(_root_.scalapb.LiteParser.readMessage(_input__, __typeType.getOrElse(scala.meta.internal.semanticdb3.TypeType.defaultInstance)))
          case tag => _input__.skipField(tag)
        }
      }
      scala.meta.internal.semanticdb3.Type(
          tag = __tag,
          typeRef = __typeRef,
          singletonType = __singletonType,
          intersectionType = __intersectionType,
          unionType = __unionType,
          withType = __withType,
          structuralType = __structuralType,
          annotatedType = __annotatedType,
          existentialType = __existentialType,
          universalType = __universalType,
          classInfoType = __classInfoType,
          methodType = __methodType,
          byNameType = __byNameType,
          repeatedType = __repeatedType,
          typeType = __typeType
      )
    }
    def withTag(__v: scala.meta.internal.semanticdb3.Type.Tag): Type = copy(tag = __v)
    def getTypeRef: scala.meta.internal.semanticdb3.TypeRef = typeRef.getOrElse(scala.meta.internal.semanticdb3.TypeRef.defaultInstance)
    def clearTypeRef: Type = copy(typeRef = None)
    def withTypeRef(__v: scala.meta.internal.semanticdb3.TypeRef): Type = copy(typeRef = Option(__v))
    def getSingletonType: scala.meta.internal.semanticdb3.SingletonType = singletonType.getOrElse(scala.meta.internal.semanticdb3.SingletonType.defaultInstance)
    def clearSingletonType: Type = copy(singletonType = None)
    def withSingletonType(__v: scala.meta.internal.semanticdb3.SingletonType): Type = copy(singletonType = Option(__v))
    def getIntersectionType: scala.meta.internal.semanticdb3.IntersectionType = intersectionType.getOrElse(scala.meta.internal.semanticdb3.IntersectionType.defaultInstance)
    def clearIntersectionType: Type = copy(intersectionType = None)
    def withIntersectionType(__v: scala.meta.internal.semanticdb3.IntersectionType): Type = copy(intersectionType = Option(__v))
    def getUnionType: scala.meta.internal.semanticdb3.UnionType = unionType.getOrElse(scala.meta.internal.semanticdb3.UnionType.defaultInstance)
    def clearUnionType: Type = copy(unionType = None)
    def withUnionType(__v: scala.meta.internal.semanticdb3.UnionType): Type = copy(unionType = Option(__v))
    def getWithType: scala.meta.internal.semanticdb3.WithType = withType.getOrElse(scala.meta.internal.semanticdb3.WithType.defaultInstance)
    def clearWithType: Type = copy(withType = None)
    def withWithType(__v: scala.meta.internal.semanticdb3.WithType): Type = copy(withType = Option(__v))
    def getStructuralType: scala.meta.internal.semanticdb3.StructuralType = structuralType.getOrElse(scala.meta.internal.semanticdb3.StructuralType.defaultInstance)
    def clearStructuralType: Type = copy(structuralType = None)
    def withStructuralType(__v: scala.meta.internal.semanticdb3.StructuralType): Type = copy(structuralType = Option(__v))
    def getAnnotatedType: scala.meta.internal.semanticdb3.AnnotatedType = annotatedType.getOrElse(scala.meta.internal.semanticdb3.AnnotatedType.defaultInstance)
    def clearAnnotatedType: Type = copy(annotatedType = None)
    def withAnnotatedType(__v: scala.meta.internal.semanticdb3.AnnotatedType): Type = copy(annotatedType = Option(__v))
    def getExistentialType: scala.meta.internal.semanticdb3.ExistentialType = existentialType.getOrElse(scala.meta.internal.semanticdb3.ExistentialType.defaultInstance)
    def clearExistentialType: Type = copy(existentialType = None)
    def withExistentialType(__v: scala.meta.internal.semanticdb3.ExistentialType): Type = copy(existentialType = Option(__v))
    def getUniversalType: scala.meta.internal.semanticdb3.UniversalType = universalType.getOrElse(scala.meta.internal.semanticdb3.UniversalType.defaultInstance)
    def clearUniversalType: Type = copy(universalType = None)
    def withUniversalType(__v: scala.meta.internal.semanticdb3.UniversalType): Type = copy(universalType = Option(__v))
    def getClassInfoType: scala.meta.internal.semanticdb3.ClassInfoType = classInfoType.getOrElse(scala.meta.internal.semanticdb3.ClassInfoType.defaultInstance)
    def clearClassInfoType: Type = copy(classInfoType = None)
    def withClassInfoType(__v: scala.meta.internal.semanticdb3.ClassInfoType): Type = copy(classInfoType = Option(__v))
    def getMethodType: scala.meta.internal.semanticdb3.MethodType = methodType.getOrElse(scala.meta.internal.semanticdb3.MethodType.defaultInstance)
    def clearMethodType: Type = copy(methodType = None)
    def withMethodType(__v: scala.meta.internal.semanticdb3.MethodType): Type = copy(methodType = Option(__v))
    def getByNameType: scala.meta.internal.semanticdb3.ByNameType = byNameType.getOrElse(scala.meta.internal.semanticdb3.ByNameType.defaultInstance)
    def clearByNameType: Type = copy(byNameType = None)
    def withByNameType(__v: scala.meta.internal.semanticdb3.ByNameType): Type = copy(byNameType = Option(__v))
    def getRepeatedType: scala.meta.internal.semanticdb3.RepeatedType = repeatedType.getOrElse(scala.meta.internal.semanticdb3.RepeatedType.defaultInstance)
    def clearRepeatedType: Type = copy(repeatedType = None)
    def withRepeatedType(__v: scala.meta.internal.semanticdb3.RepeatedType): Type = copy(repeatedType = Option(__v))
    def getTypeType: scala.meta.internal.semanticdb3.TypeType = typeType.getOrElse(scala.meta.internal.semanticdb3.TypeType.defaultInstance)
    def clearTypeType: Type = copy(typeType = None)
    def withTypeType(__v: scala.meta.internal.semanticdb3.TypeType): Type = copy(typeType = Option(__v))
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = tag.javaValueDescriptor
          if (__t.getNumber() != 0) __t else null
        }
        case 2 => typeRef.orNull
        case 16 => singletonType.orNull
        case 17 => intersectionType.orNull
        case 18 => unionType.orNull
        case 19 => withType.orNull
        case 7 => structuralType.orNull
        case 8 => annotatedType.orNull
        case 9 => existentialType.orNull
        case 10 => universalType.orNull
        case 11 => classInfoType.orNull
        case 12 => methodType.orNull
        case 13 => byNameType.orNull
        case 14 => repeatedType.orNull
        case 15 => typeType.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PEnum(tag.scalaValueDescriptor)
        case 2 => typeRef.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 16 => singletonType.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 17 => intersectionType.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 18 => unionType.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 19 => withType.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 7 => structuralType.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 8 => annotatedType.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 9 => existentialType.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 10 => universalType.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 11 => classInfoType.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 12 => methodType.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 13 => byNameType.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 14 => repeatedType.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 15 => typeType.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = scala.meta.internal.semanticdb3.Type
}

object Type extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb3.Type] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb3.Type] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): scala.meta.internal.semanticdb3.Type = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    scala.meta.internal.semanticdb3.Type(
      scala.meta.internal.semanticdb3.Type.Tag.fromValue(__fieldsMap.getOrElse(__fields.get(0), scala.meta.internal.semanticdb3.Type.Tag.UNKNOWN_TYPE.javaValueDescriptor).asInstanceOf[_root_.com.google.protobuf.Descriptors.EnumValueDescriptor].getNumber),
      __fieldsMap.get(__fields.get(1)).asInstanceOf[_root_.scala.Option[scala.meta.internal.semanticdb3.TypeRef]],
      __fieldsMap.get(__fields.get(2)).asInstanceOf[_root_.scala.Option[scala.meta.internal.semanticdb3.SingletonType]],
      __fieldsMap.get(__fields.get(3)).asInstanceOf[_root_.scala.Option[scala.meta.internal.semanticdb3.IntersectionType]],
      __fieldsMap.get(__fields.get(4)).asInstanceOf[_root_.scala.Option[scala.meta.internal.semanticdb3.UnionType]],
      __fieldsMap.get(__fields.get(5)).asInstanceOf[_root_.scala.Option[scala.meta.internal.semanticdb3.WithType]],
      __fieldsMap.get(__fields.get(6)).asInstanceOf[_root_.scala.Option[scala.meta.internal.semanticdb3.StructuralType]],
      __fieldsMap.get(__fields.get(7)).asInstanceOf[_root_.scala.Option[scala.meta.internal.semanticdb3.AnnotatedType]],
      __fieldsMap.get(__fields.get(8)).asInstanceOf[_root_.scala.Option[scala.meta.internal.semanticdb3.ExistentialType]],
      __fieldsMap.get(__fields.get(9)).asInstanceOf[_root_.scala.Option[scala.meta.internal.semanticdb3.UniversalType]],
      __fieldsMap.get(__fields.get(10)).asInstanceOf[_root_.scala.Option[scala.meta.internal.semanticdb3.ClassInfoType]],
      __fieldsMap.get(__fields.get(11)).asInstanceOf[_root_.scala.Option[scala.meta.internal.semanticdb3.MethodType]],
      __fieldsMap.get(__fields.get(12)).asInstanceOf[_root_.scala.Option[scala.meta.internal.semanticdb3.ByNameType]],
      __fieldsMap.get(__fields.get(13)).asInstanceOf[_root_.scala.Option[scala.meta.internal.semanticdb3.RepeatedType]],
      __fieldsMap.get(__fields.get(14)).asInstanceOf[_root_.scala.Option[scala.meta.internal.semanticdb3.TypeType]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb3.Type] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      scala.meta.internal.semanticdb3.Type(
        scala.meta.internal.semanticdb3.Type.Tag.fromValue(__fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scalapb.descriptors.EnumValueDescriptor]).getOrElse(scala.meta.internal.semanticdb3.Type.Tag.UNKNOWN_TYPE.scalaValueDescriptor).number),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb3.TypeRef]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(16).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb3.SingletonType]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(17).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb3.IntersectionType]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(18).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb3.UnionType]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(19).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb3.WithType]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb3.StructuralType]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb3.AnnotatedType]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(9).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb3.ExistentialType]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(10).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb3.UniversalType]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(11).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb3.ClassInfoType]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(12).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb3.MethodType]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(13).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb3.ByNameType]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(14).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb3.RepeatedType]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(15).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb3.TypeType]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = Semanticdb3Proto.javaDescriptor.getMessageTypes.get(5)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = Semanticdb3Proto.scalaDescriptor.messages(5)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 2 => __out = scala.meta.internal.semanticdb3.TypeRef
      case 16 => __out = scala.meta.internal.semanticdb3.SingletonType
      case 17 => __out = scala.meta.internal.semanticdb3.IntersectionType
      case 18 => __out = scala.meta.internal.semanticdb3.UnionType
      case 19 => __out = scala.meta.internal.semanticdb3.WithType
      case 7 => __out = scala.meta.internal.semanticdb3.StructuralType
      case 8 => __out = scala.meta.internal.semanticdb3.AnnotatedType
      case 9 => __out = scala.meta.internal.semanticdb3.ExistentialType
      case 10 => __out = scala.meta.internal.semanticdb3.UniversalType
      case 11 => __out = scala.meta.internal.semanticdb3.ClassInfoType
      case 12 => __out = scala.meta.internal.semanticdb3.MethodType
      case 13 => __out = scala.meta.internal.semanticdb3.ByNameType
      case 14 => __out = scala.meta.internal.semanticdb3.RepeatedType
      case 15 => __out = scala.meta.internal.semanticdb3.TypeType
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = {
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 1 => scala.meta.internal.semanticdb3.Type.Tag
    }
  }
  lazy val defaultInstance = scala.meta.internal.semanticdb3.Type(
  )
  sealed trait Tag extends _root_.scalapb.GeneratedEnum {
    type EnumType = Tag
    def isUnknownType: _root_.scala.Boolean = false
    def isTypeRef: _root_.scala.Boolean = false
    def isSingletonType: _root_.scala.Boolean = false
    def isIntersectionType: _root_.scala.Boolean = false
    def isUnionType: _root_.scala.Boolean = false
    def isWithType: _root_.scala.Boolean = false
    def isStructuralType: _root_.scala.Boolean = false
    def isAnnotatedType: _root_.scala.Boolean = false
    def isExistentialType: _root_.scala.Boolean = false
    def isUniversalType: _root_.scala.Boolean = false
    def isClassInfoType: _root_.scala.Boolean = false
    def isMethodType: _root_.scala.Boolean = false
    def isByNameType: _root_.scala.Boolean = false
    def isRepeatedType: _root_.scala.Boolean = false
    def isTypeType: _root_.scala.Boolean = false
    def companion: _root_.scalapb.GeneratedEnumCompanion[Tag] = scala.meta.internal.semanticdb3.Type.Tag
  }
  
  object Tag extends _root_.scalapb.GeneratedEnumCompanion[Tag] {
    implicit def enumCompanion: _root_.scalapb.GeneratedEnumCompanion[Tag] = this
    @SerialVersionUID(0L)
    case object UNKNOWN_TYPE extends Tag {
      val value = 0
      val index = 0
      val name = "UNKNOWN_TYPE"
      override def isUnknownType: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object TYPE_REF extends Tag {
      val value = 1
      val index = 1
      val name = "TYPE_REF"
      override def isTypeRef: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object SINGLETON_TYPE extends Tag {
      val value = 15
      val index = 2
      val name = "SINGLETON_TYPE"
      override def isSingletonType: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object INTERSECTION_TYPE extends Tag {
      val value = 16
      val index = 3
      val name = "INTERSECTION_TYPE"
      override def isIntersectionType: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object UNION_TYPE extends Tag {
      val value = 17
      val index = 4
      val name = "UNION_TYPE"
      override def isUnionType: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object WITH_TYPE extends Tag {
      val value = 18
      val index = 5
      val name = "WITH_TYPE"
      override def isWithType: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object STRUCTURAL_TYPE extends Tag {
      val value = 6
      val index = 6
      val name = "STRUCTURAL_TYPE"
      override def isStructuralType: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object ANNOTATED_TYPE extends Tag {
      val value = 7
      val index = 7
      val name = "ANNOTATED_TYPE"
      override def isAnnotatedType: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object EXISTENTIAL_TYPE extends Tag {
      val value = 8
      val index = 8
      val name = "EXISTENTIAL_TYPE"
      override def isExistentialType: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object UNIVERSAL_TYPE extends Tag {
      val value = 9
      val index = 9
      val name = "UNIVERSAL_TYPE"
      override def isUniversalType: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object CLASS_INFO_TYPE extends Tag {
      val value = 10
      val index = 10
      val name = "CLASS_INFO_TYPE"
      override def isClassInfoType: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object METHOD_TYPE extends Tag {
      val value = 11
      val index = 11
      val name = "METHOD_TYPE"
      override def isMethodType: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object BY_NAME_TYPE extends Tag {
      val value = 12
      val index = 12
      val name = "BY_NAME_TYPE"
      override def isByNameType: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object REPEATED_TYPE extends Tag {
      val value = 13
      val index = 13
      val name = "REPEATED_TYPE"
      override def isRepeatedType: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object TYPE_TYPE extends Tag {
      val value = 14
      val index = 14
      val name = "TYPE_TYPE"
      override def isTypeType: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    final case class Unrecognized(value: _root_.scala.Int) extends Tag with _root_.scalapb.UnrecognizedEnum
    
    lazy val values = scala.collection.Seq(UNKNOWN_TYPE, TYPE_REF, SINGLETON_TYPE, INTERSECTION_TYPE, UNION_TYPE, WITH_TYPE, STRUCTURAL_TYPE, ANNOTATED_TYPE, EXISTENTIAL_TYPE, UNIVERSAL_TYPE, CLASS_INFO_TYPE, METHOD_TYPE, BY_NAME_TYPE, REPEATED_TYPE, TYPE_TYPE)
    def fromValue(value: _root_.scala.Int): Tag = value match {
      case 0 => UNKNOWN_TYPE
      case 1 => TYPE_REF
      case 6 => STRUCTURAL_TYPE
      case 7 => ANNOTATED_TYPE
      case 8 => EXISTENTIAL_TYPE
      case 9 => UNIVERSAL_TYPE
      case 10 => CLASS_INFO_TYPE
      case 11 => METHOD_TYPE
      case 12 => BY_NAME_TYPE
      case 13 => REPEATED_TYPE
      case 14 => TYPE_TYPE
      case 15 => SINGLETON_TYPE
      case 16 => INTERSECTION_TYPE
      case 17 => UNION_TYPE
      case 18 => WITH_TYPE
      case __other => Unrecognized(__other)
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.EnumDescriptor = scala.meta.internal.semanticdb3.Type.javaDescriptor.getEnumTypes.get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.EnumDescriptor = scala.meta.internal.semanticdb3.Type.scalaDescriptor.enums(0)
  }
  implicit class TypeLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb3.Type]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb3.Type](_l) {
    def tag: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb3.Type.Tag] = field(_.tag)((c_, f_) => c_.copy(tag = f_))
    def typeRef: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb3.TypeRef] = field(_.getTypeRef)((c_, f_) => c_.copy(typeRef = Option(f_)))
    def optionalTypeRef: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[scala.meta.internal.semanticdb3.TypeRef]] = field(_.typeRef)((c_, f_) => c_.copy(typeRef = f_))
    def singletonType: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb3.SingletonType] = field(_.getSingletonType)((c_, f_) => c_.copy(singletonType = Option(f_)))
    def optionalSingletonType: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[scala.meta.internal.semanticdb3.SingletonType]] = field(_.singletonType)((c_, f_) => c_.copy(singletonType = f_))
    def intersectionType: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb3.IntersectionType] = field(_.getIntersectionType)((c_, f_) => c_.copy(intersectionType = Option(f_)))
    def optionalIntersectionType: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[scala.meta.internal.semanticdb3.IntersectionType]] = field(_.intersectionType)((c_, f_) => c_.copy(intersectionType = f_))
    def unionType: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb3.UnionType] = field(_.getUnionType)((c_, f_) => c_.copy(unionType = Option(f_)))
    def optionalUnionType: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[scala.meta.internal.semanticdb3.UnionType]] = field(_.unionType)((c_, f_) => c_.copy(unionType = f_))
    def withType: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb3.WithType] = field(_.getWithType)((c_, f_) => c_.copy(withType = Option(f_)))
    def optionalWithType: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[scala.meta.internal.semanticdb3.WithType]] = field(_.withType)((c_, f_) => c_.copy(withType = f_))
    def structuralType: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb3.StructuralType] = field(_.getStructuralType)((c_, f_) => c_.copy(structuralType = Option(f_)))
    def optionalStructuralType: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[scala.meta.internal.semanticdb3.StructuralType]] = field(_.structuralType)((c_, f_) => c_.copy(structuralType = f_))
    def annotatedType: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb3.AnnotatedType] = field(_.getAnnotatedType)((c_, f_) => c_.copy(annotatedType = Option(f_)))
    def optionalAnnotatedType: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[scala.meta.internal.semanticdb3.AnnotatedType]] = field(_.annotatedType)((c_, f_) => c_.copy(annotatedType = f_))
    def existentialType: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb3.ExistentialType] = field(_.getExistentialType)((c_, f_) => c_.copy(existentialType = Option(f_)))
    def optionalExistentialType: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[scala.meta.internal.semanticdb3.ExistentialType]] = field(_.existentialType)((c_, f_) => c_.copy(existentialType = f_))
    def universalType: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb3.UniversalType] = field(_.getUniversalType)((c_, f_) => c_.copy(universalType = Option(f_)))
    def optionalUniversalType: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[scala.meta.internal.semanticdb3.UniversalType]] = field(_.universalType)((c_, f_) => c_.copy(universalType = f_))
    def classInfoType: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb3.ClassInfoType] = field(_.getClassInfoType)((c_, f_) => c_.copy(classInfoType = Option(f_)))
    def optionalClassInfoType: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[scala.meta.internal.semanticdb3.ClassInfoType]] = field(_.classInfoType)((c_, f_) => c_.copy(classInfoType = f_))
    def methodType: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb3.MethodType] = field(_.getMethodType)((c_, f_) => c_.copy(methodType = Option(f_)))
    def optionalMethodType: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[scala.meta.internal.semanticdb3.MethodType]] = field(_.methodType)((c_, f_) => c_.copy(methodType = f_))
    def byNameType: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb3.ByNameType] = field(_.getByNameType)((c_, f_) => c_.copy(byNameType = Option(f_)))
    def optionalByNameType: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[scala.meta.internal.semanticdb3.ByNameType]] = field(_.byNameType)((c_, f_) => c_.copy(byNameType = f_))
    def repeatedType: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb3.RepeatedType] = field(_.getRepeatedType)((c_, f_) => c_.copy(repeatedType = Option(f_)))
    def optionalRepeatedType: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[scala.meta.internal.semanticdb3.RepeatedType]] = field(_.repeatedType)((c_, f_) => c_.copy(repeatedType = f_))
    def typeType: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb3.TypeType] = field(_.getTypeType)((c_, f_) => c_.copy(typeType = Option(f_)))
    def optionalTypeType: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[scala.meta.internal.semanticdb3.TypeType]] = field(_.typeType)((c_, f_) => c_.copy(typeType = f_))
  }
  final val TAG_FIELD_NUMBER = 1
  final val TYPEREF_FIELD_NUMBER = 2
  final val SINGLETONTYPE_FIELD_NUMBER = 16
  final val INTERSECTIONTYPE_FIELD_NUMBER = 17
  final val UNIONTYPE_FIELD_NUMBER = 18
  final val WITHTYPE_FIELD_NUMBER = 19
  final val STRUCTURALTYPE_FIELD_NUMBER = 7
  final val ANNOTATEDTYPE_FIELD_NUMBER = 8
  final val EXISTENTIALTYPE_FIELD_NUMBER = 9
  final val UNIVERSALTYPE_FIELD_NUMBER = 10
  final val CLASSINFOTYPE_FIELD_NUMBER = 11
  final val METHODTYPE_FIELD_NUMBER = 12
  final val BYNAMETYPE_FIELD_NUMBER = 13
  final val REPEATEDTYPE_FIELD_NUMBER = 14
  final val TYPETYPE_FIELD_NUMBER = 15
}
