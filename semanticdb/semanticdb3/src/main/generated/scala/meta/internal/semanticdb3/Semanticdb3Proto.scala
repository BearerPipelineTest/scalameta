// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package scala.meta.internal.semanticdb3

object Semanticdb3Proto extends _root_.scalapb.GeneratedFileObject {
  lazy val dependencies: Seq[_root_.scalapb.GeneratedFileObject] = Seq(
  )
  lazy val messagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq(
    scala.meta.internal.semanticdb3.TextDocuments,
    scala.meta.internal.semanticdb3.TextDocument,
    scala.meta.internal.semanticdb3.Range,
    scala.meta.internal.semanticdb3.Location,
    scala.meta.internal.semanticdb3.Scope,
    scala.meta.internal.semanticdb3.TypeMessage,
    scala.meta.internal.semanticdb3.TypeRef,
    scala.meta.internal.semanticdb3.SingletonType,
    scala.meta.internal.semanticdb3.IntersectionType,
    scala.meta.internal.semanticdb3.UnionType,
    scala.meta.internal.semanticdb3.WithType,
    scala.meta.internal.semanticdb3.StructuralType,
    scala.meta.internal.semanticdb3.AnnotatedType,
    scala.meta.internal.semanticdb3.ExistentialType,
    scala.meta.internal.semanticdb3.UniversalType,
    scala.meta.internal.semanticdb3.ClassInfoType,
    scala.meta.internal.semanticdb3.MethodType,
    scala.meta.internal.semanticdb3.ByNameType,
    scala.meta.internal.semanticdb3.RepeatedType,
    scala.meta.internal.semanticdb3.TypeType,
    scala.meta.internal.semanticdb3.SymbolInformation,
    scala.meta.internal.semanticdb3.Annotation,
    scala.meta.internal.semanticdb3.Accessibility,
    scala.meta.internal.semanticdb3.SymbolOccurrence,
    scala.meta.internal.semanticdb3.Diagnostic,
    scala.meta.internal.semanticdb3.Synthetic
  )
  private lazy val ProtoBytes: Array[Byte] =
      scalapb.Encoding.fromBase64(scala.collection.Seq(
  """CihzZW1hbnRpY2RiL3NlbWFudGljZGIzL3NlbWFudGljZGIzLnByb3RvEh9zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZ
  GIzIlwKDVRleHREb2N1bWVudHMSSwoJZG9jdW1lbnRzGAEgAygLMi0uc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiMy5UZ
  Xh0RG9jdW1lbnRSCWRvY3VtZW50cyKYBAoMVGV4dERvY3VtZW50Ej8KBnNjaGVtYRgBIAEoDjInLnNjYWxhLm1ldGEuaW50ZXJuY
  Wwuc2VtYW50aWNkYjMuU2NoZW1hUgZzY2hlbWESEAoDdXJpGAIgASgJUgN1cmkSEgoEdGV4dBgDIAEoCVIEdGV4dBIQCgNtZDUYC
  yABKAlSA21kNRJFCghsYW5ndWFnZRgKIAEoDjIpLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYjMuTGFuZ3VhZ2VSCGxhb
  md1YWdlEkwKB3N5bWJvbHMYBSADKAsyMi5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIzLlN5bWJvbEluZm9ybWF0aW9uU
  gdzeW1ib2xzElMKC29jY3VycmVuY2VzGAYgAygLMjEuc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiMy5TeW1ib2xPY2N1c
  nJlbmNlUgtvY2N1cnJlbmNlcxJNCgtkaWFnbm9zdGljcxgHIAMoCzIrLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYjMuR
  GlhZ25vc3RpY1ILZGlhZ25vc3RpY3MSSgoKc3ludGhldGljcxgIIAMoCzIqLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkY
  jMuU3ludGhldGljUgpzeW50aGV0aWNzSgQIBBAFSgQICRAKIo8BCgVSYW5nZRIdCgpzdGFydF9saW5lGAEgASgFUglzdGFydExpb
  mUSJwoPc3RhcnRfY2hhcmFjdGVyGAIgASgFUg5zdGFydENoYXJhY3RlchIZCghlbmRfbGluZRgDIAEoBVIHZW5kTGluZRIjCg1lb
  mRfY2hhcmFjdGVyGAQgASgFUgxlbmRDaGFyYWN0ZXIiWgoITG9jYXRpb24SEAoDdXJpGAEgASgJUgN1cmkSPAoFcmFuZ2UYAiABK
  AsyJi5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIzLlJhbmdlUgVyYW5nZSJ1CgVTY29wZRIaCghzeW1saW5rcxgBIAMoC
  VIIc3ltbGlua3MSUAoJaGFyZGxpbmtzGAIgAygLMjIuc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiMy5TeW1ib2xJbmZvc
  m1hdGlvblIJaGFyZGxpbmtzIqcJCgRUeXBlEkQKB3R5cGVSZWYYAiABKAsyKC5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZ
  GIzLlR5cGVSZWZIAFIHdHlwZVJlZhJWCg1zaW5nbGV0b25UeXBlGBAgASgLMi4uc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY
  2RiMy5TaW5nbGV0b25UeXBlSABSDXNpbmdsZXRvblR5cGUSXwoQaW50ZXJzZWN0aW9uVHlwZRgRIAEoCzIxLnNjYWxhLm1ldGEua
  W50ZXJuYWwuc2VtYW50aWNkYjMuSW50ZXJzZWN0aW9uVHlwZUgAUhBpbnRlcnNlY3Rpb25UeXBlEkoKCXVuaW9uVHlwZRgSIAEoC
  zIqLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYjMuVW5pb25UeXBlSABSCXVuaW9uVHlwZRJHCgh3aXRoVHlwZRgTIAEoC
  zIpLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYjMuV2l0aFR5cGVIAFIId2l0aFR5cGUSWQoOc3RydWN0dXJhbFR5cGUYB
  yABKAsyLy5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIzLlN0cnVjdHVyYWxUeXBlSABSDnN0cnVjdHVyYWxUeXBlElYKD
  WFubm90YXRlZFR5cGUYCCABKAsyLi5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIzLkFubm90YXRlZFR5cGVIAFINYW5ub
  3RhdGVkVHlwZRJcCg9leGlzdGVudGlhbFR5cGUYCSABKAsyMC5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIzLkV4aXN0Z
  W50aWFsVHlwZUgAUg9leGlzdGVudGlhbFR5cGUSVgoNdW5pdmVyc2FsVHlwZRgKIAEoCzIuLnNjYWxhLm1ldGEuaW50ZXJuYWwuc
  2VtYW50aWNkYjMuVW5pdmVyc2FsVHlwZUgAUg11bml2ZXJzYWxUeXBlElYKDWNsYXNzSW5mb1R5cGUYCyABKAsyLi5zY2FsYS5tZ
  XRhLmludGVybmFsLnNlbWFudGljZGIzLkNsYXNzSW5mb1R5cGVIAFINY2xhc3NJbmZvVHlwZRJNCgptZXRob2RUeXBlGAwgASgLM
  isuc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiMy5NZXRob2RUeXBlSABSCm1ldGhvZFR5cGUSTQoKYnlOYW1lVHlwZRgNI
  AEoCzIrLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYjMuQnlOYW1lVHlwZUgAUgpieU5hbWVUeXBlElMKDHJlcGVhdGVkV
  HlwZRgOIAEoCzItLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYjMuUmVwZWF0ZWRUeXBlSABSDHJlcGVhdGVkVHlwZRJHC
  gh0eXBlVHlwZRgPIAEoCzIpLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYjMuVHlwZVR5cGVIAFIIdHlwZVR5cGVCDgoMc
  2VhbGVkX3ZhbHVlIq4BCgdUeXBlUmVmEj0KBnByZWZpeBgBIAEoCzIlLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYjMuV
  HlwZVIGcHJlZml4EhYKBnN5bWJvbBgCIAEoCVIGc3ltYm9sEkwKDnR5cGVfYXJndW1lbnRzGAMgAygLMiUuc2NhbGEubWV0YS5pb
  nRlcm5hbC5zZW1hbnRpY2RiMy5UeXBlUg10eXBlQXJndW1lbnRzIpgDCg1TaW5nbGV0b25UeXBlEkQKA3RhZxgBIAEoDjIyLnNjY
  WxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYjMuU2luZ2xldG9uVHlwZS5UYWdSA3RhZxI9CgZwcmVmaXgYAiABKAsyJS5zY2FsY
  S5tZXRhLmludGVybmFsLnNlbWFudGljZGIzLlR5cGVSBnByZWZpeBIWCgZzeW1ib2wYAyABKAlSBnN5bWJvbBIcCglwcmltaXRpd
  mUYBCABKANSCXByaW1pdGl2ZRIWCgZzdHJpbmcYBSABKAlSBnN0cmluZyKzAQoDVGFnEhUKEVVOS05PV05fU0lOR0xFVE9OEAASC
  goGU1lNQk9MEAESCAoEVEhJUxACEgkKBVNVUEVSEAMSCAoEVU5JVBAEEgsKB0JPT0xFQU4QBRIICgRCWVRFEAYSCQoFU0hPUlQQB
  xIICgRDSEFSEAgSBwoDSU5UEAkSCAoETE9ORxAKEgkKBUZMT0FUEAsSCgoGRE9VQkxFEAwSCgoGU1RSSU5HEA0SCAoETlVMTBAOI
  k8KEEludGVyc2VjdGlvblR5cGUSOwoFdHlwZXMYASADKAsyJS5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIzLlR5cGVSB
  XR5cGVzIkgKCVVuaW9uVHlwZRI7CgV0eXBlcxgBIAMoCzIlLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYjMuVHlwZVIFd
  HlwZXMiRwoIV2l0aFR5cGUSOwoFdHlwZXMYASADKAsyJS5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIzLlR5cGVSBXR5c
  GVzIqcBCg5TdHJ1Y3R1cmFsVHlwZRI3CgN0cGUYBCABKAsyJS5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIzLlR5cGVSA
  3RwZRJKCgxkZWNsYXJhdGlvbnMYBSABKAsyJi5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIzLlNjb3BlUgxkZWNsYXJhd
  GlvbnNKBAgBEAJKBAgCEANKBAgDEAQinQEKDUFubm90YXRlZFR5cGUSTQoLYW5ub3RhdGlvbnMYAyADKAsyKy5zY2FsYS5tZXRhL
  mludGVybmFsLnNlbWFudGljZGIzLkFubm90YXRpb25SC2Fubm90YXRpb25zEjcKA3RwZRgBIAEoCzIlLnNjYWxhLm1ldGEuaW50Z
  XJuYWwuc2VtYW50aWNkYjMuVHlwZVIDdHBlSgQIAhADIpwBCg9FeGlzdGVudGlhbFR5cGUSNwoDdHBlGAEgASgLMiUuc2NhbGEub
  WV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiMy5UeXBlUgN0cGUSSgoMZGVjbGFyYXRpb25zGAMgASgLMiYuc2NhbGEubWV0YS5pbnRlc
  m5hbC5zZW1hbnRpY2RiMy5TY29wZVIMZGVjbGFyYXRpb25zSgQIAhADIp8BCg1Vbml2ZXJzYWxUeXBlEk8KD3R5cGVfcGFyYW1ld
  GVycxgDIAEoCzImLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYjMuU2NvcGVSDnR5cGVQYXJhbWV0ZXJzEjcKA3RwZRgCI
  AEoCzIlLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYjMuVHlwZVIDdHBlSgQIARACIvkBCg1DbGFzc0luZm9UeXBlEk8KD
  3R5cGVfcGFyYW1ldGVycxgEIAEoCzImLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYjMuU2NvcGVSDnR5cGVQYXJhbWV0Z
  XJzEj8KB3BhcmVudHMYAiADKAsyJS5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIzLlR5cGVSB3BhcmVudHMSSgoMZGVjb
  GFyYXRpb25zGAUgASgLMiYuc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiMy5TY29wZVIMZGVjbGFyYXRpb25zSgQIARACS
  gQIAxAEIoECCgpNZXRob2RUeXBlEk8KD3R5cGVfcGFyYW1ldGVycxgEIAEoCzImLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50a
  WNkYjMuU2NvcGVSDnR5cGVQYXJhbWV0ZXJzEk4KDnBhcmFtZXRlckxpc3RzGAUgAygLMiYuc2NhbGEubWV0YS5pbnRlcm5hbC5zZ
  W1hbnRpY2RiMy5TY29wZVIOcGFyYW1ldGVyTGlzdHMSRgoLcmV0dXJuX3R5cGUYAyABKAsyJS5zY2FsYS5tZXRhLmludGVybmFsL
  nNlbWFudGljZGIzLlR5cGVSCnJldHVyblR5cGVKBAgBEAJKBAgCEAMiRQoKQnlOYW1lVHlwZRI3CgN0cGUYASABKAsyJS5zY2FsY
  S5tZXRhLmludGVybmFsLnNlbWFudGljZGIzLlR5cGVSA3RwZSJHCgxSZXBlYXRlZFR5cGUSNwoDdHBlGAEgASgLMiUuc2NhbGEub
  WV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiMy5UeXBlUgN0cGUi8QEKCFR5cGVUeXBlEk8KD3R5cGVfcGFyYW1ldGVycxgEIAEoCzImL
  nNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYjMuU2NvcGVSDnR5cGVQYXJhbWV0ZXJzEkYKC2xvd2VyX2JvdW5kGAIgASgLM
  iUuc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiMy5UeXBlUgpsb3dlckJvdW5kEkYKC3VwcGVyX2JvdW5kGAMgASgLMiUuc
  2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiMy5UeXBlUgp1cHBlckJvdW5kSgQIARACIrcHChFTeW1ib2xJbmZvcm1hdGlvb
  hIWCgZzeW1ib2wYASABKAlSBnN5bWJvbBJFCghsYW5ndWFnZRgQIAEoDjIpLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkY
  jMuTGFuZ3VhZ2VSCGxhbmd1YWdlEksKBGtpbmQYAyABKA4yNy5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIzLlN5bWJvb
  EluZm9ybWF0aW9uLktpbmRSBGtpbmQSHgoKcHJvcGVydGllcxgEIAEoBVIKcHJvcGVydGllcxISCgRuYW1lGAUgASgJUgRuYW1lE
  jcKA3RwZRgLIAEoCzIlLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYjMuVHlwZVIDdHBlEk0KC2Fubm90YXRpb25zGA0gA
  ygLMisuc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiMy5Bbm5vdGF0aW9uUgthbm5vdGF0aW9ucxJUCg1hY2Nlc3NpYmlsa
  XR5GA4gASgLMi4uc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiMy5BY2Nlc3NpYmlsaXR5Ug1hY2Nlc3NpYmlsaXR5IukBC
  gRLaW5kEhAKDFVOS05PV05fS0lORBAAEgkKBUxPQ0FMEBMSCQoFRklFTEQQFBIKCgZNRVRIT0QQAxIPCgtDT05TVFJVQ1RPUhAVE
  gkKBU1BQ1JPEAYSCAoEVFlQRRAHEg0KCVBBUkFNRVRFUhAIEhIKDlNFTEZfUEFSQU1FVEVSEBESEgoOVFlQRV9QQVJBTUVURVIQC
  RIKCgZPQkpFQ1QQChILCgdQQUNLQUdFEAsSEgoOUEFDS0FHRV9PQkpFQ1QQDBIJCgVDTEFTUxANEgkKBVRSQUlUEA4SDQoJSU5UR
  VJGQUNFEBIixwEKCFByb3BlcnR5EhQKEFVOS05PV05fUFJPUEVSVFkQABIMCghBQlNUUkFDVBAEEgkKBUZJTkFMEAgSCgoGU0VBT
  EVEEBASDAoISU1QTElDSVQQIBIICgRMQVpZEEASCQoEQ0FTRRCAARIOCglDT1ZBUklBTlQQgAISEgoNQ09OVFJBVkFSSUFOVBCAB
  BIICgNWQUwQgAgSCAoDVkFSEIAQEgsKBlNUQVRJQxCAIBIMCgdQUklNQVJZEIBAEgoKBEVOVU0QgIABSgQIAhADSgQIBhAHSgQIB
  xAISgQICBAJSgQICRAKSgQIChALSgQIDBANSgQIDxAQIkUKCkFubm90YXRpb24SNwoDdHBlGAEgASgLMiUuc2NhbGEubWV0YS5pb
  nRlcm5hbC5zZW1hbnRpY2RiMy5UeXBlUgN0cGUiiAIKDUFjY2Vzc2liaWxpdHkSRAoDdGFnGAEgASgOMjIuc2NhbGEubWV0YS5pb
  nRlcm5hbC5zZW1hbnRpY2RiMy5BY2Nlc3NpYmlsaXR5LlRhZ1IDdGFnEhYKBnN5bWJvbBgCIAEoCVIGc3ltYm9sIpgBCgNUYWcSG
  QoVVU5LTk9XTl9BQ0NFU1NJQklMSVRZEAASCwoHUFJJVkFURRABEhAKDFBSSVZBVEVfVEhJUxACEhIKDlBSSVZBVEVfV0lUSElOE
  AMSDQoJUFJPVEVDVEVEEAQSEgoOUFJPVEVDVEVEX1RISVMQBRIUChBQUk9URUNURURfV0lUSElOEAYSCgoGUFVCTElDEAci7QEKE
  FN5bWJvbE9jY3VycmVuY2USPAoFcmFuZ2UYASABKAsyJi5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIzLlJhbmdlUgVyY
  W5nZRIWCgZzeW1ib2wYAiABKAlSBnN5bWJvbBJKCgRyb2xlGAMgASgOMjYuc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiM
  y5TeW1ib2xPY2N1cnJlbmNlLlJvbGVSBHJvbGUiNwoEUm9sZRIQCgxVTktOT1dOX1JPTEUQABINCglSRUZFUkVOQ0UQARIOCgpER
  UZJTklUSU9OEAIiiwIKCkRpYWdub3N0aWMSPAoFcmFuZ2UYASABKAsyJi5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIzL
  lJhbmdlUgVyYW5nZRJQCghzZXZlcml0eRgCIAEoDjI0LnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYjMuRGlhZ25vc3RpY
  y5TZXZlcml0eVIIc2V2ZXJpdHkSGAoHbWVzc2FnZRgDIAEoCVIHbWVzc2FnZSJTCghTZXZlcml0eRIUChBVTktOT1dOX1NFVkVSS
  VRZEAASCQoFRVJST1IQARILCgdXQVJOSU5HEAISDwoLSU5GT1JNQVRJT04QAxIICgRISU5UEAQijAEKCVN5bnRoZXRpYxI8CgVyY
  W5nZRgBIAEoCzImLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYjMuUmFuZ2VSBXJhbmdlEkEKBHRleHQYAiABKAsyLS5zY
  2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIzLlRleHREb2N1bWVudFIEdGV4dColCgZTY2hlbWESCgoGTEVHQUNZEAASDwoLU
  0VNQU5USUNEQjMQAyo1CghMYW5ndWFnZRIUChBVTktOT1dOX0xBTkdVQUdFEAASCQoFU0NBTEEQARIICgRKQVZBEAJiBnByb3RvM
  w=="""
      ).mkString)
  lazy val scalaDescriptor: _root_.scalapb.descriptors.FileDescriptor = {
    val scalaProto = com.google.protobuf.descriptor.FileDescriptorProto.parseFrom(ProtoBytes)
    _root_.scalapb.descriptors.FileDescriptor.buildFrom(scalaProto, dependencies.map(_.scalaDescriptor))
  }
  lazy val javaDescriptor: com.google.protobuf.Descriptors.FileDescriptor = {
    val javaProto = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(ProtoBytes)
    com.google.protobuf.Descriptors.FileDescriptor.buildFrom(javaProto, Array(
    ))
  }
  @deprecated("Use javaDescriptor instead. In a future version this will refer to scalaDescriptor.", "ScalaPB 0.5.47")
  def descriptor: com.google.protobuf.Descriptors.FileDescriptor = javaDescriptor
}