// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package scala.meta.internal.semanticdb3

object Semanticdb3Proto extends _root_.scalapb.GeneratedFileObject {
  lazy val dependencies: Seq[_root_.scalapb.GeneratedFileObject] = Seq(
  )
  lazy val messagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq(
    scala.meta.internal.semanticdb3.TextDocuments,
    scala.meta.internal.semanticdb3.TextDocument,
    scala.meta.internal.semanticdb3.Range,
    scala.meta.internal.semanticdb3.Location,
    scala.meta.internal.semanticdb3.Scope,
    scala.meta.internal.semanticdb3.TypeMessage,
    scala.meta.internal.semanticdb3.TypeRef,
    scala.meta.internal.semanticdb3.SingletonType,
    scala.meta.internal.semanticdb3.IntersectionType,
    scala.meta.internal.semanticdb3.UnionType,
    scala.meta.internal.semanticdb3.WithType,
    scala.meta.internal.semanticdb3.StructuralType,
    scala.meta.internal.semanticdb3.AnnotatedType,
    scala.meta.internal.semanticdb3.ExistentialType,
    scala.meta.internal.semanticdb3.UniversalType,
    scala.meta.internal.semanticdb3.ClassInfoType,
    scala.meta.internal.semanticdb3.MethodType,
    scala.meta.internal.semanticdb3.ByNameType,
    scala.meta.internal.semanticdb3.RepeatedType,
    scala.meta.internal.semanticdb3.TypeType,
    scala.meta.internal.semanticdb3.SymbolInformation,
    scala.meta.internal.semanticdb3.Annotation,
    scala.meta.internal.semanticdb3.Accessibility,
    scala.meta.internal.semanticdb3.SymbolOccurrence,
    scala.meta.internal.semanticdb3.Diagnostic,
    scala.meta.internal.semanticdb3.Synthetic
  )
  private lazy val ProtoBytes: Array[Byte] =
      scalapb.Encoding.fromBase64(scala.collection.Seq(
  """CihzZW1hbnRpY2RiL3NlbWFudGljZGIzL3NlbWFudGljZGIzLnByb3RvEh9zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZ
  GIzIlwKDVRleHREb2N1bWVudHMSSwoJZG9jdW1lbnRzGAEgAygLMi0uc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiMy5UZ
  Xh0RG9jdW1lbnRSCWRvY3VtZW50cyKGBAoMVGV4dERvY3VtZW50Ej8KBnNjaGVtYRgBIAEoDjInLnNjYWxhLm1ldGEuaW50ZXJuY
  Wwuc2VtYW50aWNkYjMuU2NoZW1hUgZzY2hlbWESEAoDdXJpGAIgASgJUgN1cmkSEgoEdGV4dBgDIAEoCVIEdGV4dBJFCghsYW5nd
  WFnZRgKIAEoDjIpLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYjMuTGFuZ3VhZ2VSCGxhbmd1YWdlEkwKB3N5bWJvbHMYB
  SADKAsyMi5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIzLlN5bWJvbEluZm9ybWF0aW9uUgdzeW1ib2xzElMKC29jY3Vyc
  mVuY2VzGAYgAygLMjEuc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiMy5TeW1ib2xPY2N1cnJlbmNlUgtvY2N1cnJlbmNlc
  xJNCgtkaWFnbm9zdGljcxgHIAMoCzIrLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYjMuRGlhZ25vc3RpY1ILZGlhZ25vc
  3RpY3MSSgoKc3ludGhldGljcxgIIAMoCzIqLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYjMuU3ludGhldGljUgpzeW50a
  GV0aWNzSgQIBBAFSgQICRAKIo8BCgVSYW5nZRIdCgpzdGFydF9saW5lGAEgASgFUglzdGFydExpbmUSJwoPc3RhcnRfY2hhcmFjd
  GVyGAIgASgFUg5zdGFydENoYXJhY3RlchIZCghlbmRfbGluZRgDIAEoBVIHZW5kTGluZRIjCg1lbmRfY2hhcmFjdGVyGAQgASgFU
  gxlbmRDaGFyYWN0ZXIiWgoITG9jYXRpb24SEAoDdXJpGAEgASgJUgN1cmkSPAoFcmFuZ2UYAiABKAsyJi5zY2FsYS5tZXRhLmlud
  GVybmFsLnNlbWFudGljZGIzLlJhbmdlUgVyYW5nZSJ1CgVTY29wZRIaCghzeW1saW5rcxgBIAMoCVIIc3ltbGlua3MSUAoJaGFyZ
  GxpbmtzGAIgAygLMjIuc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiMy5TeW1ib2xJbmZvcm1hdGlvblIJaGFyZGxpbmtzI
  qcJCgRUeXBlEkQKB3R5cGVSZWYYAiABKAsyKC5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIzLlR5cGVSZWZIAFIHdHlwZ
  VJlZhJWCg1zaW5nbGV0b25UeXBlGBAgASgLMi4uc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiMy5TaW5nbGV0b25UeXBlS
  ABSDXNpbmdsZXRvblR5cGUSXwoQaW50ZXJzZWN0aW9uVHlwZRgRIAEoCzIxLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkY
  jMuSW50ZXJzZWN0aW9uVHlwZUgAUhBpbnRlcnNlY3Rpb25UeXBlEkoKCXVuaW9uVHlwZRgSIAEoCzIqLnNjYWxhLm1ldGEuaW50Z
  XJuYWwuc2VtYW50aWNkYjMuVW5pb25UeXBlSABSCXVuaW9uVHlwZRJHCgh3aXRoVHlwZRgTIAEoCzIpLnNjYWxhLm1ldGEuaW50Z
  XJuYWwuc2VtYW50aWNkYjMuV2l0aFR5cGVIAFIId2l0aFR5cGUSWQoOc3RydWN0dXJhbFR5cGUYByABKAsyLy5zY2FsYS5tZXRhL
  mludGVybmFsLnNlbWFudGljZGIzLlN0cnVjdHVyYWxUeXBlSABSDnN0cnVjdHVyYWxUeXBlElYKDWFubm90YXRlZFR5cGUYCCABK
  AsyLi5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIzLkFubm90YXRlZFR5cGVIAFINYW5ub3RhdGVkVHlwZRJcCg9leGlzd
  GVudGlhbFR5cGUYCSABKAsyMC5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIzLkV4aXN0ZW50aWFsVHlwZUgAUg9leGlzd
  GVudGlhbFR5cGUSVgoNdW5pdmVyc2FsVHlwZRgKIAEoCzIuLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYjMuVW5pdmVyc
  2FsVHlwZUgAUg11bml2ZXJzYWxUeXBlElYKDWNsYXNzSW5mb1R5cGUYCyABKAsyLi5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFud
  GljZGIzLkNsYXNzSW5mb1R5cGVIAFINY2xhc3NJbmZvVHlwZRJNCgptZXRob2RUeXBlGAwgASgLMisuc2NhbGEubWV0YS5pbnRlc
  m5hbC5zZW1hbnRpY2RiMy5NZXRob2RUeXBlSABSCm1ldGhvZFR5cGUSTQoKYnlOYW1lVHlwZRgNIAEoCzIrLnNjYWxhLm1ldGEua
  W50ZXJuYWwuc2VtYW50aWNkYjMuQnlOYW1lVHlwZUgAUgpieU5hbWVUeXBlElMKDHJlcGVhdGVkVHlwZRgOIAEoCzItLnNjYWxhL
  m1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYjMuUmVwZWF0ZWRUeXBlSABSDHJlcGVhdGVkVHlwZRJHCgh0eXBlVHlwZRgPIAEoCzIpL
  nNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYjMuVHlwZVR5cGVIAFIIdHlwZVR5cGVCDgoMc2VhbGVkX3ZhbHVlIq4BCgdUe
  XBlUmVmEj0KBnByZWZpeBgBIAEoCzIlLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYjMuVHlwZVIGcHJlZml4EhYKBnN5b
  WJvbBgCIAEoCVIGc3ltYm9sEkwKDnR5cGVfYXJndW1lbnRzGAMgAygLMiUuc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiM
  y5UeXBlUg10eXBlQXJndW1lbnRzIpgDCg1TaW5nbGV0b25UeXBlEkQKA3RhZxgBIAEoDjIyLnNjYWxhLm1ldGEuaW50ZXJuYWwuc
  2VtYW50aWNkYjMuU2luZ2xldG9uVHlwZS5UYWdSA3RhZxI9CgZwcmVmaXgYAiABKAsyJS5zY2FsYS5tZXRhLmludGVybmFsLnNlb
  WFudGljZGIzLlR5cGVSBnByZWZpeBIWCgZzeW1ib2wYAyABKAlSBnN5bWJvbBIcCglwcmltaXRpdmUYBCABKANSCXByaW1pdGl2Z
  RIWCgZzdHJpbmcYBSABKAlSBnN0cmluZyKzAQoDVGFnEhUKEVVOS05PV05fU0lOR0xFVE9OEAASCgoGU1lNQk9MEAESCAoEVEhJU
  xACEgkKBVNVUEVSEAMSCAoEVU5JVBAEEgsKB0JPT0xFQU4QBRIICgRCWVRFEAYSCQoFU0hPUlQQBxIICgRDSEFSEAgSBwoDSU5UE
  AkSCAoETE9ORxAKEgkKBUZMT0FUEAsSCgoGRE9VQkxFEAwSCgoGU1RSSU5HEA0SCAoETlVMTBAOIk8KEEludGVyc2VjdGlvblR5c
  GUSOwoFdHlwZXMYASADKAsyJS5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIzLlR5cGVSBXR5cGVzIkgKCVVuaW9uVHlwZ
  RI7CgV0eXBlcxgBIAMoCzIlLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYjMuVHlwZVIFdHlwZXMiRwoIV2l0aFR5cGUSO
  woFdHlwZXMYASADKAsyJS5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIzLlR5cGVSBXR5cGVzIqcBCg5TdHJ1Y3R1cmFsV
  HlwZRI3CgN0cGUYBCABKAsyJS5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIzLlR5cGVSA3RwZRJKCgxkZWNsYXJhdGlvb
  nMYBSABKAsyJi5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIzLlNjb3BlUgxkZWNsYXJhdGlvbnNKBAgBEAJKBAgCEANKB
  AgDEAQinQEKDUFubm90YXRlZFR5cGUSTQoLYW5ub3RhdGlvbnMYAyADKAsyKy5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZ
  GIzLkFubm90YXRpb25SC2Fubm90YXRpb25zEjcKA3RwZRgBIAEoCzIlLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYjMuV
  HlwZVIDdHBlSgQIAhADIpwBCg9FeGlzdGVudGlhbFR5cGUSNwoDdHBlGAEgASgLMiUuc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hb
  nRpY2RiMy5UeXBlUgN0cGUSSgoMZGVjbGFyYXRpb25zGAMgASgLMiYuc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiMy5TY
  29wZVIMZGVjbGFyYXRpb25zSgQIAhADIp8BCg1Vbml2ZXJzYWxUeXBlEk8KD3R5cGVfcGFyYW1ldGVycxgDIAEoCzImLnNjYWxhL
  m1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYjMuU2NvcGVSDnR5cGVQYXJhbWV0ZXJzEjcKA3RwZRgCIAEoCzIlLnNjYWxhLm1ldGEua
  W50ZXJuYWwuc2VtYW50aWNkYjMuVHlwZVIDdHBlSgQIARACIvkBCg1DbGFzc0luZm9UeXBlEk8KD3R5cGVfcGFyYW1ldGVycxgEI
  AEoCzImLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYjMuU2NvcGVSDnR5cGVQYXJhbWV0ZXJzEj8KB3BhcmVudHMYAiADK
  AsyJS5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIzLlR5cGVSB3BhcmVudHMSSgoMZGVjbGFyYXRpb25zGAUgASgLMiYuc
  2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiMy5TY29wZVIMZGVjbGFyYXRpb25zSgQIARACSgQIAxAEIoECCgpNZXRob2RUe
  XBlEk8KD3R5cGVfcGFyYW1ldGVycxgEIAEoCzImLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYjMuU2NvcGVSDnR5cGVQY
  XJhbWV0ZXJzEk4KDnBhcmFtZXRlckxpc3RzGAUgAygLMiYuc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiMy5TY29wZVIOc
  GFyYW1ldGVyTGlzdHMSRgoLcmV0dXJuX3R5cGUYAyABKAsyJS5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIzLlR5cGVSC
  nJldHVyblR5cGVKBAgBEAJKBAgCEAMiRQoKQnlOYW1lVHlwZRI3CgN0cGUYASABKAsyJS5zY2FsYS5tZXRhLmludGVybmFsLnNlb
  WFudGljZGIzLlR5cGVSA3RwZSJHCgxSZXBlYXRlZFR5cGUSNwoDdHBlGAEgASgLMiUuc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hb
  nRpY2RiMy5UeXBlUgN0cGUi8QEKCFR5cGVUeXBlEk8KD3R5cGVfcGFyYW1ldGVycxgEIAEoCzImLnNjYWxhLm1ldGEuaW50ZXJuY
  Wwuc2VtYW50aWNkYjMuU2NvcGVSDnR5cGVQYXJhbWV0ZXJzEkYKC2xvd2VyX2JvdW5kGAIgASgLMiUuc2NhbGEubWV0YS5pbnRlc
  m5hbC5zZW1hbnRpY2RiMy5UeXBlUgpsb3dlckJvdW5kEkYKC3VwcGVyX2JvdW5kGAMgASgLMiUuc2NhbGEubWV0YS5pbnRlcm5hb
  C5zZW1hbnRpY2RiMy5UeXBlUgp1cHBlckJvdW5kSgQIARACIrcHChFTeW1ib2xJbmZvcm1hdGlvbhIWCgZzeW1ib2wYASABKAlSB
  nN5bWJvbBJFCghsYW5ndWFnZRgQIAEoDjIpLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYjMuTGFuZ3VhZ2VSCGxhbmd1Y
  WdlEksKBGtpbmQYAyABKA4yNy5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIzLlN5bWJvbEluZm9ybWF0aW9uLktpbmRSB
  GtpbmQSHgoKcHJvcGVydGllcxgEIAEoBVIKcHJvcGVydGllcxISCgRuYW1lGAUgASgJUgRuYW1lEjcKA3RwZRgLIAEoCzIlLnNjY
  WxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYjMuVHlwZVIDdHBlEk0KC2Fubm90YXRpb25zGA0gAygLMisuc2NhbGEubWV0YS5pb
  nRlcm5hbC5zZW1hbnRpY2RiMy5Bbm5vdGF0aW9uUgthbm5vdGF0aW9ucxJUCg1hY2Nlc3NpYmlsaXR5GA4gASgLMi4uc2NhbGEub
  WV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiMy5BY2Nlc3NpYmlsaXR5Ug1hY2Nlc3NpYmlsaXR5IukBCgRLaW5kEhAKDFVOS05PV05fS
  0lORBAAEgkKBUxPQ0FMEBMSCQoFRklFTEQQFBIKCgZNRVRIT0QQAxIPCgtDT05TVFJVQ1RPUhAVEgkKBU1BQ1JPEAYSCAoEVFlQR
  RAHEg0KCVBBUkFNRVRFUhAIEhIKDlNFTEZfUEFSQU1FVEVSEBESEgoOVFlQRV9QQVJBTUVURVIQCRIKCgZPQkpFQ1QQChILCgdQQ
  UNLQUdFEAsSEgoOUEFDS0FHRV9PQkpFQ1QQDBIJCgVDTEFTUxANEgkKBVRSQUlUEA4SDQoJSU5URVJGQUNFEBIixwEKCFByb3Blc
  nR5EhQKEFVOS05PV05fUFJPUEVSVFkQABIMCghBQlNUUkFDVBAEEgkKBUZJTkFMEAgSCgoGU0VBTEVEEBASDAoISU1QTElDSVQQI
  BIICgRMQVpZEEASCQoEQ0FTRRCAARIOCglDT1ZBUklBTlQQgAISEgoNQ09OVFJBVkFSSUFOVBCABBIICgNWQUwQgAgSCAoDVkFSE
  IAQEgsKBlNUQVRJQxCAIBIMCgdQUklNQVJZEIBAEgoKBEVOVU0QgIABSgQIAhADSgQIBhAHSgQIBxAISgQICBAJSgQICRAKSgQIC
  hALSgQIDBANSgQIDxAQIkUKCkFubm90YXRpb24SNwoDdHBlGAEgASgLMiUuc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiM
  y5UeXBlUgN0cGUiiAIKDUFjY2Vzc2liaWxpdHkSRAoDdGFnGAEgASgOMjIuc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiM
  y5BY2Nlc3NpYmlsaXR5LlRhZ1IDdGFnEhYKBnN5bWJvbBgCIAEoCVIGc3ltYm9sIpgBCgNUYWcSGQoVVU5LTk9XTl9BQ0NFU1NJQ
  klMSVRZEAASCwoHUFJJVkFURRABEhAKDFBSSVZBVEVfVEhJUxACEhIKDlBSSVZBVEVfV0lUSElOEAMSDQoJUFJPVEVDVEVEEAQSE
  goOUFJPVEVDVEVEX1RISVMQBRIUChBQUk9URUNURURfV0lUSElOEAYSCgoGUFVCTElDEAci7QEKEFN5bWJvbE9jY3VycmVuY2USP
  AoFcmFuZ2UYASABKAsyJi5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIzLlJhbmdlUgVyYW5nZRIWCgZzeW1ib2wYAiABK
  AlSBnN5bWJvbBJKCgRyb2xlGAMgASgOMjYuc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiMy5TeW1ib2xPY2N1cnJlbmNlL
  lJvbGVSBHJvbGUiNwoEUm9sZRIQCgxVTktOT1dOX1JPTEUQABINCglSRUZFUkVOQ0UQARIOCgpERUZJTklUSU9OEAIiiwIKCkRpY
  Wdub3N0aWMSPAoFcmFuZ2UYASABKAsyJi5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIzLlJhbmdlUgVyYW5nZRJQCghzZ
  XZlcml0eRgCIAEoDjI0LnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYjMuRGlhZ25vc3RpYy5TZXZlcml0eVIIc2V2ZXJpd
  HkSGAoHbWVzc2FnZRgDIAEoCVIHbWVzc2FnZSJTCghTZXZlcml0eRIUChBVTktOT1dOX1NFVkVSSVRZEAASCQoFRVJST1IQARILC
  gdXQVJOSU5HEAISDwoLSU5GT1JNQVRJT04QAxIICgRISU5UEAQijAEKCVN5bnRoZXRpYxI8CgVyYW5nZRgBIAEoCzImLnNjYWxhL
  m1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYjMuUmFuZ2VSBXJhbmdlEkEKBHRleHQYAiABKAsyLS5zY2FsYS5tZXRhLmludGVybmFsL
  nNlbWFudGljZGIzLlRleHREb2N1bWVudFIEdGV4dColCgZTY2hlbWESCgoGTEVHQUNZEAASDwoLU0VNQU5USUNEQjMQAyo1CghMY
  W5ndWFnZRIUChBVTktOT1dOX0xBTkdVQUdFEAASCQoFU0NBTEEQARIICgRKQVZBEAJiBnByb3RvMw=="""
      ).mkString)
  lazy val scalaDescriptor: _root_.scalapb.descriptors.FileDescriptor = {
    val scalaProto = com.google.protobuf.descriptor.FileDescriptorProto.parseFrom(ProtoBytes)
    _root_.scalapb.descriptors.FileDescriptor.buildFrom(scalaProto, dependencies.map(_.scalaDescriptor))
  }
  lazy val javaDescriptor: com.google.protobuf.Descriptors.FileDescriptor = {
    val javaProto = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(ProtoBytes)
    com.google.protobuf.Descriptors.FileDescriptor.buildFrom(javaProto, Array(
    ))
  }
  @deprecated("Use javaDescriptor instead. In a future version this will refer to scalaDescriptor.", "ScalaPB 0.5.47")
  def descriptor: com.google.protobuf.Descriptors.FileDescriptor = javaDescriptor
}