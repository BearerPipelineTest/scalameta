// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package scala.meta.internal.semanticdb3

object Semanticdb3Proto extends _root_.scalapb.GeneratedFileObject {
  lazy val dependencies: Seq[_root_.scalapb.GeneratedFileObject] = Seq(
  )
  lazy val messagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq(
    scala.meta.internal.semanticdb3.TextDocuments,
    scala.meta.internal.semanticdb3.TextDocument,
    scala.meta.internal.semanticdb3.Range,
    scala.meta.internal.semanticdb3.Location,
    scala.meta.internal.semanticdb3.Scope,
    scala.meta.internal.semanticdb3.Type,
    scala.meta.internal.semanticdb3.TypeRef,
    scala.meta.internal.semanticdb3.SingletonType,
    scala.meta.internal.semanticdb3.IntersectionType,
    scala.meta.internal.semanticdb3.UnionType,
    scala.meta.internal.semanticdb3.WithType,
    scala.meta.internal.semanticdb3.StructuralType,
    scala.meta.internal.semanticdb3.AnnotatedType,
    scala.meta.internal.semanticdb3.ExistentialType,
    scala.meta.internal.semanticdb3.UniversalType,
    scala.meta.internal.semanticdb3.ClassInfoType,
    scala.meta.internal.semanticdb3.MethodType,
    scala.meta.internal.semanticdb3.ByNameType,
    scala.meta.internal.semanticdb3.RepeatedType,
    scala.meta.internal.semanticdb3.TypeType,
    scala.meta.internal.semanticdb3.SymbolInformation,
    scala.meta.internal.semanticdb3.Annotation,
    scala.meta.internal.semanticdb3.Accessibility,
    scala.meta.internal.semanticdb3.SymbolOccurrence,
    scala.meta.internal.semanticdb3.Diagnostic,
    scala.meta.internal.semanticdb3.Synthetic
  )
  private lazy val ProtoBytes: Array[Byte] =
      scalapb.Encoding.fromBase64(scala.collection.Seq(
  """CihzZW1hbnRpY2RiL3NlbWFudGljZGIzL3NlbWFudGljZGIzLnByb3RvEh9zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZ
  GIzIlwKDVRleHREb2N1bWVudHMSSwoJZG9jdW1lbnRzGAEgAygLMi0uc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiMy5UZ
  Xh0RG9jdW1lbnRSCWRvY3VtZW50cyKGBAoMVGV4dERvY3VtZW50Ej8KBnNjaGVtYRgBIAEoDjInLnNjYWxhLm1ldGEuaW50ZXJuY
  Wwuc2VtYW50aWNkYjMuU2NoZW1hUgZzY2hlbWESEAoDdXJpGAIgASgJUgN1cmkSEgoEdGV4dBgDIAEoCVIEdGV4dBJFCghsYW5nd
  WFnZRgKIAEoDjIpLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYjMuTGFuZ3VhZ2VSCGxhbmd1YWdlEkwKB3N5bWJvbHMYB
  SADKAsyMi5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIzLlN5bWJvbEluZm9ybWF0aW9uUgdzeW1ib2xzElMKC29jY3Vyc
  mVuY2VzGAYgAygLMjEuc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiMy5TeW1ib2xPY2N1cnJlbmNlUgtvY2N1cnJlbmNlc
  xJNCgtkaWFnbm9zdGljcxgHIAMoCzIrLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYjMuRGlhZ25vc3RpY1ILZGlhZ25vc
  3RpY3MSSgoKc3ludGhldGljcxgIIAMoCzIqLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYjMuU3ludGhldGljUgpzeW50a
  GV0aWNzSgQIBBAFSgQICRAKIo8BCgVSYW5nZRIdCgpzdGFydF9saW5lGAEgASgFUglzdGFydExpbmUSJwoPc3RhcnRfY2hhcmFjd
  GVyGAIgASgFUg5zdGFydENoYXJhY3RlchIZCghlbmRfbGluZRgDIAEoBVIHZW5kTGluZRIjCg1lbmRfY2hhcmFjdGVyGAQgASgFU
  gxlbmRDaGFyYWN0ZXIiWgoITG9jYXRpb24SEAoDdXJpGAEgASgJUgN1cmkSPAoFcmFuZ2UYAiABKAsyJi5zY2FsYS5tZXRhLmlud
  GVybmFsLnNlbWFudGljZGIzLlJhbmdlUgVyYW5nZSJ1CgVTY29wZRIaCghzeW1saW5rcxgBIAMoCVIIc3ltbGlua3MSUAoJaGFyZ
  GxpbmtzGAIgAygLMjIuc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiMy5TeW1ib2xJbmZvcm1hdGlvblIJaGFyZGxpbmtzI
  tcLCgRUeXBlEjsKA3RhZxgBIAEoDjIpLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYjMuVHlwZS5UYWdSA3RhZxJCCgd0e
  XBlUmVmGAIgASgLMiguc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiMy5UeXBlUmVmUgd0eXBlUmVmElQKDXNpbmdsZXRvb
  lR5cGUYECABKAsyLi5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIzLlNpbmdsZXRvblR5cGVSDXNpbmdsZXRvblR5cGUSX
  QoQaW50ZXJzZWN0aW9uVHlwZRgRIAEoCzIxLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYjMuSW50ZXJzZWN0aW9uVHlwZ
  VIQaW50ZXJzZWN0aW9uVHlwZRJICgl1bmlvblR5cGUYEiABKAsyKi5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIzLlVua
  W9uVHlwZVIJdW5pb25UeXBlEkUKCHdpdGhUeXBlGBMgASgLMikuc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiMy5XaXRoV
  HlwZVIId2l0aFR5cGUSVwoOc3RydWN0dXJhbFR5cGUYByABKAsyLy5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIzLlN0c
  nVjdHVyYWxUeXBlUg5zdHJ1Y3R1cmFsVHlwZRJUCg1hbm5vdGF0ZWRUeXBlGAggASgLMi4uc2NhbGEubWV0YS5pbnRlcm5hbC5zZ
  W1hbnRpY2RiMy5Bbm5vdGF0ZWRUeXBlUg1hbm5vdGF0ZWRUeXBlEloKD2V4aXN0ZW50aWFsVHlwZRgJIAEoCzIwLnNjYWxhLm1ld
  GEuaW50ZXJuYWwuc2VtYW50aWNkYjMuRXhpc3RlbnRpYWxUeXBlUg9leGlzdGVudGlhbFR5cGUSVAoNdW5pdmVyc2FsVHlwZRgKI
  AEoCzIuLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYjMuVW5pdmVyc2FsVHlwZVINdW5pdmVyc2FsVHlwZRJUCg1jbGFzc
  0luZm9UeXBlGAsgASgLMi4uc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiMy5DbGFzc0luZm9UeXBlUg1jbGFzc0luZm9Ue
  XBlEksKCm1ldGhvZFR5cGUYDCABKAsyKy5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIzLk1ldGhvZFR5cGVSCm1ldGhvZ
  FR5cGUSSwoKYnlOYW1lVHlwZRgNIAEoCzIrLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYjMuQnlOYW1lVHlwZVIKYnlOY
  W1lVHlwZRJRCgxyZXBlYXRlZFR5cGUYDiABKAsyLS5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIzLlJlcGVhdGVkVHlwZ
  VIMcmVwZWF0ZWRUeXBlEkUKCHR5cGVUeXBlGA8gASgLMikuc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiMy5UeXBlVHlwZ
  VIIdHlwZVR5cGUinAIKA1RhZxIQCgxVTktOT1dOX1RZUEUQABIMCghUWVBFX1JFRhABEhIKDlNJTkdMRVRPTl9UWVBFEA8SFQoRS
  U5URVJTRUNUSU9OX1RZUEUQEBIOCgpVTklPTl9UWVBFEBESDQoJV0lUSF9UWVBFEBISEwoPU1RSVUNUVVJBTF9UWVBFEAYSEgoOQ
  U5OT1RBVEVEX1RZUEUQBxIUChBFWElTVEVOVElBTF9UWVBFEAgSEgoOVU5JVkVSU0FMX1RZUEUQCRITCg9DTEFTU19JTkZPX1RZU
  EUQChIPCgtNRVRIT0RfVFlQRRALEhAKDEJZX05BTUVfVFlQRRAMEhEKDVJFUEVBVEVEX1RZUEUQDRINCglUWVBFX1RZUEUQDiKuA
  QoHVHlwZVJlZhI9CgZwcmVmaXgYASABKAsyJS5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIzLlR5cGVSBnByZWZpeBIWC
  gZzeW1ib2wYAiABKAlSBnN5bWJvbBJMCg50eXBlX2FyZ3VtZW50cxgDIAMoCzIlLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50a
  WNkYjMuVHlwZVINdHlwZUFyZ3VtZW50cyKYAwoNU2luZ2xldG9uVHlwZRJECgN0YWcYASABKA4yMi5zY2FsYS5tZXRhLmludGVyb
  mFsLnNlbWFudGljZGIzLlNpbmdsZXRvblR5cGUuVGFnUgN0YWcSPQoGcHJlZml4GAIgASgLMiUuc2NhbGEubWV0YS5pbnRlcm5hb
  C5zZW1hbnRpY2RiMy5UeXBlUgZwcmVmaXgSFgoGc3ltYm9sGAMgASgJUgZzeW1ib2wSHAoJcHJpbWl0aXZlGAQgASgDUglwcmlta
  XRpdmUSFgoGc3RyaW5nGAUgASgJUgZzdHJpbmciswEKA1RhZxIVChFVTktOT1dOX1NJTkdMRVRPThAAEgoKBlNZTUJPTBABEggKB
  FRISVMQAhIJCgVTVVBFUhADEggKBFVOSVQQBBILCgdCT09MRUFOEAUSCAoEQllURRAGEgkKBVNIT1JUEAcSCAoEQ0hBUhAIEgcKA
  0lOVBAJEggKBExPTkcQChIJCgVGTE9BVBALEgoKBkRPVUJMRRAMEgoKBlNUUklORxANEggKBE5VTEwQDiJPChBJbnRlcnNlY3Rpb
  25UeXBlEjsKBXR5cGVzGAEgAygLMiUuc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiMy5UeXBlUgV0eXBlcyJICglVbmlvb
  lR5cGUSOwoFdHlwZXMYASADKAsyJS5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIzLlR5cGVSBXR5cGVzIkcKCFdpdGhUe
  XBlEjsKBXR5cGVzGAEgAygLMiUuc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiMy5UeXBlUgV0eXBlcyKnAQoOU3RydWN0d
  XJhbFR5cGUSNwoDdHBlGAQgASgLMiUuc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiMy5UeXBlUgN0cGUSSgoMZGVjbGFyY
  XRpb25zGAUgASgLMiYuc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiMy5TY29wZVIMZGVjbGFyYXRpb25zSgQIARACSgQIA
  hADSgQIAxAEIp0BCg1Bbm5vdGF0ZWRUeXBlEk0KC2Fubm90YXRpb25zGAMgAygLMisuc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hb
  nRpY2RiMy5Bbm5vdGF0aW9uUgthbm5vdGF0aW9ucxI3CgN0cGUYASABKAsyJS5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZ
  GIzLlR5cGVSA3RwZUoECAIQAyKcAQoPRXhpc3RlbnRpYWxUeXBlEjcKA3RwZRgBIAEoCzIlLnNjYWxhLm1ldGEuaW50ZXJuYWwuc
  2VtYW50aWNkYjMuVHlwZVIDdHBlEkoKDGRlY2xhcmF0aW9ucxgDIAEoCzImLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkY
  jMuU2NvcGVSDGRlY2xhcmF0aW9uc0oECAIQAyKfAQoNVW5pdmVyc2FsVHlwZRJPCg90eXBlX3BhcmFtZXRlcnMYAyABKAsyJi5zY
  2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIzLlNjb3BlUg50eXBlUGFyYW1ldGVycxI3CgN0cGUYAiABKAsyJS5zY2FsYS5tZ
  XRhLmludGVybmFsLnNlbWFudGljZGIzLlR5cGVSA3RwZUoECAEQAiL5AQoNQ2xhc3NJbmZvVHlwZRJPCg90eXBlX3BhcmFtZXRlc
  nMYBCABKAsyJi5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIzLlNjb3BlUg50eXBlUGFyYW1ldGVycxI/CgdwYXJlbnRzG
  AIgAygLMiUuc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiMy5UeXBlUgdwYXJlbnRzEkoKDGRlY2xhcmF0aW9ucxgFIAEoC
  zImLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYjMuU2NvcGVSDGRlY2xhcmF0aW9uc0oECAEQAkoECAMQBCKBAgoKTWV0a
  G9kVHlwZRJPCg90eXBlX3BhcmFtZXRlcnMYBCABKAsyJi5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIzLlNjb3BlUg50e
  XBlUGFyYW1ldGVycxJOCg5wYXJhbWV0ZXJMaXN0cxgFIAMoCzImLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYjMuU2Nvc
  GVSDnBhcmFtZXRlckxpc3RzEkYKC3JldHVybl90eXBlGAMgASgLMiUuc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiMy5Ue
  XBlUgpyZXR1cm5UeXBlSgQIARACSgQIAhADIkUKCkJ5TmFtZVR5cGUSNwoDdHBlGAEgASgLMiUuc2NhbGEubWV0YS5pbnRlcm5hb
  C5zZW1hbnRpY2RiMy5UeXBlUgN0cGUiRwoMUmVwZWF0ZWRUeXBlEjcKA3RwZRgBIAEoCzIlLnNjYWxhLm1ldGEuaW50ZXJuYWwuc
  2VtYW50aWNkYjMuVHlwZVIDdHBlIvEBCghUeXBlVHlwZRJPCg90eXBlX3BhcmFtZXRlcnMYBCABKAsyJi5zY2FsYS5tZXRhLmlud
  GVybmFsLnNlbWFudGljZGIzLlNjb3BlUg50eXBlUGFyYW1ldGVycxJGCgtsb3dlcl9ib3VuZBgCIAEoCzIlLnNjYWxhLm1ldGEua
  W50ZXJuYWwuc2VtYW50aWNkYjMuVHlwZVIKbG93ZXJCb3VuZBJGCgt1cHBlcl9ib3VuZBgDIAEoCzIlLnNjYWxhLm1ldGEuaW50Z
  XJuYWwuc2VtYW50aWNkYjMuVHlwZVIKdXBwZXJCb3VuZEoECAEQAiK3BwoRU3ltYm9sSW5mb3JtYXRpb24SFgoGc3ltYm9sGAEgA
  SgJUgZzeW1ib2wSRQoIbGFuZ3VhZ2UYECABKA4yKS5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIzLkxhbmd1YWdlUghsY
  W5ndWFnZRJLCgRraW5kGAMgASgOMjcuc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiMy5TeW1ib2xJbmZvcm1hdGlvbi5La
  W5kUgRraW5kEh4KCnByb3BlcnRpZXMYBCABKAVSCnByb3BlcnRpZXMSEgoEbmFtZRgFIAEoCVIEbmFtZRI3CgN0cGUYCyABKAsyJ
  S5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIzLlR5cGVSA3RwZRJNCgthbm5vdGF0aW9ucxgNIAMoCzIrLnNjYWxhLm1ld
  GEuaW50ZXJuYWwuc2VtYW50aWNkYjMuQW5ub3RhdGlvblILYW5ub3RhdGlvbnMSVAoNYWNjZXNzaWJpbGl0eRgOIAEoCzIuLnNjY
  WxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYjMuQWNjZXNzaWJpbGl0eVINYWNjZXNzaWJpbGl0eSLpAQoES2luZBIQCgxVTktOT
  1dOX0tJTkQQABIJCgVMT0NBTBATEgkKBUZJRUxEEBQSCgoGTUVUSE9EEAMSDwoLQ09OU1RSVUNUT1IQFRIJCgVNQUNSTxAGEggKB
  FRZUEUQBxINCglQQVJBTUVURVIQCBISCg5TRUxGX1BBUkFNRVRFUhAREhIKDlRZUEVfUEFSQU1FVEVSEAkSCgoGT0JKRUNUEAoSC
  woHUEFDS0FHRRALEhIKDlBBQ0tBR0VfT0JKRUNUEAwSCQoFQ0xBU1MQDRIJCgVUUkFJVBAOEg0KCUlOVEVSRkFDRRASIscBCghQc
  m9wZXJ0eRIUChBVTktOT1dOX1BST1BFUlRZEAASDAoIQUJTVFJBQ1QQBBIJCgVGSU5BTBAIEgoKBlNFQUxFRBAQEgwKCElNUExJQ
  0lUECASCAoETEFaWRBAEgkKBENBU0UQgAESDgoJQ09WQVJJQU5UEIACEhIKDUNPTlRSQVZBUklBTlQQgAQSCAoDVkFMEIAIEggKA
  1ZBUhCAEBILCgZTVEFUSUMQgCASDAoHUFJJTUFSWRCAQBIKCgRFTlVNEICAAUoECAIQA0oECAYQB0oECAcQCEoECAgQCUoECAkQC
  koECAoQC0oECAwQDUoECA8QECJFCgpBbm5vdGF0aW9uEjcKA3RwZRgBIAEoCzIlLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50a
  WNkYjMuVHlwZVIDdHBlIogCCg1BY2Nlc3NpYmlsaXR5EkQKA3RhZxgBIAEoDjIyLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50a
  WNkYjMuQWNjZXNzaWJpbGl0eS5UYWdSA3RhZxIWCgZzeW1ib2wYAiABKAlSBnN5bWJvbCKYAQoDVGFnEhkKFVVOS05PV05fQUNDR
  VNTSUJJTElUWRAAEgsKB1BSSVZBVEUQARIQCgxQUklWQVRFX1RISVMQAhISCg5QUklWQVRFX1dJVEhJThADEg0KCVBST1RFQ1RFR
  BAEEhIKDlBST1RFQ1RFRF9USElTEAUSFAoQUFJPVEVDVEVEX1dJVEhJThAGEgoKBlBVQkxJQxAHIu0BChBTeW1ib2xPY2N1cnJlb
  mNlEjwKBXJhbmdlGAEgASgLMiYuc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiMy5SYW5nZVIFcmFuZ2USFgoGc3ltYm9sG
  AIgASgJUgZzeW1ib2wSSgoEcm9sZRgDIAEoDjI2LnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYjMuU3ltYm9sT2NjdXJyZ
  W5jZS5Sb2xlUgRyb2xlIjcKBFJvbGUSEAoMVU5LTk9XTl9ST0xFEAASDQoJUkVGRVJFTkNFEAESDgoKREVGSU5JVElPThACIosCC
  gpEaWFnbm9zdGljEjwKBXJhbmdlGAEgASgLMiYuc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiMy5SYW5nZVIFcmFuZ2USU
  AoIc2V2ZXJpdHkYAiABKA4yNC5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIzLkRpYWdub3N0aWMuU2V2ZXJpdHlSCHNld
  mVyaXR5EhgKB21lc3NhZ2UYAyABKAlSB21lc3NhZ2UiUwoIU2V2ZXJpdHkSFAoQVU5LTk9XTl9TRVZFUklUWRAAEgkKBUVSUk9SE
  AESCwoHV0FSTklORxACEg8KC0lORk9STUFUSU9OEAMSCAoESElOVBAEIowBCglTeW50aGV0aWMSPAoFcmFuZ2UYASABKAsyJi5zY
  2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIzLlJhbmdlUgVyYW5nZRJBCgR0ZXh0GAIgASgLMi0uc2NhbGEubWV0YS5pbnRlc
  m5hbC5zZW1hbnRpY2RiMy5UZXh0RG9jdW1lbnRSBHRleHQqJQoGU2NoZW1hEgoKBkxFR0FDWRAAEg8KC1NFTUFOVElDREIzEAMqN
  QoITGFuZ3VhZ2USFAoQVU5LTk9XTl9MQU5HVUFHRRAAEgkKBVNDQUxBEAESCAoESkFWQRACYgZwcm90bzM="""
      ).mkString)
  lazy val scalaDescriptor: _root_.scalapb.descriptors.FileDescriptor = {
    val scalaProto = com.google.protobuf.descriptor.FileDescriptorProto.parseFrom(ProtoBytes)
    _root_.scalapb.descriptors.FileDescriptor.buildFrom(scalaProto, dependencies.map(_.scalaDescriptor))
  }
  lazy val javaDescriptor: com.google.protobuf.Descriptors.FileDescriptor = {
    val javaProto = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(ProtoBytes)
    com.google.protobuf.Descriptors.FileDescriptor.buildFrom(javaProto, Array(
    ))
  }
  @deprecated("Use javaDescriptor instead. In a future version this will refer to scalaDescriptor.", "ScalaPB 0.5.47")
  def descriptor: com.google.protobuf.Descriptors.FileDescriptor = javaDescriptor
}