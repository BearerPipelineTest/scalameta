// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package scala.meta.internal.semanticdb3

@SerialVersionUID(0L)
final case class StructuralType(
    tpe: _root_.scala.Option[scala.meta.internal.semanticdb3.Type] = None,
    declarations: _root_.scala.Option[scala.meta.internal.semanticdb3.Scope] = None
    ) extends scalapb.GeneratedMessage with scalapb.Message[StructuralType] with scalapb.lenses.Updatable[StructuralType] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (tpe.isDefined) {
        val __value = tpe.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (declarations.isDefined) {
        val __value = declarations.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      tpe.foreach { __v =>
        val __m = __v
        _output__.writeTag(4, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      declarations.foreach { __v =>
        val __m = __v
        _output__.writeTag(5, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb3.StructuralType = {
      var __tpe = this.tpe
      var __declarations = this.declarations
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 34 =>
            __tpe = Option(_root_.scalapb.LiteParser.readMessage(_input__, __tpe.getOrElse(scala.meta.internal.semanticdb3.Type.defaultInstance)))
          case 42 =>
            __declarations = Option(_root_.scalapb.LiteParser.readMessage(_input__, __declarations.getOrElse(scala.meta.internal.semanticdb3.Scope.defaultInstance)))
          case tag => _input__.skipField(tag)
        }
      }
      scala.meta.internal.semanticdb3.StructuralType(
          tpe = __tpe,
          declarations = __declarations
      )
    }
    def getTpe: scala.meta.internal.semanticdb3.Type = tpe.getOrElse(scala.meta.internal.semanticdb3.Type.defaultInstance)
    def clearTpe: StructuralType = copy(tpe = None)
    def withTpe(__v: scala.meta.internal.semanticdb3.Type): StructuralType = copy(tpe = Option(__v))
    def getDeclarations: scala.meta.internal.semanticdb3.Scope = declarations.getOrElse(scala.meta.internal.semanticdb3.Scope.defaultInstance)
    def clearDeclarations: StructuralType = copy(declarations = None)
    def withDeclarations(__v: scala.meta.internal.semanticdb3.Scope): StructuralType = copy(declarations = Option(__v))
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 4 => tpe.orNull
        case 5 => declarations.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 4 => tpe.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => declarations.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = scala.meta.internal.semanticdb3.StructuralType
}

object StructuralType extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb3.StructuralType] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb3.StructuralType] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): scala.meta.internal.semanticdb3.StructuralType = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    scala.meta.internal.semanticdb3.StructuralType(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[_root_.scala.Option[scala.meta.internal.semanticdb3.Type]],
      __fieldsMap.get(__fields.get(1)).asInstanceOf[_root_.scala.Option[scala.meta.internal.semanticdb3.Scope]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb3.StructuralType] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      scala.meta.internal.semanticdb3.StructuralType(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb3.Type]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb3.Scope]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = Semanticdb3Proto.javaDescriptor.getMessageTypes.get(11)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = Semanticdb3Proto.scalaDescriptor.messages(11)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 4 => __out = scala.meta.internal.semanticdb3.Type
      case 5 => __out = scala.meta.internal.semanticdb3.Scope
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = scala.meta.internal.semanticdb3.StructuralType(
  )
  implicit class StructuralTypeLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb3.StructuralType]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb3.StructuralType](_l) {
    def tpe: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb3.Type] = field(_.getTpe)((c_, f_) => c_.copy(tpe = Option(f_)))
    def optionalTpe: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[scala.meta.internal.semanticdb3.Type]] = field(_.tpe)((c_, f_) => c_.copy(tpe = f_))
    def declarations: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb3.Scope] = field(_.getDeclarations)((c_, f_) => c_.copy(declarations = Option(f_)))
    def optionalDeclarations: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[scala.meta.internal.semanticdb3.Scope]] = field(_.declarations)((c_, f_) => c_.copy(declarations = f_))
  }
  final val TPE_FIELD_NUMBER = 4
  final val DECLARATIONS_FIELD_NUMBER = 5
}
