semanticdb/integration/src/main/scala/example/Accessibility.scala
-----------------------------------------------------------------
Language:
Scala

Names:
[8..15): example <= example.
[23..26): Acc <= example.Acc#
[27..27):  <= example.Acc#`<init>`().
[43..45): m1 <= example.Acc#m1().
[48..51): ??? => scala.Predef.`???`().
[72..74): m2 <= example.Acc#m2().
[77..80): ??? => scala.Predef.`???`().
[91..94): Acc => example.Acc#
[100..102): m3 <= example.Acc#m3().
[105..108): ??? => scala.Predef.`???`().
[125..127): m4 <= example.Acc#m4().
[130..133): ??? => scala.Predef.`???`().
[156..158): m5 <= example.Acc#m5().
[161..164): ??? => scala.Predef.`???`().
[177..184): example => example.
[190..192): m6 <= example.Acc#m6().
[195..198): ??? => scala.Predef.`???`().
[205..207): m7 <= example.Acc#m7().
[210..213): ??? => scala.Predef.`???`().

Symbols:
example. => package example.{+11 members}
example.Acc# => class Acc
example.Acc#`<init>`(). => primary ctor <init>: (): Acc
  [4..7): Acc => example.Acc#
example.Acc#m1(). => private method m1: Nothing
  [0..7): Nothing => scala.Nothing#
example.Acc#m2(). => private method m2: Nothing
  [0..7): Nothing => scala.Nothing#
example.Acc#m3(). => private method m3: Nothing
  [0..7): Nothing => scala.Nothing#
example.Acc#m4(). => protected method m4: Nothing
  [0..7): Nothing => scala.Nothing#
example.Acc#m5(). => protected method m5: Nothing
  [0..7): Nothing => scala.Nothing#
example.Acc#m6(). => protected method m6: Nothing
  [0..7): Nothing => scala.Nothing#
example.Acc#m7(). => method m7: Nothing
  [0..7): Nothing => scala.Nothing#
scala.Predef.`???`(). => method ???: Nothing
  [0..7): Nothing => scala.Nothing#


semanticdb/integration/src/main/scala/example/Empty.scala
---------------------------------------------------------
Language:
Scala

Names:
[6..7): A <= _empty_.A#
[8..8):  <= _empty_.A#`<init>`().
[16..17): b <= _empty_.A#b().
[19..20): B => _empty_.B#
[23..26): ??? => scala.Predef.`???`().
[36..37): B <= _empty_.B#
[38..38):  <= _empty_.B#`<init>`().
[46..47): a <= _empty_.B#a().
[49..50): A => _empty_.A#
[53..56): ??? => scala.Predef.`???`().

Symbols:
_empty_.A# => class A
_empty_.A#`<init>`(). => primary ctor <init>: (): A
  [4..5): A => _empty_.A#
_empty_.A#b(). => method b: B
  [0..1): B => _empty_.B#
_empty_.B# => class B
_empty_.B#`<init>`(). => primary ctor <init>: (): B
  [4..5): B => _empty_.B#
_empty_.B#a(). => method a: A
  [0..1): A => _empty_.A#
scala.Predef.`???`(). => method ???: Nothing
  [0..7): Nothing => scala.Nothing#


semanticdb/integration/src/main/scala/example/Example.scala
-----------------------------------------------------------
Language:
Scala

Names:
[8..15): example <= example.
[24..29): scala => scala.
[30..40): concurrent => scala.concurrent.
[41..47): Future => scala.concurrent.Future#
[41..47): Future => scala.concurrent.Future.
[56..63): Example <= example.Example.
[66..70): self <= local0_semanticdb_integration_src_main_scala_example_Example_scala
[80..85): scala => scala.
[86..96): collection => scala.collection.
[97..104): mutable => scala.collection.mutable.
[105..110): Stack => scala.collection.mutable.Stack#
[111..114): Int => scala.Int#
[115..115):  => scala.collection.mutable.Stack#`<init>`().
[124..128): main <= example.Example.main(Array).
[129..133): args <= example.Example.main(Array).(args)
[135..140): Array => scala.Array#
[141..147): String => scala.Predef.String#
[151..155): Unit => scala.Unit#
[164..171): println => scala.Predef.println(Any).
[185..186): x <= example.Example.x().
[189..194): scala => scala.
[195..202): reflect => scala.reflect.
[203..211): classTag => scala.reflect.package.classTag(ClassTag).
[212..215): Int => scala.Int#

Messages:
[41..47): [warning] Unused import
[80..115): [warning] class Stack in package mutable is deprecated (since 2.12.0): Stack is an inelegant and potentially poorly-performing wrapper around List. Use a List assigned to a var instead.

Symbols:
example. => package example.{+11 members}
example.Example. => final object Example
example.Example.main(Array). => method main: (args: Array[String]): Unit
  [7..12): Array => scala.Array#
  [13..19): String => scala.Predef.String#
  [23..27): Unit => scala.Unit#
example.Example.main(Array).(args) => param args: Array[String]
  [0..5): Array => scala.Array#
  [6..12): String => scala.Predef.String#
example.Example.x(). => val method x: ClassTag[Int]
  [0..8): ClassTag => scala.reflect.ClassTag#
  [9..12): Int => scala.Int#
example.Example.x. => private val field x: ClassTag[Int]
  [0..8): ClassTag => scala.reflect.ClassTag#
  [9..12): Int => scala.Int#
local0_semanticdb_integration_src_main_scala_example_Example_scala => selfparam self: Example
  [0..7): Example => example.Example.
scala. => package scala
scala.Array# => final class Array
scala.Int# => abstract final class Int
scala.Predef.String# => type String: String
  [0..6): String => java.lang.String#
scala.Predef.println(Any). => method println: (x: Any): Unit
  [4..7): Any => scala.Any#
  [10..14): Unit => scala.Unit#
scala.Unit# => abstract final class Unit
scala.collection. => package collection
scala.collection.mutable. => package mutable
scala.collection.mutable.Stack# => class Stack
scala.collection.mutable.Stack#`<init>`(). => ctor <init>: (): Stack[A]
  [4..9): Stack => scala.collection.mutable.Stack#
  [10..11): A => scala.collection.mutable.Stack#[A]
scala.concurrent. => package concurrent
scala.reflect. => package reflect
scala.reflect.package.classTag(ClassTag). => method classTag: [T] => (implicit ctag: ClassTag[T]): ClassTag[T]
  [23..31): ClassTag => scala.reflect.ClassTag#
  [32..33): T => scala.reflect.package.classTag(ClassTag).[T]
  [37..45): ClassTag => scala.reflect.ClassTag#
  [46..47): T => scala.reflect.package.classTag(ClassTag).[T]

Synthetics:
[216..216): *(((ClassTag.Int): ClassTag[Int]))
  [0..1): * => _star_.
  [28..31): Int => scala.Int#
  [19..27): ClassTag => scala.reflect.ClassTag#
  [13..16): Int => scala.reflect.ClassTag.Int().


semanticdb/integration/src/main/scala/example/Flags.scala
---------------------------------------------------------
Language:
Scala

Names:
[8..13): flags <= flags.
[22..27): scala => scala.
[28..36): language => scala.language.
[37..49): experimental => scala.language.experimental.
[50..56): macros => scala.language.experimental.macros().
[73..74): p <= flags.p.package.
[96..97): x <= flags.p.package.x().
[127..128): y <= flags.p.package.y().
[130..133): Int => scala.Int#
[144..145): z <= flags.p.package.z(Int).
[146..148): pp <= flags.p.package.z(Int).(pp)
[150..153): Int => scala.Int#
[165..166): m <= flags.p.package.m().
[167..169): TT <= flags.p.package.m().[TT]
[179..182): ??? => scala.Predef.`???`().
[200..201): C <= flags.p.package.C#
[203..204): T <= flags.p.package.C#[T]
[207..208): U <= flags.p.package.C#[U]
[210..211): V <= flags.p.package.C#[V]
[212..212):  <= flags.p.package.C#`<init>`(T,U,V).
[213..214): x <= flags.p.package.C#x.
[216..217): T => flags.p.package.C#[T]
[219..220): y <= flags.p.package.C#y.
[222..223): U => flags.p.package.C#[U]
[225..226): z <= flags.p.package.C#z.
[228..229): V => flags.p.package.C#[V]
[241..245): this <= flags.p.package.C#`<init>`().
[254..254):  => flags.p.package.C#`<init>`(T,U,V).
[255..258): ??? => scala.Predef.`???`().
[260..263): ??? => scala.Predef.`???`().
[265..268): ??? => scala.Predef.`???`().
[278..279): w <= flags.p.package.C#w().
[281..284): Int => scala.Int#
[296..298): T1 <= flags.p.package.T1#
[301..304): Int => scala.Int#
[312..314): T2 <= flags.p.package.T2#
[315..316): T <= flags.p.package.T2#[T]
[320..321): S => flags.p.package.S#
[322..323): T => flags.p.package.T2#[T]
[332..333): U <= flags.p.package.U#
[337..340): Int => scala.Int#
[348..349): V <= flags.p.package.V#
[353..356): Int => scala.Int#
[371..372): X <= flags.p.package.X.
[387..388): Y <= flags.p.package.Y#
[388..388):  <= flags.p.package.Y#`<init>`().
[404..405): Z <= flags.p.package.Z#
[414..416): AA <= flags.p.package.AA#
[416..416):  <= flags.p.package.AA#`<init>`(Int,Int,Int).
[417..418): x <= flags.p.package.AA#x.
[420..423): Int => scala.Int#
[429..430): y <= flags.p.package.AA#y().
[432..435): Int => scala.Int#
[441..442): z <= flags.p.package.AA#z().
[444..447): Int => scala.Int#
[457..458): S <= flags.p.package.S#
[460..471): specialized => scala.specialized#
[472..472):  => scala.specialized#`<init>`().
[472..473): T <= flags.p.package.S#[T]
[474..474):  <= flags.p.package.S#`<init>`().
[481..485): List => scala.collection.immutable.List.
[486..489): xs1 <= flags.p.package.xs1.xs1.
[493..496): ??? => scala.Predef.`???`().
[499..502): ??? => scala.Predef.`???`().
[516..520): List => scala.collection.immutable.List.
[521..524): xs2 <= local0_semanticdb_integration_src_main_scala_example_Flags_scala
[529..532): ??? => scala.Predef.`???`().
[537..540): ??? => scala.Predef.`???`().
[557..561): List => scala.package.List#
[562..563): t <= local1_semanticdb_integration_src_main_scala_example_Flags_scala
[568..571): ??? => scala.Predef.`???`().

Symbols:
flags. => package flags.{+1 members}
flags.p.package. => packageobject package
flags.p.package.AA# => class AA
flags.p.package.AA#`<init>`(Int,Int,Int). => primary ctor <init>: (x: Int, y: Int, z: Int): AA
  [4..7): Int => scala.Int#
  [12..15): Int => scala.Int#
  [20..23): Int => scala.Int#
  [26..28): AA => flags.p.package.AA#
flags.p.package.AA#`<init>`(Int,Int,Int).(x) => param x: Int
  [0..3): Int => scala.Int#
flags.p.package.AA#`<init>`(Int,Int,Int).(y) => val param y: Int
  [0..3): Int => scala.Int#
flags.p.package.AA#`<init>`(Int,Int,Int).(z) => var param z: Int
  [0..3): Int => scala.Int#
flags.p.package.AA#`z_=`(Int). => var method z_=: (x$1: Int): Unit
  [6..9): Int => scala.Int#
  [12..16): Unit => scala.Unit#
flags.p.package.AA#`z_=`(Int).(x$1) => param x$1: Int
  [0..3): Int => scala.Int#
flags.p.package.AA#x. => private val field x: Int
  [0..3): Int => scala.Int#
flags.p.package.AA#y(). => val method y: Int
  [0..3): Int => scala.Int#
flags.p.package.AA#y. => private val field y: Int
  [0..3): Int => scala.Int#
flags.p.package.AA#z(). => var method z: Int
  [0..3): Int => scala.Int#
flags.p.package.AA#z. => private var field z: Int
  [0..3): Int => scala.Int#
flags.p.package.C# => abstract class C
flags.p.package.C#[T] => covariant typeparam T
flags.p.package.C#[U] => contravariant typeparam U
flags.p.package.C#[V] => typeparam V
flags.p.package.C#`<init>`(). => ctor <init>: (): C[T, U, V]
  [4..5): C => flags.p.package.C#
  [6..7): T => flags.p.package.C#[T]
  [9..10): U => flags.p.package.C#[U]
  [12..13): V => flags.p.package.C#[V]
flags.p.package.C#`<init>`(T,U,V). => primary ctor <init>: (x: T, y: U, z: V): C[T, U, V]
  [4..5): T => flags.p.package.C#[T]
  [10..11): U => flags.p.package.C#[U]
  [16..17): V => flags.p.package.C#[V]
  [20..21): C => flags.p.package.C#
  [22..23): T => flags.p.package.C#[T]
  [25..26): U => flags.p.package.C#[U]
  [28..29): V => flags.p.package.C#[V]
flags.p.package.C#`<init>`(T,U,V).(x) => param x: T
  [0..1): T => flags.p.package.C#[T]
flags.p.package.C#`<init>`(T,U,V).(y) => param y: U
  [0..1): U => flags.p.package.C#[U]
flags.p.package.C#`<init>`(T,U,V).(z) => param z: V
  [0..1): V => flags.p.package.C#[V]
flags.p.package.C#w(). => abstract method w: Int
  [0..3): Int => scala.Int#
flags.p.package.C#x. => private val field x: T
  [0..1): T => flags.p.package.C#[T]
flags.p.package.C#y. => private val field y: U
  [0..1): U => flags.p.package.C#[U]
flags.p.package.C#z. => private val field z: V
  [0..1): V => flags.p.package.C#[V]
flags.p.package.S# => class S
flags.p.package.S#[T] => typeparam T
flags.p.package.S#`<init>`(). => primary ctor <init>: (): S[T]
  [4..5): S => flags.p.package.S#
  [6..7): T => flags.p.package.S#[T]
flags.p.package.T1# => type T1: Int
  [0..3): Int => scala.Int#
flags.p.package.T2# => type T2: [T] => S[T]
  [7..8): S => flags.p.package.S#
  [9..10): T => flags.p.package.T2#[T]
flags.p.package.T2#[T] => typeparam T
flags.p.package.U# => abstract type U
flags.p.package.V# => abstract type V
flags.p.package.X. => final case object X
flags.p.package.Y# => final class Y
flags.p.package.Y#`<init>`(). => primary ctor <init>: (): Y
  [4..5): Y => flags.p.package.Y#
flags.p.package.Z# => sealed trait Z
flags.p.package.`y_=`(Int). => protected var method y_=: (x$1: Int): Unit
  [6..9): Int => scala.Int#
  [12..16): Unit => scala.Unit#
flags.p.package.`y_=`(Int).(x$1) => param x$1: Int
  [0..3): Int => scala.Int#
flags.p.package.m(). => macro m: [TT] => Nothing
  [8..15): Nothing => scala.Nothing#
flags.p.package.m().[TT] => typeparam TT
flags.p.package.x(). => private lazy val field x: Int
  [0..3): Int => scala.Int#
flags.p.package.xs1.xs1. => val local xs1: Nothing
  [0..7): Nothing => scala.Nothing#
flags.p.package.y(). => protected implicit var method y: Int
  [0..3): Int => scala.Int#
flags.p.package.y. => private var field y: Int
  [0..3): Int => scala.Int#
flags.p.package.z(Int). => method z: (pp: Int): Int
  [5..8): Int => scala.Int#
  [11..14): Int => scala.Int#
flags.p.package.z(Int).(pp) => param pp: Int
  [0..3): Int => scala.Int#
local0_semanticdb_integration_src_main_scala_example_Flags_scala => val local xs2: Nothing
  [0..7): Nothing => scala.Nothing#
local1_semanticdb_integration_src_main_scala_example_Flags_scala => abstract type t
scala. => package scala
scala.Int# => abstract final class Int
scala.Predef.`???`(). => method ???: Nothing
  [0..7): Nothing => scala.Nothing#
scala.collection.immutable.List. => final object List
scala.language. => final object language
scala.language.experimental. => final object experimental
scala.language.experimental.macros(). => implicit lazy val field macros: macros
  [0..6): macros => scala.languageFeature.experimental.macros#
scala.package.List# => type List: [A] => List[A]
  [7..11): List => scala.collection.immutable.List#
  [12..13): A => scala.package.List#[A]
scala.specialized# => class specialized
scala.specialized#`<init>`(). => ctor <init>: (): specialized
  [4..15): specialized => scala.specialized#

Synthetics:
[485..485): *.unapplySeq[Nothing]
  [0..1): * => _star_.
  [2..12): unapplySeq => scala.collection.generic.SeqFactory#unapplySeq(CC).
  [13..20): Nothing => scala.Nothing#
[520..520): *.unapplySeq[Nothing]
  [0..1): * => _star_.
  [2..12): unapplySeq => scala.collection.generic.SeqFactory#unapplySeq(CC).
  [13..20): Nothing => scala.Nothing#


semanticdb/integration/src/main/scala/example/Imports.scala
-----------------------------------------------------------
Language:
Scala

Names:
[7..12): scala => scala.
[13..17): util => scala.util.
[18..25): control => scala.util.control.
[26..34): NonFatal => scala.util.control.NonFatal.

Messages:
[26..34): [warning] Unused import

Symbols:
scala. => package scala
scala.util. => package util
scala.util.control. => package control
scala.util.control.NonFatal. => final object NonFatal


semanticdb/integration/src/main/scala/example/MetacJava.scala
-------------------------------------------------------------
Language:
Scala

Names:
[8..15): example <= example.
[24..27): com => com.
[28..34): javacp => com.javacp.
[42..51): MetacJava <= example.MetacJava#
[52..52):  <= example.MetacJava#`<init>`().
[56..62): javacp => com.javacp.
[63..72): MetacJava => com.javacp.MetacJava#
[73..84): StaticInner => com.javacp.MetacJava#StaticInner#
[85..93): isStatic => com.javacp.MetacJava#StaticInner#isStatic().
[102..108): javacp => com.javacp.
[109..118): MetacJava => com.javacp.MetacJava#
[119..130): StaticInner => com.javacp.MetacJava#StaticInner#
[130..130):  => com.javacp.MetacJava#StaticInner#`<init>`().
[133..144): isNotStatic => com.javacp.MetacJava#StaticInner#isNotStatic().
[153..158): inner <= example.MetacJava#inner().
[165..171): javacp => com.javacp.
[172..181): MetacJava => com.javacp.MetacJava#
[181..181):  => com.javacp.MetacJava#`<init>`().
[190..199): overload1 <= example.MetacJava#overload1().
[206..211): inner => example.MetacJava#inner().
[212..221): Overload1 => com.javacp.MetacJava#Overload1#
[221..221):  => com.javacp.MetacJava#Overload1#`<init>`().
[230..239): overload2 <= example.MetacJava#overload2().
[246..251): inner => example.MetacJava#inner().
[252..261): Overload2 => com.javacp.MetacJava#Overload2#
[261..261):  => com.javacp.MetacJava#Overload2#`<init>`().
[266..271): inner => example.MetacJava#inner().
[272..280): overload => com.javacp.MetacJava#overload(A).
[285..294): overload1 => example.MetacJava#overload1().
[295..296): A => com.javacp.MetacJava#Overload1#A#
[296..296):  => com.javacp.MetacJava#Overload1#A#`<init>`().
[302..307): inner => example.MetacJava#inner().
[308..316): overload => com.javacp.MetacJava#overload(A+1).
[321..330): overload2 => example.MetacJava#overload2().
[331..332): A => com.javacp.MetacJava#Overload2#A#
[332..332):  => com.javacp.MetacJava#Overload2#A#`<init>`().
[342..353): staticInner <= example.MetacJava#staticInner().
[360..366): javacp => com.javacp.
[367..376): MetacJava => com.javacp.MetacJava#
[377..388): StaticInner => com.javacp.MetacJava#StaticInner#
[388..388):  => com.javacp.MetacJava#StaticInner#`<init>`().
[397..406): nonStatic <= example.MetacJava#nonStatic().
[413..424): staticInner => example.MetacJava#staticInner().
[425..434): NonStatic => com.javacp.MetacJava#StaticInner#NonStatic#
[434..434):  => com.javacp.MetacJava#StaticInner#NonStatic#`<init>`().
[439..448): nonStatic => example.MetacJava#nonStatic().
[449..455): method => com.javacp.MetacJava#StaticInner#NonStatic#method(NonStatic).
[456..465): nonStatic => example.MetacJava#nonStatic().
[469..475): javacp => com.javacp.
[476..485): MetacJava => com.javacp.MetacJava#
[486..494): overload => com.javacp.MetacJava#overload(A+2).
[499..505): javacp => com.javacp.
[506..515): MetacJava => com.javacp.MetacJava#
[516..525): Overload3 => com.javacp.MetacJava#Overload3#
[526..527): A => com.javacp.MetacJava#Overload3#A#
[527..527):  => com.javacp.MetacJava#Overload3#A#`<init>`().
[537..546): interface <= example.MetacJava#interface().
[548..554): javacp => com.javacp.
[555..564): Interface => com.javacp.Interface#
[578..582): coin <= example.MetacJava#coin().
[584..590): javacp => com.javacp.
[591..595): Coin => com.javacp.Coin#
[598..604): javacp => com.javacp.
[605..609): Coin => com.javacp.Coin#
[610..615): PENNY => com.javacp.Coin#PENNY.

Symbols:
com. => package com
com.javacp. => package javacp
com.javacp.Coin# => final javadefined enum class Coin
com.javacp.Coin#PENNY. => final javadefined enum static field PENNY: Coin
  [0..4): Coin => com.javacp.Coin#
com.javacp.Interface# => abstract javadefined interface Interface
com.javacp.MetacJava# => javadefined class MetacJava
com.javacp.MetacJava#Overload1# => javadefined class Overload1
com.javacp.MetacJava#Overload1#A# => javadefined class A
com.javacp.MetacJava#Overload1#A#`<init>`(). => javadefined ctor <init>: (): Overload1.this.A
  [4..13): Overload1 => com.javacp.MetacJava#Overload1#
  [19..20): A => com.javacp.MetacJava#Overload1#A#
com.javacp.MetacJava#Overload1#`<init>`(). => javadefined ctor <init>: (): MetacJava.this.Overload1
  [4..13): MetacJava => com.javacp.MetacJava#
  [19..28): Overload1 => com.javacp.MetacJava#Overload1#
com.javacp.MetacJava#Overload2# => javadefined class Overload2
com.javacp.MetacJava#Overload2#A# => javadefined class A
com.javacp.MetacJava#Overload2#A#`<init>`(). => javadefined ctor <init>: (): Overload2.this.A
  [4..13): Overload2 => com.javacp.MetacJava#Overload2#
  [19..20): A => com.javacp.MetacJava#Overload2#A#
com.javacp.MetacJava#Overload2#`<init>`(). => javadefined ctor <init>: (): MetacJava.this.Overload2
  [4..13): MetacJava => com.javacp.MetacJava#
  [19..28): Overload2 => com.javacp.MetacJava#Overload2#
com.javacp.MetacJava#Overload3# => javadefined static class Overload3
com.javacp.MetacJava#Overload3#A# => javadefined static class A
com.javacp.MetacJava#Overload3#A#`<init>`(). => javadefined ctor <init>: (): A
  [4..5): A => com.javacp.MetacJava#Overload3#A#
com.javacp.MetacJava#StaticInner# => javadefined static class StaticInner
com.javacp.MetacJava#StaticInner#NonStatic# => javadefined class NonStatic
com.javacp.MetacJava#StaticInner#NonStatic#`<init>`(). => javadefined ctor <init>: (): StaticInner.this.NonStatic
  [4..15): StaticInner => com.javacp.MetacJava#StaticInner#
  [21..30): NonStatic => com.javacp.MetacJava#StaticInner#NonStatic#
com.javacp.MetacJava#StaticInner#NonStatic#method(NonStatic). => javadefined method method: (e: StaticInner.this.NonStatic): Unit
  [4..15): StaticInner => com.javacp.MetacJava#StaticInner#
  [21..30): NonStatic => com.javacp.MetacJava#StaticInner#NonStatic#
  [33..37): Unit => scala.Unit#
com.javacp.MetacJava#StaticInner#`<init>`(). => javadefined ctor <init>: (): StaticInner
  [4..15): StaticInner => com.javacp.MetacJava#StaticInner#
com.javacp.MetacJava#StaticInner#isNotStatic(). => javadefined method isNotStatic: (): Unit
  [4..8): Unit => scala.Unit#
com.javacp.MetacJava#StaticInner#isStatic(). => javadefined static method isStatic: (): Unit
  [4..8): Unit => scala.Unit#
com.javacp.MetacJava#`<init>`(). => javadefined ctor <init>: (): MetacJava
  [4..13): MetacJava => com.javacp.MetacJava#
com.javacp.MetacJava#overload(A). => javadefined method overload: (a: A): Unit
  [4..5): A => com.javacp.MetacJava#Overload1#A#
  [8..12): Unit => scala.Unit#
com.javacp.MetacJava#overload(A+1). => javadefined method overload: (a: A): Unit
  [4..5): A => com.javacp.MetacJava#Overload2#A#
  [8..12): Unit => scala.Unit#
com.javacp.MetacJava#overload(A+2). => javadefined static method overload: (a: A): Unit
  [4..5): A => com.javacp.MetacJava#Overload3#A#
  [8..12): Unit => scala.Unit#
example. => package example.{+11 members}
example.MetacJava# => class MetacJava
example.MetacJava#`<init>`(). => primary ctor <init>: (): MetacJava
  [4..13): MetacJava => example.MetacJava#
example.MetacJava#coin(). => val method coin: Coin
  [0..4): Coin => com.javacp.Coin#
example.MetacJava#coin. => private val field coin: Coin
  [0..4): Coin => com.javacp.Coin#
example.MetacJava#inner(). => val method inner: MetacJava
  [0..9): MetacJava => com.javacp.MetacJava#
example.MetacJava#inner. => private val field inner: MetacJava
  [0..9): MetacJava => com.javacp.MetacJava#
example.MetacJava#interface(). => val method interface: Interface
  [0..9): Interface => com.javacp.Interface#
example.MetacJava#interface. => private val field interface: Interface
  [0..9): Interface => com.javacp.Interface#
example.MetacJava#nonStatic(). => val method nonStatic: staticInner.NonStatic
  [0..11): staticInner => example.MetacJava#staticInner().
  [12..21): NonStatic => com.javacp.MetacJava#StaticInner#NonStatic#
example.MetacJava#nonStatic. => private val field nonStatic: staticInner.NonStatic
  [0..11): staticInner => example.MetacJava#staticInner().
  [12..21): NonStatic => com.javacp.MetacJava#StaticInner#NonStatic#
example.MetacJava#overload1(). => val method overload1: inner.Overload1
  [0..5): inner => example.MetacJava#inner().
  [6..15): Overload1 => com.javacp.MetacJava#Overload1#
example.MetacJava#overload1. => private val field overload1: inner.Overload1
  [0..5): inner => example.MetacJava#inner().
  [6..15): Overload1 => com.javacp.MetacJava#Overload1#
example.MetacJava#overload2(). => val method overload2: inner.Overload2
  [0..5): inner => example.MetacJava#inner().
  [6..15): Overload2 => com.javacp.MetacJava#Overload2#
example.MetacJava#overload2. => private val field overload2: inner.Overload2
  [0..5): inner => example.MetacJava#inner().
  [6..15): Overload2 => com.javacp.MetacJava#Overload2#
example.MetacJava#staticInner(). => val method staticInner: StaticInner
  [0..11): StaticInner => com.javacp.MetacJava#StaticInner#
example.MetacJava#staticInner. => private val field staticInner: StaticInner
  [0..11): StaticInner => com.javacp.MetacJava#StaticInner#


semanticdb/integration/src/main/scala/example/Methods.scala
-----------------------------------------------------------
Language:
Scala

Names:
[8..15): example <= example.
[24..29): scala => scala.
[30..34): math => scala.math.
[35..43): Ordering => scala.math.Ordering#
[35..43): Ordering => scala.math.Ordering.
[51..58): Methods <= example.Methods#
[59..60): T <= example.Methods#[T]
[62..62):  <= example.Methods#`<init>`().
[72..76): List <= example.Methods#List#
[77..78): T <= example.Methods#List#[T]
[79..79):  <= example.Methods#List#`<init>`().
[87..92): AList <= example.Methods#AList#
[93..94): T <= example.Methods#AList#[T]
[98..102): List => example.Methods#List#
[103..104): T => example.Methods#AList#[T]
[112..114): m1 <= example.Methods#m1().
[117..120): ??? => scala.Predef.`???`().
[127..129): m2 <= example.Methods#m2().
[134..137): ??? => scala.Predef.`???`().
[144..146): m3 <= example.Methods#m3(Int).
[147..148): x <= example.Methods#m3(Int).(x)
[150..153): Int => scala.Int#
[157..160): ??? => scala.Predef.`???`().
[167..169): m4 <= example.Methods#m4(Int,Int).
[170..171): x <= example.Methods#m4(Int,Int).(x)
[173..176): Int => scala.Int#
[178..179): y <= example.Methods#m4(Int,Int).(y)
[181..184): Int => scala.Int#
[188..191): ??? => scala.Predef.`???`().
[198..200): m5 <= example.Methods#m5(String).
[201..202): x <= example.Methods#m5(String).(x)
[204..210): String => scala.Predef.String#
[214..217): ??? => scala.Predef.`???`().
[224..226): m5 <= example.Methods#m5(Int).
[227..228): x <= example.Methods#m5(Int).(x)
[230..233): Int => scala.Int#
[237..240): ??? => scala.Predef.`???`().
[247..249): m6 <= example.Methods#m6(Int).
[250..251): x <= example.Methods#m6(Int).(x)
[253..256): Int => scala.Int#
[260..263): ??? => scala.Predef.`???`().
[270..272): m6 <= example.Methods#m6(List).
[273..274): x <= example.Methods#m6(List).(x)
[276..280): List => example.Methods#List#
[281..282): T => example.Methods#[T]
[287..290): ??? => scala.Predef.`???`().
[297..299): m6 <= example.Methods#m6(List+1).
[300..301): x <= example.Methods#m6(List+1).(x)
[303..308): scala => scala.
[309..313): List => scala.package.List#
[314..315): T => example.Methods#[T]
[320..323): ??? => scala.Predef.`???`().
[330..333): m7a <= example.Methods#m7a(Methods,List,Ordering).
[334..335): U <= example.Methods#m7a(Methods,List,Ordering).[U]
[337..345): Ordering => scala.math.Ordering#
[347..348): c <= example.Methods#m7a(Methods,List,Ordering).(c)
[350..357): Methods => example.Methods#
[358..359): T => example.Methods#[T]
[362..363): l <= example.Methods#m7a(Methods,List,Ordering).(l)
[365..369): List => example.Methods#List#
[370..371): U => example.Methods#m7a(Methods,List,Ordering).[U]
[376..379): ??? => scala.Predef.`???`().
[386..389): m7b <= example.Methods#m7b(List,Function1).
[390..391): U <= example.Methods#m7b(List,Function1).[U]
[395..396): T => example.Methods#[T]
[398..399): l <= example.Methods#m7b(List,Function1).(l)
[401..405): List => example.Methods#List#
[406..407): U => example.Methods#m7b(List,Function1).[U]
[412..415): ??? => scala.Predef.`???`().
[422..429): `m8().` <= example.Methods#`m8().`().
[434..437): ??? => scala.Predef.`???`().
[446..453): `m9().` <= example.Methods#`m9().`#
[453..453):  <= example.Methods#`m9().`#`<init>`().
[460..462): m9 <= example.Methods#m9(`m9().`).
[463..464): x <= example.Methods#m9(`m9().`).(x)
[466..473): `m9().` => example.Methods#`m9().`#
[477..480): ??? => scala.Predef.`???`().
[487..490): m10 <= example.Methods#m10(AList).
[491..492): x <= example.Methods#m10(AList).(x)
[494..499): AList => example.Methods#AList#
[500..501): T => example.Methods#[T]
[506..509): ??? => scala.Predef.`???`().
[516..519): m11 <= example.Methods#m11(.type).
[520..521): x <= example.Methods#m11(.type).(x)
[523..529): Predef => scala.Predef.
[538..541): ??? => scala.Predef.`???`().
[548..551): m11 <= example.Methods#m11(.type+1).
[552..553): x <= example.Methods#m11(.type+1).(x)
[555..562): Example => example.Example.
[571..574): ??? => scala.Predef.`???`().
[581..585): m12a <= example.Methods#m12a({}).
[586..587): x <= example.Methods#m12a({}).(x)
[595..598): ??? => scala.Predef.`???`().
[605..609): m12b <= example.Methods#m12b({}).
[610..611): x <= example.Methods#m12b({}).(x)
[619..620): x <= example.Methods#$anon#x().
[622..625): Int => scala.Int#
[631..634): ??? => scala.Predef.`???`().
[641..644): m13 <= example.Methods#m13(Int).
[645..646): x <= example.Methods#m13(Int).(x)
[648..651): Int => scala.Int#
[653..662): unchecked => scala.unchecked#
[662..662):  => scala.unchecked#`<init>`().
[666..669): ??? => scala.Predef.`???`().
[676..679): m14 <= example.Methods#m14(T).
[680..681): x <= example.Methods#m14(T).(x)
[683..684): T => example.Methods#m14(T).(x)T#
[700..701): T <= example.Methods#m14(T).(x)T#
[707..710): ??? => scala.Predef.`???`().
[717..720): m15 <= example.Methods#m15(=>Int).
[721..722): x <= example.Methods#m15(=>Int).(x)
[727..730): Int => scala.Int#
[734..737): ??? => scala.Predef.`???`().
[744..747): m16 <= example.Methods#m16(Int*).
[748..749): x <= example.Methods#m16(Int*).(x)
[751..754): Int => scala.`<repeated>`#
[759..762): ??? => scala.Predef.`???`().
[772..784): MethodUsages <= example.MethodUsages#
[785..785):  <= example.MethodUsages#`<init>`().
[793..794): m <= example.MethodUsages#m().
[801..808): Methods => example.Methods#
[809..812): Int => scala.Int#
[813..813):  => example.Methods#`<init>`().
[816..817): m => example.MethodUsages#m().
[818..820): m1 => example.Methods#m1().
[823..824): m => example.MethodUsages#m().
[825..827): m2 => example.Methods#m2().
[832..833): m => example.MethodUsages#m().
[834..836): m3 => example.Methods#m3(Int).
[842..843): m => example.MethodUsages#m().
[844..846): m4 => example.Methods#m4(Int,Int).
[855..856): m => example.MethodUsages#m().
[857..859): m5 => example.Methods#m5(String).
[866..867): m => example.MethodUsages#m().
[868..870): m5 => example.Methods#m5(Int).
[876..877): m => example.MethodUsages#m().
[878..880): m6 => example.Methods#m6(Int).
[886..887): m => example.MethodUsages#m().
[888..890): m6 => example.Methods#m6(List).
[895..896): m => example.MethodUsages#m().
[897..901): List => example.Methods#List#
[902..905): Int => scala.Int#
[906..906):  => example.Methods#List#`<init>`().
[910..911): m => example.MethodUsages#m().
[912..914): m6 => example.Methods#m6(List+1).
[915..918): Nil => scala.collection.immutable.Nil.
[922..923): m => example.MethodUsages#m().
[924..927): m7a => example.Methods#m7a(Methods,List,Ordering).
[928..929): m => example.MethodUsages#m().
[935..936): m => example.MethodUsages#m().
[937..941): List => example.Methods#List#
[942..945): Int => scala.Int#
[946..946):  => example.Methods#List#`<init>`().
[950..951): m => example.MethodUsages#m().
[952..955): m7b => example.Methods#m7b(List,Function1).
[960..961): m => example.MethodUsages#m().
[962..966): List => example.Methods#List#
[967..970): Int => scala.Int#
[971..971):  => example.Methods#List#`<init>`().
[975..976): m => example.MethodUsages#m().
[977..984): `m8().` => example.Methods#`m8().`().
[989..990): m => example.MethodUsages#m().
[991..993): m9 => example.Methods#m9(`m9().`).
[1002..1003): m => example.MethodUsages#m().
[1004..1007): m10 => example.Methods#m10(AList).
[1016..1017): m => example.MethodUsages#m().
[1018..1021): m11 => example.Methods#m11(.type).
[1022..1028): Predef => scala.Predef.
[1032..1033): m => example.MethodUsages#m().
[1034..1037): m11 => example.Methods#m11(.type+1).
[1038..1045): Example => example.Example.
[1049..1050): m => example.MethodUsages#m().
[1051..1055): m12a => example.Methods#m12a({}).
[1064..1065): m => example.MethodUsages#m().
[1066..1070): m12b => example.Methods#m12b({}).
[1079..1080): m => example.MethodUsages#m().
[1081..1084): m13 => example.Methods#m13(Int).
[1090..1091): m => example.MethodUsages#m().
[1092..1095): m14 => example.Methods#m14(T).
[1104..1105): m => example.MethodUsages#m().
[1106..1109): m15 => example.Methods#m15(=>Int).
[1115..1116): m => example.MethodUsages#m().
[1117..1120): m16 => example.Methods#m16(Int*).

Messages:
[683..703): [warning] the existential type T forSome { type T }, which cannot be expressed by wildcards,  should be enabled
by making the implicit value scala.language.existentials visible.
[683..703): [warning] the existential type T forSome { type T }, which cannot be expressed by wildcards,  should be enabled
by making the implicit value scala.language.existentials visible.
This can be achieved by adding the import clause 'import scala.language.existentials'
or by setting the compiler option -language:existentials.
See the Scaladoc for value scala.language.existentials for a discussion
why the feature should be explicitly enabled.

Symbols:
example. => package example.{+11 members}
example.Example. => final object Example
example.MethodUsages# => class MethodUsages
example.MethodUsages#`<init>`(). => primary ctor <init>: (): MethodUsages
  [4..16): MethodUsages => example.MethodUsages#
example.MethodUsages#m(). => val method m: Methods[Int]
  [0..7): Methods => example.Methods#
  [8..11): Int => scala.Int#
example.MethodUsages#m. => private val field m: Methods[Int]
  [0..7): Methods => example.Methods#
  [8..11): Int => scala.Int#
example.Methods# => class Methods
example.Methods#$anon#x(). => abstract val method x: Int
  [0..3): Int => scala.Int#
example.Methods#AList# => type AList: [T] => Methods.this.List[T]
  [7..14): Methods => example.Methods#
  [20..24): List => example.Methods#List#
  [25..26): T => example.Methods#AList#[T]
example.Methods#AList#[T] => typeparam T
example.Methods#List# => class List
example.Methods#List#[T] => typeparam T
example.Methods#List#`<init>`(). => primary ctor <init>: (): Methods.this.List[T]
  [4..11): Methods => example.Methods#
  [17..21): List => example.Methods#List#
  [22..23): T => example.Methods#List#[T]
example.Methods#[T] => typeparam T
example.Methods#`<init>`(). => primary ctor <init>: (): Methods[T]
  [4..11): Methods => example.Methods#
  [12..13): T => example.Methods#[T]
example.Methods#`m8().`(). => method m8().: (): Nothing
  [4..11): Nothing => scala.Nothing#
example.Methods#`m9().`# => class m9().
example.Methods#`m9().`#`<init>`(). => primary ctor <init>: (): Methods.this.`m9().`
  [4..11): Methods => example.Methods#
  [17..24): `m9().` => example.Methods#`m9().`#
example.Methods#m1(). => method m1: Nothing
  [0..7): Nothing => scala.Nothing#
example.Methods#m10(AList). => method m10: (x: Methods.this.AList[T]): Nothing
  [4..11): Methods => example.Methods#
  [17..22): AList => example.Methods#AList#
  [23..24): T => example.Methods#[T]
  [28..35): Nothing => scala.Nothing#
example.Methods#m10(AList).(x) => param x: Methods.this.AList[T]
  [0..7): Methods => example.Methods#
  [13..18): AList => example.Methods#AList#
  [19..20): T => example.Methods#[T]
example.Methods#m11(.type). => method m11: (x: Predef.type): Nothing
  [4..10): Predef => scala.Predef.
  [18..25): Nothing => scala.Nothing#
example.Methods#m11(.type).(x) => param x: Predef.type
  [0..6): Predef => scala.Predef.
example.Methods#m11(.type+1). => method m11: (x: Example.type): Nothing
  [4..11): Example => example.Example.
  [19..26): Nothing => scala.Nothing#
example.Methods#m11(.type+1).(x) => param x: Example.type
  [0..7): Example => example.Example.
example.Methods#m12a({}). => method m12a: (x: AnyRef{}): Nothing
  [4..10): AnyRef => scala.AnyRef#
  [15..22): Nothing => scala.Nothing#
example.Methods#m12a({}).(x) => param x: AnyRef{}
  [0..6): AnyRef => scala.AnyRef#
example.Methods#m12b({}). => method m12b: (x: AnyRef{val x: Int}): Nothing
  [4..10): AnyRef => scala.AnyRef#
  [15..16): x => example.Methods#$anon#x().
  [25..32): Nothing => scala.Nothing#
example.Methods#m12b({}).(x) => param x: AnyRef{val x: Int}
  [0..6): AnyRef => scala.AnyRef#
  [11..12): x => example.Methods#$anon#x().
example.Methods#m13(Int). => method m13: (x: Int): Nothing
  [4..7): Int => scala.Int#
  [10..17): Nothing => scala.Nothing#
example.Methods#m13(Int).(x) => param x: Int
  [0..3): Int => scala.Int#
example.Methods#m14(T). => method m14: (x: T forSome { type T }): Nothing
  [27..34): Nothing => scala.Nothing#
example.Methods#m14(T).(x) => param x: T forSome { type T }
example.Methods#m14(T).(x)T# => abstract type T
example.Methods#m15(=>Int). => method m15: (x: =>Int): Nothing
  [6..9): Int => scala.Int#
  [12..19): Nothing => scala.Nothing#
example.Methods#m15(=>Int).(x) => param x: =>Int
  [2..5): Int => scala.Int#
example.Methods#m16(Int*). => method m16: (x: Int*): Nothing
  [4..7): Int => scala.Int#
  [11..18): Nothing => scala.Nothing#
example.Methods#m16(Int*).(x) => param x: Int*
  [0..3): Int => scala.Int#
example.Methods#m2(). => method m2: (): Nothing
  [4..11): Nothing => scala.Nothing#
example.Methods#m3(Int). => method m3: (x: Int): Nothing
  [4..7): Int => scala.Int#
  [10..17): Nothing => scala.Nothing#
example.Methods#m3(Int).(x) => param x: Int
  [0..3): Int => scala.Int#
example.Methods#m4(Int,Int). => method m4: (x: Int)(y: Int): Nothing
  [4..7): Int => scala.Int#
  [12..15): Int => scala.Int#
  [18..25): Nothing => scala.Nothing#
example.Methods#m4(Int,Int).(x) => param x: Int
  [0..3): Int => scala.Int#
example.Methods#m4(Int,Int).(y) => param y: Int
  [0..3): Int => scala.Int#
example.Methods#m5(Int). => method m5: (x: Int): Nothing
  [4..7): Int => scala.Int#
  [10..17): Nothing => scala.Nothing#
example.Methods#m5(Int).(x) => param x: Int
  [0..3): Int => scala.Int#
example.Methods#m5(String). => method m5: (x: String): Nothing
  [4..10): String => scala.Predef.String#
  [13..20): Nothing => scala.Nothing#
example.Methods#m5(String).(x) => param x: String
  [0..6): String => scala.Predef.String#
example.Methods#m6(Int). => method m6: (x: Int): Nothing
  [4..7): Int => scala.Int#
  [10..17): Nothing => scala.Nothing#
example.Methods#m6(Int).(x) => param x: Int
  [0..3): Int => scala.Int#
example.Methods#m6(List). => method m6: (x: Methods.this.List[T]): Nothing
  [4..11): Methods => example.Methods#
  [17..21): List => example.Methods#List#
  [22..23): T => example.Methods#[T]
  [27..34): Nothing => scala.Nothing#
example.Methods#m6(List).(x) => param x: Methods.this.List[T]
  [0..7): Methods => example.Methods#
  [13..17): List => example.Methods#List#
  [18..19): T => example.Methods#[T]
example.Methods#m6(List+1). => method m6: (x: List[T]): Nothing
  [4..8): List => scala.package.List#
  [9..10): T => example.Methods#[T]
  [14..21): Nothing => scala.Nothing#
example.Methods#m6(List+1).(x) => param x: List[T]
  [0..4): List => scala.package.List#
  [5..6): T => example.Methods#[T]
example.Methods#m7a(Methods,List,Ordering). => method m7a: [U] => (c: Methods[T], l: Methods.this.List[U])(implicit evidence$1: Ordering[U]): Nothing
  [11..18): Methods => example.Methods#
  [19..20): T => example.Methods#[T]
  [26..33): Methods => example.Methods#
  [39..43): List => example.Methods#List#
  [44..45): U => example.Methods#m7a(Methods,List,Ordering).[U]
  [69..77): Ordering => scala.math.Ordering#
  [78..79): U => example.Methods#m7a(Methods,List,Ordering).[U]
  [83..90): Nothing => scala.Nothing#
example.Methods#m7a(Methods,List,Ordering).(c) => param c: Methods[T]
  [0..7): Methods => example.Methods#
  [8..9): T => example.Methods#[T]
example.Methods#m7a(Methods,List,Ordering).(l) => param l: Methods.this.List[U]
  [0..7): Methods => example.Methods#
  [13..17): List => example.Methods#List#
  [18..19): U => example.Methods#m7a(Methods,List,Ordering).[U]
example.Methods#m7a(Methods,List,Ordering).[U] => typeparam U
example.Methods#m7b(List,Function1). => method m7b: [U] => (l: Methods.this.List[U])(implicit evidence$2: Function1[U, T]): Nothing
  [11..18): Methods => example.Methods#
  [24..28): List => example.Methods#List#
  [29..30): U => example.Methods#m7b(List,Function1).[U]
  [54..63): Function1 => scala.Function1#
  [64..65): U => example.Methods#m7b(List,Function1).[U]
  [67..68): T => example.Methods#[T]
  [72..79): Nothing => scala.Nothing#
example.Methods#m7b(List,Function1).(l) => param l: Methods.this.List[U]
  [0..7): Methods => example.Methods#
  [13..17): List => example.Methods#List#
  [18..19): U => example.Methods#m7b(List,Function1).[U]
example.Methods#m7b(List,Function1).[U] => typeparam U
example.Methods#m9(`m9().`). => method m9: (x: Methods.this.`m9().`): Nothing
  [4..11): Methods => example.Methods#
  [17..24): `m9().` => example.Methods#`m9().`#
  [27..34): Nothing => scala.Nothing#
example.Methods#m9(`m9().`).(x) => param x: Methods.this.`m9().`
  [0..7): Methods => example.Methods#
  [13..20): `m9().` => example.Methods#`m9().`#
scala. => package scala
scala.Int# => abstract final class Int
scala.Predef. => final object Predef
scala.Predef.String# => type String: String
  [0..6): String => java.lang.String#
scala.Predef.`???`(). => method ???: Nothing
  [0..7): Nothing => scala.Nothing#
scala.collection.immutable.Nil. => final case object Nil
scala.math. => package math
scala.math.Ordering# => trait Ordering
scala.package.List# => type List: [A] => List[A]
  [7..11): List => scala.collection.immutable.List#
  [12..13): A => scala.package.List#[A]
scala.unchecked# => class unchecked
scala.unchecked#`<init>`(). => primary ctor <init>: (): unchecked
  [4..13): unchecked => scala.unchecked#

Synthetics:
[927..927): *[Int]
  [0..1): * => _star_.
  [2..5): Int => scala.Int#
[947..947): *(scala.math.Ordering.Int)
  [0..1): * => _star_.
  [22..25): Int => scala.math.Ordering.Int.
[955..955): *[Int]
  [0..1): * => _star_.
  [2..5): Int => scala.Int#
[972..972): *(scala.Predef.$conforms[Int])
  [0..1): * => _star_.
  [15..24): $conforms => scala.Predef.$conforms().
  [25..28): Int => scala.Int#


semanticdb/integration/src/main/scala/example/Overrides.scala
-------------------------------------------------------------
Language:
Scala

Names:
[8..15): example <= example.
[23..24): A <= example.A#
[31..34): foo <= example.A#foo().
[36..39): Int => scala.Int#
[48..49): B <= example.B#
[49..49):  <= example.B#`<init>`().
[60..61): A => example.A#
[62..62):  => java.lang.Object#`<init>`().
[68..71): foo <= example.B#foo().
[73..76): Int => scala.Int#

Symbols:
example. => package example.{+11 members}
example.A# => trait A.{+1 members}
example.A#foo(). => abstract method foo: Int
  [0..3): Int => scala.Int#
example.B# => class B
example.B#`<init>`(). => primary ctor <init>: (): B
  [4..5): B => example.B#
example.B#foo(). => method foo: Int
  override example.A#foo().
  [0..3): Int => scala.Int#
java.lang.Object#`<init>`(). => javadefined ctor <init>: (): Object
  [4..10): Object => java.lang.Object#
scala.Int# => abstract final class Int


semanticdb/integration/src/main/scala/example/Synthetic.scala
-------------------------------------------------------------
Language:
Scala

Names:
[8..15): example <= example.
[23..32): Synthetic <= example.Synthetic#
[33..33):  <= example.Synthetic#`<init>`().
[37..41): List => scala.collection.immutable.List.
[45..48): map => scala.collection.immutable.List#map(Function1,CanBuildFrom).
[51..52): + => scala.Int#`+`(Int).
[58..63): Array => scala.Array.
[64..69): empty => scala.Array.empty(ClassTag).
[70..73): Int => scala.Int#
[75..85): headOption => scala.collection.TraversableLike#headOption().
[95..106): stripPrefix => scala.collection.immutable.StringLike#stripPrefix(String).

Symbols:
example. => package example.{+11 members}
example.Synthetic# => class Synthetic
example.Synthetic#`<init>`(). => primary ctor <init>: (): Synthetic
  [4..13): Synthetic => example.Synthetic#
scala.Array. => final object Array
scala.Array.empty(ClassTag). => method empty: [T] => (implicit evidence$1: ClassTag[T]): Array[T]
  [29..37): ClassTag => scala.reflect.ClassTag#
  [38..39): T => scala.Array.empty(ClassTag).[T]
  [43..48): Array => scala.Array#
  [49..50): T => scala.Array.empty(ClassTag).[T]
scala.Int# => abstract final class Int
scala.Int#`+`(Int). => abstract method +: (x: Int): Int
  [4..7): Int => scala.Int#
  [10..13): Int => scala.Int#
scala.collection.TraversableLike#headOption(). => method headOption: Option[A]
  [0..6): Option => scala.Option#
  [7..8): A => scala.collection.TraversableLike#[A]
scala.collection.immutable.List#map(Function1,CanBuildFrom). => final method map: [B, That] => (f: Function1[A, B])(implicit bf: CanBuildFrom[List[A], B, That]): That
  [17..26): Function1 => scala.Function1#
  [27..28): A => scala.collection.immutable.List#[A]
  [30..31): B => scala.collection.immutable.List#map(Function1,CanBuildFrom).[B]
  [47..59): CanBuildFrom => scala.collection.generic.CanBuildFrom#
  [60..64): List => scala.collection.immutable.List#
  [65..66): A => scala.collection.immutable.List#[A]
  [69..70): B => scala.collection.immutable.List#map(Function1,CanBuildFrom).[B]
  [72..76): That => scala.collection.immutable.List#map(Function1,CanBuildFrom).[That]
  [80..84): That => scala.collection.immutable.List#map(Function1,CanBuildFrom).[That]
scala.collection.immutable.List. => final object List
scala.collection.immutable.StringLike#stripPrefix(String). => method stripPrefix: (prefix: String): String
  [9..15): String => scala.Predef.String#
  [18..24): String => java.lang.String#

Synthetics:
[41..41): *.apply[Int]
  [0..1): * => _star_.
  [2..7): apply => scala.collection.immutable.List.apply(A*).
  [8..11): Int => scala.Int#
[48..48): *[Int, List[Int]]
  [0..1): * => _star_.
  [2..5): Int => scala.Int#
  [12..15): Int => scala.Int#
  [7..11): List => scala.collection.immutable.List#
[55..55): *(scala.collection.immutable.List.canBuildFrom[Int])
  [0..1): * => _star_.
  [47..50): Int => scala.Int#
  [34..46): canBuildFrom => scala.collection.immutable.List.canBuildFrom().
[58..74): scala.Predef.intArrayOps(*)
  [13..24): intArrayOps => scala.Predef.intArrayOps(Array).
  [25..26): * => _star_.
[74..74): *(((ClassTag.Int): ClassTag[Int]))
  [0..1): * => _star_.
  [28..31): Int => scala.Int#
  [19..27): ClassTag => scala.reflect.ClassTag#
  [13..16): Int => scala.reflect.ClassTag.Int().
[88..94): scala.Predef.augmentString(*)
  [13..26): augmentString => scala.Predef.augmentString(String).
  [27..28): * => _star_.


semanticdb/integration/src/main/scala/example/Types.scala
---------------------------------------------------------
Language:
Scala

Names:
[8..13): types <= types.
[22..27): scala => scala.
[28..36): language => scala.language.
[37..49): existentials => scala.language.existentials().
[57..62): scala => scala.
[63..71): language => scala.language.
[72..83): higherKinds => scala.language.higherKinds().
[91..94): ann <= types.ann#
[95..96): T <= types.ann#[T]
[97..97):  <= types.ann#`<init>`(T).
[98..99): x <= types.ann#x.
[101..102): T => types.ann#[T]
[112..117): scala => scala.
[118..128): annotation => scala.annotation.
[129..145): StaticAnnotation => scala.annotation.StaticAnnotation#
[152..156): ann1 <= types.ann1#
[157..157):  <= types.ann1#`<init>`().
[165..170): scala => scala.
[171..181): annotation => scala.annotation.
[182..198): StaticAnnotation => scala.annotation.StaticAnnotation#
[205..209): ann2 <= types.ann2#
[210..210):  <= types.ann2#`<init>`().
[218..223): scala => scala.
[224..234): annotation => scala.annotation.
[235..251): StaticAnnotation => scala.annotation.StaticAnnotation#
[259..260): B <= types.B#
[268..269): C <= types.C#
[277..278): P <= types.P#
[279..279):  <= types.P#`<init>`().
[289..290): C <= types.P#C#
[290..290):  <= types.P#C#`<init>`().
[299..300): X <= types.P#X#
[300..300):  <= types.P#X#`<init>`().
[307..308): x <= types.P#x().
[315..316): X => types.P#X#
[317..317):  => types.P#X#`<init>`().
[326..327): T <= types.T#
[328..328):  <= types.T#`<init>`().
[338..339): C <= types.T#C#
[339..339):  <= types.T#C#`<init>`().
[348..349): X <= types.T#X#
[349..349):  <= types.T#X#`<init>`().
[356..357): x <= types.T#x().
[364..365): X => types.T#X#
[366..366):  => types.T#X#`<init>`().
[376..380): Test <= types.Test.
[391..392): M <= types.Test.M#
[393..393):  <= types.Test.M#`<init>`().
[403..404): m <= types.Test.M#m().
[406..409): Int => scala.Int#
[412..415): ??? => scala.Predef.`???`().
[429..430): N <= types.Test.N#
[431..431):  <= types.Test.N#`<init>`().
[441..442): n <= types.Test.N#n().
[444..447): Int => scala.Int#
[450..453): ??? => scala.Predef.`???`().
[467..468): C <= types.Test.C#
[469..469):  <= types.Test.C#`<init>`().
[477..478): M => types.Test.M#
[479..479):  => types.Test.M#`<init>`().
[489..490): p <= types.Test.C#p().
[497..498): P => types.P#
[498..498):  => types.P#`<init>`().
[507..508): x <= types.Test.C#x().
[511..512): p => types.Test.C#p().
[513..514): x => types.P#x().
[524..532): typeRef1 <= types.Test.C#typeRef1().
[534..535): C => types.Test.C#
[538..541): ??? => scala.Predef.`???`().
[550..558): typeRef2 <= types.Test.C#typeRef2().
[560..561): p => types.Test.C#p().
[562..563): C => types.P#C#
[566..569): ??? => scala.Predef.`???`().
[578..586): typeRef3 <= types.Test.C#typeRef3().
[588..589): T => types.T#
[590..591): C => types.T#C#
[594..597): ??? => scala.Predef.`???`().
[606..614): typeRef4 <= types.Test.C#typeRef4().
[616..620): List => scala.package.List#
[621..624): Int => scala.Int#
[628..631): ??? => scala.Predef.`???`().
[641..652): singleType1 <= types.Test.C#singleType1().
[654..655): x => types.Test.C#x().
[663..666): ??? => scala.Predef.`???`().
[675..686): singleType2 <= types.Test.C#singleType2().
[688..689): p => types.Test.C#p().
[690..691): x => types.P#x().
[699..702): ??? => scala.Predef.`???`().
[712..721): thisType1 <= types.Test.C#thisType1().
[735..738): ??? => scala.Predef.`???`().
[747..756): thisType2 <= types.Test.C#thisType2().
[758..759): C => types.Test.C#
[772..775): ??? => scala.Predef.`???`().
[785..795): superType1 <= types.Test.C#superType1().
[804..805): m => types.Test.M#m().
[814..824): superType2 <= types.Test.C#superType2().
[833..834): M => types.Test.C#
[836..837): m => types.Test.M#m().
[846..856): superType3 <= types.Test.C#superType3().
[859..860): C => types.Test.C#
[867..868): M => types.Test.C#
[870..871): m => types.Test.M#m().
[881..894): compoundType1 <= types.Test.C#compoundType1().
[902..903): k <= types.Test.C#$anon#k().
[905..908): Int => scala.Int#
[913..916): ??? => scala.Predef.`???`().
[925..938): compoundType2 <= types.Test.C#compoundType2().
[940..941): M => types.Test.M#
[947..948): N => types.Test.N#
[951..954): ??? => scala.Predef.`???`().
[963..976): compoundType3 <= types.Test.C#compoundType3().
[978..979): M => types.Test.M#
[985..986): N => types.Test.N#
[993..994): k <= types.Test.C#$anon#k().
[996..999): Int => scala.Int#
[1004..1007): ??? => scala.Predef.`???`().
[1017..1025): annType1 <= types.Test.C#annType1().
[1027..1028): T => types.T#
[1030..1033): ann => types.ann#
[1033..1033):  => types.ann#`<init>`(T).
[1040..1043): ??? => scala.Predef.`???`().
[1052..1060): annType2 <= types.Test.C#annType2().
[1062..1063): T => types.T#
[1065..1069): ann1 => types.ann1#
[1070..1070):  => types.ann1#`<init>`().
[1071..1075): ann2 => types.ann2#
[1076..1076):  => types.ann2#`<init>`().
[1078..1081): ??? => scala.Predef.`???`().
[1091..1107): existentialType1 <= types.Test.C#existentialType1().
[1109..1110): T => types.Test.C#existentialType1.T#
[1126..1127): T <= types.Test.C#existentialType1.T#
[1132..1135): ??? => scala.Predef.`???`().
[1145..1156): typeLambda1 <= types.Test.C#typeLambda1().
[1157..1158): M <= types.Test.C#typeLambda1().[M]
[1165..1168): ??? => scala.Predef.`???`().
[1173..1184): typeLambda1 => types.Test.C#typeLambda1().
[1193..1194): L <= types.Test.C#$anon#L#
[1195..1196): T <= types.Test.C#$anon#L#[T]
[1200..1204): List => scala.package.List#
[1205..1206): T => types.Test.C#$anon#L#[T]
[1211..1212): L => types.Test.C#$anon#L#
[1226..1240): ClassInfoType1 <= types.Test.C#ClassInfoType1.
[1251..1265): ClassInfoType2 <= types.Test.C#ClassInfoType2#
[1266..1266):  <= types.Test.C#ClassInfoType2#`<init>`().
[1274..1275): B => types.B#
[1276..1276):  => types.B#`<init>`().
[1282..1283): x <= types.Test.C#ClassInfoType2#x().
[1301..1315): ClassInfoType3 <= types.Test.C#ClassInfoType3#
[1316..1317): T <= types.Test.C#ClassInfoType3#[T]
[1331..1341): MethodType <= types.Test.C#MethodType.
[1354..1356): x1 <= types.Test.C#MethodType.x1().
[1358..1361): Int => scala.Int#
[1364..1367): ??? => scala.Predef.`???`().
[1378..1380): x2 <= types.Test.C#MethodType.x2().
[1382..1385): Int => scala.Int#
[1388..1391): ??? => scala.Predef.`???`().
[1402..1404): m3 <= types.Test.C#MethodType.m3().
[1406..1409): Int => scala.Int#
[1412..1415): ??? => scala.Predef.`???`().
[1426..1428): m4 <= types.Test.C#MethodType.m4().
[1432..1435): Int => scala.Int#
[1438..1441): ??? => scala.Predef.`???`().
[1452..1454): m5 <= types.Test.C#MethodType.m5(Int).
[1455..1456): x <= types.Test.C#MethodType.m5(Int).(x)
[1458..1461): Int => scala.Int#
[1464..1467): Int => scala.Int#
[1470..1473): ??? => scala.Predef.`???`().
[1484..1486): m6 <= types.Test.C#MethodType.m6(T).
[1487..1488): T <= types.Test.C#MethodType.m6(T).[T]
[1490..1491): x <= types.Test.C#MethodType.m6(T).(x)
[1493..1494): T => types.Test.C#MethodType.m6(T).[T]
[1497..1498): T => types.Test.C#MethodType.m6(T).[T]
[1501..1504): ??? => scala.Predef.`???`().
[1523..1533): ByNameType <= types.Test.C#ByNameType.
[1546..1548): m1 <= types.Test.C#ByNameType.m1(=>Int).
[1549..1550): x <= types.Test.C#ByNameType.m1(=>Int).(x)
[1555..1558): Int => scala.Int#
[1561..1564): Int => scala.Int#
[1567..1570): ??? => scala.Predef.`???`().
[1593..1605): RepeatedType <= types.Test.C#RepeatedType#
[1605..1605):  <= types.Test.C#RepeatedType#`<init>`(String*).
[1606..1607): s <= types.Test.C#RepeatedType#s().
[1609..1615): String => scala.`<repeated>`#
[1630..1632): m1 <= types.Test.C#RepeatedType#m1(Int*).
[1633..1634): x <= types.Test.C#RepeatedType#m1(Int*).(x)
[1636..1639): Int => scala.`<repeated>`#
[1643..1646): Int => scala.Int#
[1649..1650): s => types.Test.C#RepeatedType#s().
[1651..1657): length => scala.collection.SeqLike#length().
[1676..1684): TypeType <= types.Test.C#TypeType.
[1698..1700): T1 <= types.Test.C#TypeType.T1#
[1711..1713): m2 <= types.Test.C#TypeType.m2().
[1714..1716): T2 <= types.Test.C#TypeType.m2().[T2]
[1720..1721): C => types.Test.C#
[1725..1726): C => types.Test.C#
[1730..1733): ??? => scala.Predef.`???`().
[1744..1746): m3 <= types.Test.C#TypeType.m3().
[1747..1749): M3 <= types.Test.C#TypeType.m3().[M3]
[1756..1759): ??? => scala.Predef.`???`().
[1771..1773): T4 <= types.Test.C#TypeType.T4#
[1776..1777): C => types.Test.C#
[1789..1791): T5 <= types.Test.C#TypeType.T5#
[1792..1793): U <= types.Test.C#TypeType.T5#[U]
[1797..1798): U => types.Test.C#TypeType.T5#[U]
[1819..1826): Literal <= types.Test.Literal.
[1843..1846): int <= types.Test.Literal.int().
[1865..1869): long <= types.Test.Literal.long().
[1889..1894): float <= types.Test.Literal.float().
[1914..1920): double <= types.Test.Literal.double().
[1940..1943): nil <= types.Test.Literal.nil().
[1965..1969): char <= types.Test.Literal.char().
[1990..1996): string <= types.Test.Literal.string().
[2017..2021): bool <= types.Test.Literal.bool().
[2043..2047): unit <= types.Test.Literal.unit().
[2067..2075): javaEnum <= types.Test.Literal.javaEnum().
[2078..2082): java => java.
[2083..2086): nio => java.nio.
[2087..2091): file => java.nio.file.
[2092..2102): LinkOption => java.nio.file.LinkOption#
[2103..2117): NOFOLLOW_LINKS => java.nio.file.LinkOption#NOFOLLOW_LINKS.
[2132..2139): clazzOf <= types.Test.Literal.clazzOf().
[2142..2149): classOf => scala.Predef.classOf().
[2150..2156): Option => scala.Option#
[2157..2160): Int => scala.Int#

Symbols:
java. => package java
java.nio. => package nio
java.nio.file. => package file
java.nio.file.LinkOption# => final javadefined enum class LinkOption
java.nio.file.LinkOption#NOFOLLOW_LINKS. => final javadefined enum static field NOFOLLOW_LINKS: LinkOption
  [0..10): LinkOption => java.nio.file.LinkOption#
scala. => package scala
scala.Int# => abstract final class Int
scala.Option# => abstract sealed class Option
scala.Predef.`???`(). => method ???: Nothing
  [0..7): Nothing => scala.Nothing#
scala.Predef.classOf(). => method classOf: [T] => Class[T]
  [7..12): Class => scala.Predef.Class#
  [13..14): T => scala.Predef.classOf().[T]
scala.annotation. => package annotation
scala.annotation.StaticAnnotation# => trait StaticAnnotation
scala.collection.SeqLike#length(). => abstract method length: Int
  [0..3): Int => scala.Int#
scala.language. => final object language
scala.language.existentials(). => implicit lazy val field existentials: existentials
  [0..12): existentials => scala.languageFeature.existentials#
scala.language.higherKinds(). => implicit lazy val field higherKinds: higherKinds
  [0..11): higherKinds => scala.languageFeature.higherKinds#
scala.package.List# => type List: [A] => List[A]
  [7..11): List => scala.collection.immutable.List#
  [12..13): A => scala.package.List#[A]
types. => package types.{+8 members}
types.B# => class B
types.B#`<init>`(). => primary ctor <init>: (): B
  [4..5): B => types.B#
types.C# => class C
types.C#`<init>`(). => primary ctor <init>: (): C
  [4..5): C => types.C#
types.P# => class P
types.P#C# => class C
types.P#C#`<init>`(). => primary ctor <init>: (): P.this.C
  [4..5): P => types.P#
  [11..12): C => types.P#C#
types.P#X# => class X
types.P#X#`<init>`(). => primary ctor <init>: (): P.this.X
  [4..5): P => types.P#
  [11..12): X => types.P#X#
types.P#`<init>`(). => primary ctor <init>: (): P
  [4..5): P => types.P#
types.P#x(). => val method x: P.this.X
  [0..1): P => types.P#
  [7..8): X => types.P#X#
types.P#x. => private val field x: P.this.X
  [0..1): P => types.P#
  [7..8): X => types.P#X#
types.T# => class T
types.T#C# => class C
types.T#C#`<init>`(). => primary ctor <init>: (): T.this.C
  [4..5): T => types.T#
  [11..12): C => types.T#C#
types.T#X# => class X
types.T#X#`<init>`(). => primary ctor <init>: (): T.this.X
  [4..5): T => types.T#
  [11..12): X => types.T#X#
types.T#`<init>`(). => primary ctor <init>: (): T
  [4..5): T => types.T#
types.T#x(). => val method x: T.this.X
  [0..1): T => types.T#
  [7..8): X => types.T#X#
types.T#x. => private val field x: T.this.X
  [0..1): T => types.T#
  [7..8): X => types.T#X#
types.Test. => final object Test
types.Test.C# => class C
types.Test.C#$anon#L# => type L: [T] => List[T]
  [7..11): List => scala.package.List#
  [12..13): T => types.Test.C#$anon#L#[T]
types.Test.C#$anon#L#[T] => typeparam T
types.Test.C#$anon#k(). => abstract method k: Int
  [0..3): Int => scala.Int#
types.Test.C#ByNameType. => final object ByNameType
types.Test.C#ByNameType.m1(=>Int). => method m1: (x: =>Int): Int
  [6..9): Int => scala.Int#
  [12..15): Int => scala.Int#
types.Test.C#ByNameType.m1(=>Int).(x) => param x: =>Int
  [2..5): Int => scala.Int#
types.Test.C#ClassInfoType1. => final object ClassInfoType1
types.Test.C#ClassInfoType2# => class ClassInfoType2
types.Test.C#ClassInfoType2#`<init>`(). => primary ctor <init>: (): C.this.ClassInfoType2
  [4..5): C => types.Test.C#
  [11..25): ClassInfoType2 => types.Test.C#ClassInfoType2#
types.Test.C#ClassInfoType2#x(). => method x: Int
  [0..3): Int => scala.Int#
types.Test.C#ClassInfoType3# => trait ClassInfoType3
types.Test.C#ClassInfoType3#[T] => typeparam T
types.Test.C#MethodType. => final object MethodType
types.Test.C#MethodType.m3(). => method m3: Int
  [0..3): Int => scala.Int#
types.Test.C#MethodType.m4(). => method m4: (): Int
  [4..7): Int => scala.Int#
types.Test.C#MethodType.m5(Int). => method m5: (x: Int): Int
  [4..7): Int => scala.Int#
  [10..13): Int => scala.Int#
types.Test.C#MethodType.m5(Int).(x) => param x: Int
  [0..3): Int => scala.Int#
types.Test.C#MethodType.m6(T). => method m6: [T] => (x: T): T
  [11..12): T => types.Test.C#MethodType.m6(T).[T]
  [15..16): T => types.Test.C#MethodType.m6(T).[T]
types.Test.C#MethodType.m6(T).(x) => param x: T
  [0..1): T => types.Test.C#MethodType.m6(T).[T]
types.Test.C#MethodType.m6(T).[T] => typeparam T
types.Test.C#MethodType.x1(). => method x1: Int
  [0..3): Int => scala.Int#
types.Test.C#MethodType.x2(). => method x2: Int
  [0..3): Int => scala.Int#
types.Test.C#RepeatedType# => case class RepeatedType
types.Test.C#RepeatedType#`<init>`(String*). => primary ctor <init>: (s: String*): C.this.RepeatedType
  [4..10): String => scala.Predef.String#
  [14..15): C => types.Test.C#
  [21..33): RepeatedType => types.Test.C#RepeatedType#
types.Test.C#RepeatedType#`<init>`(String*).(s) => val param s: String*
  [0..6): String => scala.Predef.String#
types.Test.C#RepeatedType#m1(Int*). => method m1: (x: Int*): Int
  [4..7): Int => scala.Int#
  [11..14): Int => scala.Int#
types.Test.C#RepeatedType#m1(Int*).(x) => param x: Int*
  [0..3): Int => scala.Int#
types.Test.C#RepeatedType#s(). => val method s: String*
  [0..6): String => scala.Predef.String#
types.Test.C#RepeatedType#s. => private val field s: String*
  [0..6): String => scala.Predef.String#
types.Test.C#TypeType. => final object TypeType
types.Test.C#TypeType.T1# => abstract type T1
types.Test.C#TypeType.T4# => type T4: C
  [0..1): C => types.Test.C#
types.Test.C#TypeType.T5# => type T5: [U] => U
  [7..8): U => types.Test.C#TypeType.T5#[U]
types.Test.C#TypeType.T5#[U] => typeparam U
types.Test.C#TypeType.m2(). => method m2: [T2] => Nothing
  [8..15): Nothing => scala.Nothing#
types.Test.C#TypeType.m2().[T2] => typeparam T2
types.Test.C#TypeType.m3(). => method m3: [M3] => Nothing
  [8..15): Nothing => scala.Nothing#
types.Test.C#TypeType.m3().[M3] => typeparam M3
types.Test.C#`<init>`(). => primary ctor <init>: (): C
  [4..5): C => types.Test.C#
types.Test.C#annType1(). => val method annType1: T
  [0..1): T => types.T#
types.Test.C#annType1. => private val field annType1: T
  [0..1): T => types.T#
types.Test.C#annType2(). => val method annType2: T
  [0..1): T => types.T#
types.Test.C#annType2. => private val field annType2: T
  [0..1): T => types.T#
types.Test.C#compoundType1(). => val method compoundType1: AnyRef{def k: Int}
  [0..6): AnyRef => scala.AnyRef#
  [11..12): k => types.Test.C#$anon#k().
types.Test.C#compoundType1. => private val field compoundType1: AnyRef{def k: Int}
  [0..6): AnyRef => scala.AnyRef#
  [11..12): k => types.Test.C#$anon#k().
types.Test.C#compoundType2(). => val method compoundType2: M with N{}
  [0..1): M => types.Test.M#
  [7..8): N => types.Test.N#
types.Test.C#compoundType2. => private val field compoundType2: M with N{}
  [0..1): M => types.Test.M#
  [7..8): N => types.Test.N#
types.Test.C#compoundType3(). => val method compoundType3: M with N{def k: Int}
  [0..1): M => types.Test.M#
  [7..8): N => types.Test.N#
  [13..14): k => types.Test.C#$anon#k().
types.Test.C#compoundType3. => private val field compoundType3: M with N{def k: Int}
  [0..1): M => types.Test.M#
  [7..8): N => types.Test.N#
  [13..14): k => types.Test.C#$anon#k().
types.Test.C#existentialType1(). => val method existentialType1: T forSome { type T }
types.Test.C#existentialType1. => private val field existentialType1: T forSome { type T }
types.Test.C#existentialType1.T# => abstract type T
types.Test.C#p(). => val method p: P
  [0..1): P => types.P#
types.Test.C#p. => private val field p: P
  [0..1): P => types.P#
types.Test.C#singleType1(). => val method singleType1: x.type
  [0..1): x => types.Test.C#x().
types.Test.C#singleType1. => private val field singleType1: x.type
  [0..1): x => types.Test.C#x().
types.Test.C#singleType2(). => val method singleType2: x.type
  [0..1): x => types.P#x().
types.Test.C#singleType2. => private val field singleType2: x.type
  [0..1): x => types.P#x().
types.Test.C#superType1(). => val method superType1: Int
  [0..3): Int => scala.Int#
types.Test.C#superType1. => private val field superType1: Int
  [0..3): Int => scala.Int#
types.Test.C#superType2(). => val method superType2: Int
  [0..3): Int => scala.Int#
types.Test.C#superType2. => private val field superType2: Int
  [0..3): Int => scala.Int#
types.Test.C#superType3(). => val method superType3: Int
  [0..3): Int => scala.Int#
types.Test.C#superType3. => private val field superType3: Int
  [0..3): Int => scala.Int#
types.Test.C#thisType1(). => val method thisType1: C.this.type
  [0..1): C => types.Test.C#
types.Test.C#thisType1. => private val field thisType1: C.this.type
  [0..1): C => types.Test.C#
types.Test.C#thisType2(). => val method thisType2: C.this.type
  [0..1): C => types.Test.C#
types.Test.C#thisType2. => private val field thisType2: C.this.type
  [0..1): C => types.Test.C#
types.Test.C#typeLambda1(). => method typeLambda1: [M] => Nothing
  [7..14): Nothing => scala.Nothing#
types.Test.C#typeLambda1().[M] => typeparam M
types.Test.C#typeRef1(). => val method typeRef1: C
  [0..1): C => types.Test.C#
types.Test.C#typeRef1. => private val field typeRef1: C
  [0..1): C => types.Test.C#
types.Test.C#typeRef2(). => val method typeRef2: p.C
  [0..1): p => types.Test.C#p().
  [2..3): C => types.P#C#
types.Test.C#typeRef2. => private val field typeRef2: p.C
  [0..1): p => types.Test.C#p().
  [2..3): C => types.P#C#
types.Test.C#typeRef3(). => val method typeRef3: C
  [0..1): C => types.T#C#
types.Test.C#typeRef3. => private val field typeRef3: C
  [0..1): C => types.T#C#
types.Test.C#typeRef4(). => val method typeRef4: List[Int]
  [0..4): List => scala.package.List#
  [5..8): Int => scala.Int#
types.Test.C#typeRef4. => private val field typeRef4: List[Int]
  [0..4): List => scala.package.List#
  [5..8): Int => scala.Int#
types.Test.C#x(). => val method x: p.X
  [0..1): p => types.Test.C#p().
  [2..3): X => types.P#X#
types.Test.C#x. => private val field x: p.X
  [0..1): p => types.Test.C#p().
  [2..3): X => types.P#X#
types.Test.Literal. => final object Literal
types.Test.Literal.bool(). => final val method bool: Boolean
  [0..7): Boolean => scala.Boolean#
types.Test.Literal.bool. => private final val field bool: Boolean
  [0..7): Boolean => scala.Boolean#
types.Test.Literal.char(). => final val method char: Char
  [0..4): Char => scala.Char#
types.Test.Literal.char. => private final val field char: Char
  [0..4): Char => scala.Char#
types.Test.Literal.clazzOf(). => final val method clazzOf: Class[Option[Int]]
  [0..5): Class => java.lang.Class#
  [6..12): Option => scala.Option#
  [13..16): Int => scala.Int#
types.Test.Literal.clazzOf. => private final val field clazzOf: Class[Option[Int]]
  [0..5): Class => java.lang.Class#
  [6..12): Option => scala.Option#
  [13..16): Int => scala.Int#
types.Test.Literal.double(). => final val method double: Double
  [0..6): Double => scala.Double#
types.Test.Literal.double. => private final val field double: Double
  [0..6): Double => scala.Double#
types.Test.Literal.float(). => final val method float: Float
  [0..5): Float => scala.Float#
types.Test.Literal.float. => private final val field float: Float
  [0..5): Float => scala.Float#
types.Test.Literal.int(). => final val method int: Int
  [0..3): Int => scala.Int#
types.Test.Literal.int. => private final val field int: Int
  [0..3): Int => scala.Int#
types.Test.Literal.javaEnum(). => final val method javaEnum: LinkOption
  [0..10): LinkOption => java.nio.file.LinkOption#
types.Test.Literal.javaEnum. => private final val field javaEnum: LinkOption
  [0..10): LinkOption => java.nio.file.LinkOption#
types.Test.Literal.long(). => final val method long: Long
  [0..4): Long => scala.Long#
types.Test.Literal.long. => private final val field long: Long
  [0..4): Long => scala.Long#
types.Test.Literal.nil(). => final val method nil: Null
  [0..4): Null => scala.Null#
types.Test.Literal.nil. => private final val field nil: Null
  [0..4): Null => scala.Null#
types.Test.Literal.string(). => final val method string: String
  [0..6): String => java.lang.String#
types.Test.Literal.string. => private final val field string: String
  [0..6): String => java.lang.String#
types.Test.Literal.unit(). => final val method unit: Unit
  [0..4): Unit => scala.Unit#
types.Test.Literal.unit. => private final val field unit: Unit
  [0..4): Unit => scala.Unit#
types.Test.M# => class M.{+1 members}
types.Test.M#`<init>`(). => primary ctor <init>: (): M
  [4..5): M => types.Test.M#
types.Test.M#m(). => method m: Int
  [0..3): Int => scala.Int#
types.Test.N# => class N
types.Test.N#`<init>`(). => primary ctor <init>: (): N
  [4..5): N => types.Test.N#
types.Test.N#n(). => method n: Int
  [0..3): Int => scala.Int#
types.ann# => class ann
types.ann#[T] => typeparam T
types.ann#`<init>`(T). => primary ctor <init>: (x: T): ann[T]
  [4..5): T => types.ann#[T]
  [8..11): ann => types.ann#
  [12..13): T => types.ann#[T]
types.ann#`<init>`(T).(x) => param x: T
  [0..1): T => types.ann#[T]
types.ann#x. => private val field x: T
  [0..1): T => types.ann#[T]
types.ann1# => class ann1
types.ann1#`<init>`(). => primary ctor <init>: (): ann1
  [4..8): ann1 => types.ann1#
types.ann2# => class ann2
types.ann2#`<init>`(). => primary ctor <init>: (): ann2
  [4..8): ann2 => types.ann2#


semanticdb/integration/src/main/scala/example/Vals.scala
--------------------------------------------------------
Language:
Scala

Names:
[8..15): example <= example.
[32..36): Vals <= example.Vals#
[36..36):  <= example.Vals#`<init>`(Int,Int,Int).
[37..38): p <= example.Vals#p.
[40..43): Int => scala.Int#
[49..51): xp <= example.Vals#xp().
[53..56): Int => scala.Int#
[62..64): yp <= example.Vals#yp().
[66..69): Int => scala.Int#
[79..81): xm <= example.Vals#xm().
[83..86): Int => scala.Int#
[89..92): ??? => scala.Predef.`???`().
[99..102): xam <= example.Vals#xam().
[104..107): Int => scala.Int#
[128..131): xlm <= example.Vals#xlm.
[133..136): Int => scala.Int#
[139..142): ??? => scala.Predef.`???`().
[154..157): xzm <= example.Vals#xzm().
[159..162): Int => scala.Int#
[165..168): ??? => scala.Predef.`???`().
[194..198): xzlm <= example.Vals#xzlm().
[200..203): Int => scala.Int#
[206..209): ??? => scala.Predef.`???`().
[222..225): xfm <= example.Vals#xfm().
[227..230): Int => scala.Int#
[233..236): ??? => scala.Predef.`???`().
[252..255): xim <= example.Vals#xim().
[257..260): Int => scala.Int#
[263..266): ??? => scala.Predef.`???`().
[273..275): ym <= example.Vals#ym().
[277..280): Int => scala.Int#
[283..286): ??? => scala.Predef.`???`().
[293..296): yam <= example.Vals#yam().
[298..301): Int => scala.Int#
[322..325): ylm <= example.Vals#ylm.
[327..330): Int => scala.Int#
[333..336): ??? => scala.Predef.`???`().
[478..481): yfm <= example.Vals#yfm().
[483..486): Int => scala.Int#
[489..492): ??? => scala.Predef.`???`().
[508..511): yim <= example.Vals#yim().
[513..516): Int => scala.Int#
[519..522): ??? => scala.Predef.`???`().
[529..530): m <= example.Vals#m().
[543..545): xl <= local0_semanticdb_integration_src_main_scala_example_Vals_scala
[547..550): Int => scala.Int#
[553..556): ??? => scala.Predef.`???`().
[570..573): xzl <= local1_semanticdb_integration_src_main_scala_example_Vals_scala
[575..578): Int => scala.Int#
[581..584): ??? => scala.Predef.`???`().
[676..679): xil <= local2_semanticdb_integration_src_main_scala_example_Vals_scala
[681..684): Int => scala.Int#
[687..690): ??? => scala.Predef.`???`().
[699..701): yl <= local3_semanticdb_integration_src_main_scala_example_Vals_scala
[703..706): Int => scala.Int#
[709..712): ??? => scala.Predef.`???`().
[896..899): yil <= local4_semanticdb_integration_src_main_scala_example_Vals_scala
[901..904): Int => scala.Int#
[907..910): ??? => scala.Predef.`???`().
[915..917): yl => local3_semanticdb_integration_src_main_scala_example_Vals_scala
[920..922): xl => local0_semanticdb_integration_src_main_scala_example_Vals_scala
[923..924): + => scala.Int#`+`(Int).
[925..927): yl => local3_semanticdb_integration_src_main_scala_example_Vals_scala
[932..939): println => scala.Predef.println(Any).
[940..943): xzl => local1_semanticdb_integration_src_main_scala_example_Vals_scala
[949..952): yil => local4_semanticdb_integration_src_main_scala_example_Vals_scala
[955..958): xil => local2_semanticdb_integration_src_main_scala_example_Vals_scala
[959..960): + => scala.Int#`+`(Int).
[961..964): yil => local4_semanticdb_integration_src_main_scala_example_Vals_scala
[971..978): println => scala.Predef.println(Any).
[979..983): xzlm => example.Vals#xzlm().
[987..990): ylm => example.Vals#ylm.
[993..996): xlm => example.Vals#xlm.
[997..998): + => scala.Int#`+`(Int).
[999..1002): ylm => example.Vals#ylm.
[1013..1022): ValUsages <= example.ValUsages.
[1031..1032): v <= example.ValUsages.v().
[1034..1038): Vals => example.Vals#
[1041..1044): ??? => scala.Predef.`???`().
[1047..1048): v => example.ValUsages.v().
[1049..1051): yp => example.Vals#`yp_=`(Int).
[1054..1055): v => example.ValUsages.v().
[1056..1058): xp => example.Vals#xp().
[1059..1060): + => scala.Int#`+`(Int).
[1061..1062): v => example.ValUsages.v().
[1063..1065): yp => example.Vals#yp().
[1068..1069): v => example.ValUsages.v().
[1070..1072): ym => example.Vals#`ym_=`(Int).
[1075..1076): v => example.ValUsages.v().
[1077..1079): xm => example.Vals#xm().
[1080..1081): + => scala.Int#`+`(Int).
[1082..1083): v => example.ValUsages.v().
[1084..1086): ym => example.Vals#ym().
[1089..1090): v => example.ValUsages.v().
[1091..1094): yam => example.Vals#`yam_=`(Int).
[1097..1098): v => example.ValUsages.v().
[1099..1102): xam => example.Vals#xam().
[1103..1104): + => scala.Int#`+`(Int).
[1105..1106): v => example.ValUsages.v().
[1107..1110): yam => example.Vals#yam().
[1113..1120): println => scala.Predef.println(Any).
[1121..1122): v => example.ValUsages.v().
[1123..1126): xzm => example.Vals#xzm().
[1130..1131): v => example.ValUsages.v().
[1132..1135): yfm => example.Vals#`yfm_=`(Int).
[1138..1139): v => example.ValUsages.v().
[1140..1143): xfm => example.Vals#xfm().
[1144..1145): + => scala.Int#`+`(Int).
[1146..1147): v => example.ValUsages.v().
[1148..1151): yfm => example.Vals#yfm().
[1154..1155): v => example.ValUsages.v().
[1156..1159): yim => example.Vals#`yim_=`(Int).
[1162..1163): v => example.ValUsages.v().
[1164..1167): xim => example.Vals#xim().
[1168..1169): + => scala.Int#`+`(Int).
[1170..1171): v => example.ValUsages.v().
[1172..1175): yim => example.Vals#yim().

Symbols:
example. => package example.{+11 members}
example.ValUsages. => final object ValUsages
example.ValUsages.v(). => val method v: Vals
  [0..4): Vals => example.Vals#
example.ValUsages.v. => private val field v: Vals
  [0..4): Vals => example.Vals#
example.Vals# => abstract class Vals
example.Vals#`<init>`(Int,Int,Int). => primary ctor <init>: (p: Int, xp: Int, yp: Int): Vals
  [4..7): Int => scala.Int#
  [13..16): Int => scala.Int#
  [22..25): Int => scala.Int#
  [28..32): Vals => example.Vals#
example.Vals#`<init>`(Int,Int,Int).(p) => param p: Int
  [0..3): Int => scala.Int#
example.Vals#`<init>`(Int,Int,Int).(xp) => val param xp: Int
  [0..3): Int => scala.Int#
example.Vals#`<init>`(Int,Int,Int).(yp) => var param yp: Int
  [0..3): Int => scala.Int#
example.Vals#`yam_=`(Int). => abstract var method yam_=: (x$1: Int): Unit
  [6..9): Int => scala.Int#
  [12..16): Unit => scala.Unit#
example.Vals#`yam_=`(Int).(x$1) => param x$1: Int
  [0..3): Int => scala.Int#
example.Vals#`yfm_=`(Int). => final var method yfm_=: (x$1: Int): Unit
  [6..9): Int => scala.Int#
  [12..16): Unit => scala.Unit#
example.Vals#`yfm_=`(Int).(x$1) => param x$1: Int
  [0..3): Int => scala.Int#
example.Vals#`yim_=`(Int). => var method yim_=: (x$1: Int): Unit
  [6..9): Int => scala.Int#
  [12..16): Unit => scala.Unit#
example.Vals#`yim_=`(Int).(x$1) => param x$1: Int
  [0..3): Int => scala.Int#
example.Vals#`ym_=`(Int). => var method ym_=: (x$1: Int): Unit
  [6..9): Int => scala.Int#
  [12..16): Unit => scala.Unit#
example.Vals#`ym_=`(Int).(x$1) => param x$1: Int
  [0..3): Int => scala.Int#
example.Vals#`yp_=`(Int). => var method yp_=: (x$1: Int): Unit
  [6..9): Int => scala.Int#
  [12..16): Unit => scala.Unit#
example.Vals#`yp_=`(Int).(x$1) => param x$1: Int
  [0..3): Int => scala.Int#
example.Vals#m(). => method m: Unit
  [0..4): Unit => scala.Unit#
example.Vals#p. => private val field p: Int
  [0..3): Int => scala.Int#
example.Vals#xam(). => abstract val method xam: Int
  [0..3): Int => scala.Int#
example.Vals#xfm(). => final val method xfm: Int
  [0..3): Int => scala.Int#
example.Vals#xfm. => private final val field xfm: Int
  [0..3): Int => scala.Int#
example.Vals#xim(). => implicit val method xim: Int
  [0..3): Int => scala.Int#
example.Vals#xim. => private val field xim: Int
  [0..3): Int => scala.Int#
example.Vals#xlm. => private val field xlm: Int
  [0..3): Int => scala.Int#
example.Vals#xm(). => val method xm: Int
  [0..3): Int => scala.Int#
example.Vals#xm. => private val field xm: Int
  [0..3): Int => scala.Int#
example.Vals#xp(). => val method xp: Int
  [0..3): Int => scala.Int#
example.Vals#xp. => private val field xp: Int
  [0..3): Int => scala.Int#
example.Vals#xzlm(). => private lazy val field xzlm: Int
  [0..3): Int => scala.Int#
example.Vals#xzm(). => lazy val field xzm: Int
  [0..3): Int => scala.Int#
example.Vals#yam(). => abstract var method yam: Int
  [0..3): Int => scala.Int#
example.Vals#yfm(). => final var method yfm: Int
  [0..3): Int => scala.Int#
example.Vals#yfm. => private final var field yfm: Int
  [0..3): Int => scala.Int#
example.Vals#yim(). => implicit var method yim: Int
  [0..3): Int => scala.Int#
example.Vals#yim. => private var field yim: Int
  [0..3): Int => scala.Int#
example.Vals#ylm. => private var field ylm: Int
  [0..3): Int => scala.Int#
example.Vals#ym(). => var method ym: Int
  [0..3): Int => scala.Int#
example.Vals#ym. => private var field ym: Int
  [0..3): Int => scala.Int#
example.Vals#yp(). => var method yp: Int
  [0..3): Int => scala.Int#
example.Vals#yp. => private var field yp: Int
  [0..3): Int => scala.Int#
local0_semanticdb_integration_src_main_scala_example_Vals_scala => val local xl: Int
  [0..3): Int => scala.Int#
local1_semanticdb_integration_src_main_scala_example_Vals_scala => lazy val local xzl: Int
  [0..3): Int => scala.Int#
local2_semanticdb_integration_src_main_scala_example_Vals_scala => implicit val local xil: Int
  [0..3): Int => scala.Int#
local3_semanticdb_integration_src_main_scala_example_Vals_scala => var local yl: Int
  [0..3): Int => scala.Int#
local4_semanticdb_integration_src_main_scala_example_Vals_scala => implicit var local yil: Int
  [0..3): Int => scala.Int#
scala.Int# => abstract final class Int
scala.Int#`+`(Int). => abstract method +: (x: Int): Int
  [4..7): Int => scala.Int#
  [10..13): Int => scala.Int#
scala.Predef.`???`(). => method ???: Nothing
  [0..7): Nothing => scala.Nothing#
scala.Predef.println(Any). => method println: (x: Any): Unit
  [4..7): Any => scala.Any#
  [10..14): Unit => scala.Unit#


semanticdb/integration/src/main/scala/example/local-file.scala
--------------------------------------------------------------
Language:
Scala

Names:
[8..15): example <= example.
[23..35): `local-file` <= example.`local-file`#
[36..36):  <= example.`local-file`#`<init>`().
[40..47): locally => scala.Predef.locally(T).
[58..63): local <= local0_semanticdb_integration_src_main_scala_example_local_file_scala
[73..78): local => local0_semanticdb_integration_src_main_scala_example_local_file_scala
[79..80): + => scala.Int#`+`(Int).

Symbols:
example. => package example.{+11 members}
example.`local-file`# => class local-file
example.`local-file`#`<init>`(). => primary ctor <init>: (): `local-file`
  [4..16): `local-file` => example.`local-file`#
local0_semanticdb_integration_src_main_scala_example_local_file_scala => val local local: Int
  [0..3): Int => scala.Int#
scala.Int#`+`(Int). => abstract method +: (x: Int): Int
  [4..7): Int => scala.Int#
  [10..13): Int => scala.Int#
scala.Predef.locally(T). => method locally: [T] => (x: T): T
  [11..12): T => scala.Predef.locally(T).[T]
  [15..16): T => scala.Predef.locally(T).[T]

Synthetics:
[47..47): *[Int]
  [0..1): * => _star_.
  [2..5): Int => scala.Int#
