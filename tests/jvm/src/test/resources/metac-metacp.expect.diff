===============
_empty_.C#m2().
===============
--- metac
+++ metacp
             type_arguments {
               tag: TYPE_REF
               typeRef {
-                symbol: "local0"
+                symbol: "_empty_.C#m2()._$1#"
             type_arguments {
                     type_arguments {
                       tag: TYPE_REF
                       typeRef {
-                        symbol: "local1"
+                        symbol: "_empty_.C#m2()._$2#"
                 declarations {
                   hardlinks {
-                    symbol: "local1"
+                    symbol: "_empty_.C#m2()._$2#"
                     kind: TYPE
                     properties: 4
-                    name: "_"
+                    name: "_$2"
                     tpe {
                       tag: TYPE_TYPE
                       typeType {
         declarations {
           hardlinks {
-            symbol: "local0"
+            symbol: "_empty_.C#m2()._$1#"
             kind: TYPE
             properties: 4
-            name: "_"
+            name: "_$1"
             tpe {
               tag: TYPE_TYPE
               typeType {


=========
advanced.
=========
--- metac
+++ metacp
 kind: PACKAGE
 properties: 0
 name: "advanced"
-accessibility {
-  tag: PUBLIC
-  symbol: ""
-}
 language: SCALA


==========================
advanced.Existential#e1().
==========================
--- metac
+++ metacp
             type_arguments {
               tag: TYPE_REF
               typeRef {
-                symbol: "local7"
+                symbol: "advanced.Existential#e1()._$1#"
         declarations {
           hardlinks {
-            symbol: "local7"
+            symbol: "advanced.Existential#e1()._$1#"
             kind: TYPE
             properties: 4
-            name: "_"
+            name: "_$1"
             tpe {
               tag: TYPE_TYPE
               typeType {


==========================
advanced.Existential#e2().
==========================
--- metac
+++ metacp
                 type_arguments {
                   tag: TYPE_REF
                   typeRef {
-                    symbol: "local8"
+                    symbol: "advanced.Existential#e2().T#"
             declarations {
               hardlinks {
-                symbol: "local8"
+                symbol: "advanced.Existential#e2().T#"
                 kind: TYPE
                 properties: 4
                 name: "T"


==========================
advanced.Existential#e4().
==========================
--- metac
+++ metacp
         tpe {
           tag: TYPE_REF
           typeRef {
-            symbol: "local10"
+            symbol: "advanced.Existential#e4().U#"
             type_arguments {
               tag: TYPE_REF
               typeRef {
         declarations {
           hardlinks {
-            symbol: "local10"
+            symbol: "advanced.Existential#e4().U#"
             kind: TYPE
             properties: 4
             name: "U"
                 type_parameters {
                   hardlinks {
-                    symbol: "local11"
+                    symbol: "advanced.Existential#e4().U#[T]"
                     kind: TYPE_PARAMETER
                     properties: 0
                     name: "T"


=========================
advanced.Structural#s1().
=========================
--- metac
+++ metacp
         declarations {
           hardlinks {
-            symbol: "local0"
+            symbol: "advanced.Structural#`<refinement>`#x()."
             kind: METHOD
             properties: 1028
             name: "x"


=========================
advanced.Structural#s2().
=========================
--- metac
+++ metacp
         declarations {
           hardlinks {
-            symbol: "local1"
+            symbol: "advanced.Structural#s2().`<refinement>`#x()."
             kind: METHOD
             properties: 1024
             name: "x"


=========================
advanced.Structural#s3().
=========================
--- metac
+++ metacp
         declarations {
           hardlinks {
-            symbol: "local3"
+            symbol: "advanced.Structural#s3().`<refinement>`#m()."
             kind: METHOD
             properties: 0
             name: "m"
                 parameterLists {
                   hardlinks {
-                    symbol: "local4"
+                    symbol: "advanced.Structural#s3().`<refinement>`#m().(x)"
                     kind: PARAMETER
                     properties: 0
                     name: "x"


===================
advanced.Test.e2().
===================
--- metac
+++ metacp
                 type_arguments {
                   tag: TYPE_REF
                   typeRef {
-                    symbol: "local8"
+                    symbol: "advanced.Test.T#"
             declarations {
               hardlinks {
-                symbol: "local8"
+                symbol: "advanced.Test.T#"
                 kind: TYPE
                 properties: 4
                 name: "T"


===================
advanced.Test.s1().
===================
--- metac
+++ metacp
         declarations {
           hardlinks {
-            symbol: "local0"
+            symbol: "advanced.Test.`<refinement>`#x()."
             kind: METHOD
             properties: 1028
             name: "x"


===================
advanced.Test.s2().
===================
--- metac
+++ metacp
         declarations {
           hardlinks {
-            symbol: "local1"
+            symbol: "advanced.Test.`<refinement>`#x()."
             kind: METHOD
             properties: 1024
             name: "x"


===================
advanced.Test.s3().
===================
--- metac
+++ metacp
         declarations {
           hardlinks {
-            symbol: "local3"
+            symbol: "advanced.Test.`<refinement>`#m()."
             kind: METHOD
             properties: 0
             name: "m"
                 parameterLists {
                   hardlinks {
-                    symbol: "local4"
+                    symbol: "advanced.Test.`<refinement>`#m().(x)"
                     kind: PARAMETER
                     properties: 0
                     name: "x"


========
classes.
========
--- metac
+++ metacp
 kind: PACKAGE
 properties: 0
 name: "classes"
-accessibility {
-  tag: PUBLIC
-  symbol: ""
-}
 language: SCALA


============================
classes.C3#copy$default$1().
============================
--- metac
+++ metacp
         annotations {
-          tpe {
-            tag: TYPE_REF
-            typeRef {
-              symbol: "scala.annotation.unchecked.uncheckedVariance#"


============================
classes.C4#copy$default$1().
============================
--- metac
+++ metacp
         annotations {
-          tpe {
-            tag: TYPE_REF
-            typeRef {
-              symbol: "scala.annotation.unchecked.uncheckedVariance#"


============================
classes.C6#copy$default$1().
============================
--- metac
+++ metacp
         annotations {
-          tpe {
-            tag: TYPE_REF
-            typeRef {
-              symbol: "scala.annotation.unchecked.uncheckedVariance#"


======================
classes.N.anonClass().
======================
--- metac
+++ metacp
         declarations {
           hardlinks {
-            symbol: "local1"
+            symbol: "classes.N.anonClass().`<refinement>`#local()."
             kind: METHOD
             properties: 1024
             name: "local"


========
example.
========
--- metac
+++ metacp
 kind: PACKAGE
 properties: 0
 name: "example"
-accessibility {
-  tag: PUBLIC
-  symbol: ""
-}
 language: SCALA


============
example.Acc#
============
--- metac
+++ metacp
       symlinks: "example.Acc#`<init>`()."
       symlinks: "example.Acc#m1()."
       symlinks: "example.Acc#m2()."
-      symlinks: "example.Acc#m3()."
       symlinks: "example.Acc#m4()."
       symlinks: "example.Acc#m5()."
       symlinks: "example.Acc#m6()."
       symlinks: "example.Acc#m7()."
+      symlinks: "example.Acc#m3()."


==============================
example.MetacJava#nonStatic().
==============================
--- metac
+++ metacp
             string: ""
-        symbol: "com.javacp.MetacJava#StaticInner#NonStatic#"
+        symbol: "com.javacp.MetacJava.StaticInner#NonStatic#"


================================
example.MetacJava#staticInner().
================================
--- metac
+++ metacp
     return_type {
       tag: TYPE_REF
       typeRef {
-        symbol: "com.javacp.MetacJava#StaticInner#"
+        symbol: "com.javacp.MetacJava.StaticInner#"


==========================
example.Methods#m12b().(x)
==========================
--- metac
+++ metacp
     declarations {
       hardlinks {
-        symbol: "local0"
+        symbol: "example.Methods#`<refinement>`#x()."
         kind: METHOD
         properties: 1028
         name: "x"


=========================
example.Methods#m13().(x)
=========================
--- metac
+++ metacp
 properties: 0
 name: "x"
 tpe {
-  tag: ANNOTATED_TYPE
-  annotatedType {
-    tpe {
-      tag: TYPE_REF
-      typeRef {
-        symbol: "scala.Int#"
-    annotations {
-      tpe {
-        tag: TYPE_REF
-        typeRef {
-          symbol: "scala.unchecked#"
+  tag: TYPE_REF
+  typeRef {
+    symbol: "scala.Int#"
 accessibility {


=========================
example.Methods#m14().(x)
=========================
--- metac
+++ metacp
     tpe {
       tag: TYPE_REF
       typeRef {
-        symbol: "local1"
+        symbol: "example.Methods#m14().(x)T#"
     declarations {
       hardlinks {
-        symbol: "local1"
+        symbol: "example.Methods#m14().(x)T#"
         kind: TYPE
         properties: 4
         name: "T"


======
flags.
======
--- metac
+++ metacp
 kind: PACKAGE
 properties: 0
 name: "flags"
-accessibility {
-  tag: PUBLIC
-  symbol: ""
-}
 language: SCALA


================
flags.p.package.
================
--- metac
+++ metacp
       symlinks: "flags.p.package.C#"
       symlinks: "flags.p.package.T1#"
       symlinks: "flags.p.package.T2#"
+      symlinks: "flags.p.package.S#"
       symlinks: "flags.p.package.U#"
       symlinks: "flags.p.package.V#"
       symlinks: "flags.p.package.X."
       symlinks: "flags.p.package.Y#"
       symlinks: "flags.p.package.Z#"
       symlinks: "flags.p.package.AA#"
-      symlinks: "flags.p.package.S#"
       symlinks: "flags.p.package.xs1()."


=====================
flags.p.package.S#[T]
=====================
--- metac
+++ metacp
-annotations {
-  tpe {
-    tag: TYPE_REF
-    typeRef {
-      symbol: "scala.specialized#"
-}
 accessibility {
   tag: PUBLIC
   symbol: ""


========
objects.
========
--- metac
+++ metacp
 kind: PACKAGE
 properties: 0
 name: "objects"
-accessibility {
-  tag: PUBLIC
-  symbol: ""
-}
 language: SCALA


=======
traits.
=======
--- metac
+++ metacp
 kind: PACKAGE
 properties: 0
 name: "traits"
-accessibility {
-  tag: PUBLIC
-  symbol: ""
-}
 language: SCALA


======
types.
======
--- metac
+++ metacp
 kind: PACKAGE
 properties: 0
 name: "types"
-accessibility {
-  tag: PUBLIC
-  symbol: ""
-}
 language: SCALA


========================
types.Test.C#annType1().
========================
--- metac
+++ metacp
         annotations {
-          tpe {
-            tag: TYPE_REF
-            typeRef {
-              symbol: "types.ann#"
-              type_arguments {
-                tag: TYPE_REF
-                typeRef {
-                  symbol: "scala.Int#"


========================
types.Test.C#annType2().
========================
--- metac
+++ metacp
         annotations {
-          tpe {
-            tag: TYPE_REF
-            typeRef {
-              symbol: "types.ann1#"
         annotations {
-          tpe {
-            tag: TYPE_REF
-            typeRef {
-              symbol: "types.ann2#"


=============================
types.Test.C#compoundType1().
=============================
--- metac
+++ metacp
         declarations {
           hardlinks {
-            symbol: "local0"
+            symbol: "types.Test.C#`<refinement>`#k()."
             kind: METHOD
             properties: 4
             name: "k"


=============================
types.Test.C#compoundType3().
=============================
--- metac
+++ metacp
         declarations {
           hardlinks {
-            symbol: "local1"
+            symbol: "types.Test.C#`<refinement>`#k()."
             kind: METHOD
             properties: 4
             name: "k"


=============================
types.Test.C#compoundType4().
=============================
--- metac
+++ metacp
         declarations {
           hardlinks {
-            symbol: "local3"
+            symbol: "types.Test.C#compoundType4().`<refinement>`#k()."
             kind: METHOD
             properties: 0
             name: "k"


=============================
types.Test.C#compoundType6().
=============================
--- metac
+++ metacp
         declarations {
           hardlinks {
-            symbol: "local5"
+            symbol: "types.Test.C#compoundType6().`<refinement>`#k()."
             kind: METHOD
             properties: 0
             name: "k"


================================
types.Test.C#existentialType1().
================================
--- metac
+++ metacp
         tpe {
           tag: TYPE_REF
           typeRef {
-            symbol: "local7"
+            symbol: "types.Test.C#existentialType1().T#"
         declarations {
           hardlinks {
-            symbol: "local7"
+            symbol: "types.Test.C#existentialType1().T#"
             kind: TYPE
             properties: 4
             name: "T"


================================
types.Test.C#existentialType2().
================================
--- metac
+++ metacp
             type_arguments {
               tag: TYPE_REF
               typeRef {
-                symbol: "local8"
+                symbol: "types.Test.C#existentialType2()._$1#"
         declarations {
           hardlinks {
-            symbol: "local8"
+            symbol: "types.Test.C#existentialType2()._$1#"
             kind: TYPE
             properties: 4
-            name: "_"
+            name: "_$1"
             tpe {
               tag: TYPE_TYPE
               typeType {


===========================
types.Test.C#singleType2().
===========================
--- metac
+++ metacp
             string: ""
-        symbol: "types.P#x()."
+        symbol: "types.P#x."
         primitive: 0
         string: ""


==============================
types.Test.Literal.javaEnum().
==============================
--- metac
+++ metacp
 kind: METHOD
 properties: 1032
 name: "javaEnum"
-tpe {
-  tag: METHOD_TYPE
-  methodType {
-    return_type {
-      tag: SINGLETON_TYPE
-      singletonType {
-        tag: SYMBOL
-        symbol: "java.nio.file.LinkOption#NOFOLLOW_LINKS."
-        primitive: 0
-        string: ""
-}
 accessibility {
   tag: PUBLIC
   symbol: ""


