====
com.
====
--- metac
+++ metacp
   symbol: ""
 owner: "_root_."
-language: SCALA
+language: JAVA


===========
com.javacp.
===========
--- metac
+++ metacp
   symbol: ""
 owner: "com."
-language: SCALA
+language: JAVA


================
com.javacp.Coin#
================
--- metac
+++ metacp
-    declarations: "com.javacp.Coin#`<init>`(Int)."
-    declarations: "com.javacp.Coin#value."
-    declarations: "com.javacp.Coin#value()."
     declarations: "com.javacp.Coin#PENNY."
     declarations: "com.javacp.Coin#NICKEL."
     declarations: "com.javacp.Coin#DIME."
     declarations: "com.javacp.Coin#QUARTER."
+    declarations: "com.javacp.Coin#value."
+    declarations: "com.javacp.Coin#$VALUES."
+    declarations: "com.javacp.Coin#`<init>`(Int)."
+    declarations: "com.javacp.Coin#value()."
     declarations: "com.javacp.Coin#values()."
     declarations: "com.javacp.Coin#valueOf(String)."


=====================
com.javacp.MetacJava#
=====================
--- metac
+++ metacp
     declarations: "com.javacp.MetacJava#`<init>`()."
-    declarations: "com.javacp.MetacJava#Overload1#"
-    declarations: "com.javacp.MetacJava#Overload1#"
-    declarations: "com.javacp.MetacJava#Overload2#"
-    declarations: "com.javacp.MetacJava#Overload2#"
     declarations: "com.javacp.MetacJava#overload(A)."
     declarations: "com.javacp.MetacJava#overload(A+1)."
-    declarations: "com.javacp.MetacJava#StaticInner#"
-    declarations: "com.javacp.MetacJava#StaticInner#"
-    declarations: "com.javacp.MetacJava#Overload3#"
-    declarations: "com.javacp.MetacJava#Overload3#"
     declarations: "com.javacp.MetacJava#overload(A+2)."
+    declarations: "com.javacp.MetacJava#Overload2#"
+    declarations: "com.javacp.MetacJava#Overload3#"
+    declarations: "com.javacp.MetacJava#Overload1#"
+    declarations: "com.javacp.MetacJava#StaticInner#"
 accessibility {


===============================
com.javacp.MetacJava#Overload1#
===============================
--- metac
+++ metacp
         symbol: "java.lang.Object#"
-    declarations: "com.javacp.MetacJava#Overload1#`<init>`()."
+    declarations: "com.javacp.MetacJava#Overload1#`<init>`(MetacJava)."
     declarations: "com.javacp.MetacJava#Overload1#A#"
-    declarations: "com.javacp.MetacJava#Overload1#A#"
 accessibility {


=================================
com.javacp.MetacJava#Overload1#A#
=================================
--- metac
+++ metacp
         symbol: "java.lang.Object#"
-    declarations: "com.javacp.MetacJava#Overload1#A#`<init>`()."
+    declarations: "com.javacp.MetacJava#Overload1#A#`<init>`(Overload1)."
 accessibility {


============================================
com.javacp.MetacJava#Overload1#A#`<init>`().
============================================
--- metac
+++ metacp
-symbol: "com.javacp.MetacJava#Overload1#A#`<init>`()."
-kind: CONSTRUCTOR
+symbol: ""
+kind: UNKNOWN_KIND
 properties: 0
-name: "<init>"
-tpe {
-  tag: METHOD_TYPE
-  methodType {
-    parameters {
-    return_type {
-      tag: TYPE_REF
-      typeRef {
-        prefix {
-          tag: SINGLETON_TYPE
-          singletonType {
-            tag: THIS
-            symbol: "com.javacp.MetacJava#Overload1#"
-            primitive: 0
-            string: ""
-        symbol: "com.javacp.MetacJava#Overload1#A#"
-}
-accessibility {
-  tag: PUBLIC
-  symbol: ""
-}
-owner: "com.javacp.MetacJava#Overload1#A#"
-language: JAVA
+name: ""
+owner: ""
+language: UNKNOWN_LANGUAGE


==========================================
com.javacp.MetacJava#Overload1#`<init>`().
==========================================
--- metac
+++ metacp
-symbol: "com.javacp.MetacJava#Overload1#`<init>`()."
-kind: CONSTRUCTOR
+symbol: ""
+kind: UNKNOWN_KIND
 properties: 0
-name: "<init>"
-tpe {
-  tag: METHOD_TYPE
-  methodType {
-    parameters {
-    return_type {
-      tag: TYPE_REF
-      typeRef {
-        prefix {
-          tag: SINGLETON_TYPE
-          singletonType {
-            tag: THIS
-            symbol: "com.javacp.MetacJava#"
-            primitive: 0
-            string: ""
-        symbol: "com.javacp.MetacJava#Overload1#"
-}
-accessibility {
-  tag: PUBLIC
-  symbol: ""
-}
-owner: "com.javacp.MetacJava#Overload1#"
-language: JAVA
+name: ""
+owner: ""
+language: UNKNOWN_LANGUAGE


===============================
com.javacp.MetacJava#Overload2#
===============================
--- metac
+++ metacp
         symbol: "java.lang.Object#"
-    declarations: "com.javacp.MetacJava#Overload2#`<init>`()."
+    declarations: "com.javacp.MetacJava#Overload2#`<init>`(MetacJava)."
     declarations: "com.javacp.MetacJava#Overload2#A#"
-    declarations: "com.javacp.MetacJava#Overload2#A#"
 accessibility {


=================================
com.javacp.MetacJava#Overload2#A#
=================================
--- metac
+++ metacp
         symbol: "java.lang.Object#"
-    declarations: "com.javacp.MetacJava#Overload2#A#`<init>`()."
+    declarations: "com.javacp.MetacJava#Overload2#A#`<init>`(Overload2)."
 accessibility {


============================================
com.javacp.MetacJava#Overload2#A#`<init>`().
============================================
--- metac
+++ metacp
-symbol: "com.javacp.MetacJava#Overload2#A#`<init>`()."
-kind: CONSTRUCTOR
+symbol: ""
+kind: UNKNOWN_KIND
 properties: 0
-name: "<init>"
-tpe {
-  tag: METHOD_TYPE
-  methodType {
-    parameters {
-    return_type {
-      tag: TYPE_REF
-      typeRef {
-        prefix {
-          tag: SINGLETON_TYPE
-          singletonType {
-            tag: THIS
-            symbol: "com.javacp.MetacJava#Overload2#"
-            primitive: 0
-            string: ""
-        symbol: "com.javacp.MetacJava#Overload2#A#"
-}
-accessibility {
-  tag: PUBLIC
-  symbol: ""
-}
-owner: "com.javacp.MetacJava#Overload2#A#"
-language: JAVA
+name: ""
+owner: ""
+language: UNKNOWN_LANGUAGE


==========================================
com.javacp.MetacJava#Overload2#`<init>`().
==========================================
--- metac
+++ metacp
-symbol: "com.javacp.MetacJava#Overload2#`<init>`()."
-kind: CONSTRUCTOR
+symbol: ""
+kind: UNKNOWN_KIND
 properties: 0
-name: "<init>"
-tpe {
-  tag: METHOD_TYPE
-  methodType {
-    parameters {
-    return_type {
-      tag: TYPE_REF
-      typeRef {
-        prefix {
-          tag: SINGLETON_TYPE
-          singletonType {
-            tag: THIS
-            symbol: "com.javacp.MetacJava#"
-            primitive: 0
-            string: ""
-        symbol: "com.javacp.MetacJava#Overload2#"
-}
-accessibility {
-  tag: PUBLIC
-  symbol: ""
-}
-owner: "com.javacp.MetacJava#Overload2#"
-language: JAVA
+name: ""
+owner: ""
+language: UNKNOWN_LANGUAGE


===============================
com.javacp.MetacJava#Overload3#
===============================
--- metac
+++ metacp
     declarations: "com.javacp.MetacJava#Overload3#`<init>`()."
     declarations: "com.javacp.MetacJava#Overload3#A#"
-    declarations: "com.javacp.MetacJava#Overload3#A#"
 accessibility {


============================================
com.javacp.MetacJava#Overload3#A#`<init>`().
============================================
--- metac
+++ metacp
     return_type {
       tag: TYPE_REF
       typeRef {
-        symbol: "com.javacp.MetacJava#Overload3#A#"
+        symbol: "scala.Unit#"


=================================
com.javacp.MetacJava#StaticInner#
=================================
--- metac
+++ metacp
     declarations: "com.javacp.MetacJava#StaticInner#`<init>`()."
     declarations: "com.javacp.MetacJava#StaticInner#isNotStatic()."
-    declarations: "com.javacp.MetacJava#StaticInner#NonStatic#"
-    declarations: "com.javacp.MetacJava#StaticInner#NonStatic#"
     declarations: "com.javacp.MetacJava#StaticInner#isStatic()."
+    declarations: "com.javacp.MetacJava#StaticInner#NonStatic#"
 accessibility {


===========================================
com.javacp.MetacJava#StaticInner#NonStatic#
===========================================
--- metac
+++ metacp
         symbol: "java.lang.Object#"
-    declarations: "com.javacp.MetacJava#StaticInner#NonStatic#`<init>`()."
+    declarations: "com.javacp.MetacJava#StaticInner#NonStatic#`<init>`(StaticInner)."
     declarations: "com.javacp.MetacJava#StaticInner#NonStatic#method(NonStatic)."


======================================================
com.javacp.MetacJava#StaticInner#NonStatic#`<init>`().
======================================================
--- metac
+++ metacp
-symbol: "com.javacp.MetacJava#StaticInner#NonStatic#`<init>`()."
-kind: CONSTRUCTOR
+symbol: ""
+kind: UNKNOWN_KIND
 properties: 0
-name: "<init>"
-tpe {
-  tag: METHOD_TYPE
-  methodType {
-    parameters {
-    return_type {
-      tag: TYPE_REF
-      typeRef {
-        prefix {
-          tag: SINGLETON_TYPE
-          singletonType {
-            tag: THIS
-            symbol: "com.javacp.MetacJava#StaticInner#"
-            primitive: 0
-            string: ""
-        symbol: "com.javacp.MetacJava#StaticInner#NonStatic#"
-}
-accessibility {
-  tag: PUBLIC
-  symbol: ""
-}
-owner: "com.javacp.MetacJava#StaticInner#NonStatic#"
-language: JAVA
+name: ""
+owner: ""
+language: UNKNOWN_LANGUAGE


============================================
com.javacp.MetacJava#StaticInner#`<init>`().
============================================
--- metac
+++ metacp
     return_type {
       tag: TYPE_REF
       typeRef {
-        symbol: "com.javacp.MetacJava#StaticInner#"
+        symbol: "scala.Unit#"


================================
com.javacp.MetacJava#`<init>`().
================================
--- metac
+++ metacp
     return_type {
       tag: TYPE_REF
       typeRef {
-        symbol: "com.javacp.MetacJava#"
+        symbol: "scala.Unit#"


========
example.
========
--- metac
+++ metacp
 kind: PACKAGE
 properties: 0
 name: "example"
-accessibility {
-  tag: PUBLIC
-  symbol: ""
-}
 owner: "_root_."
 language: SCALA


============
example.Acc#
============
--- metac
+++ metacp
     declarations: "example.Acc#`<init>`()."
     declarations: "example.Acc#m1()."
     declarations: "example.Acc#m2()."
-    declarations: "example.Acc#m3()."
     declarations: "example.Acc#m4()."
     declarations: "example.Acc#m5()."
     declarations: "example.Acc#m6()."
     declarations: "example.Acc#m7()."
+    declarations: "example.Acc#m3()."
 accessibility {


==============================
example.MetacJava#nonStatic().
==============================
--- metac
+++ metacp
             string: ""
-        symbol: "com.javacp.MetacJava#StaticInner#NonStatic#"
+        symbol: "com.javacp.MetacJava.StaticInner#NonStatic#"


============================
example.MetacJava#nonStatic.
============================
--- metac
+++ metacp
         string: ""
-    symbol: "com.javacp.MetacJava#StaticInner#NonStatic#"
+    symbol: "com.javacp.MetacJava.StaticInner#NonStatic#"
 accessibility {


================================
example.MetacJava#staticInner().
================================
--- metac
+++ metacp
     return_type {
       tag: TYPE_REF
       typeRef {
-        symbol: "com.javacp.MetacJava#StaticInner#"
+        symbol: "com.javacp.MetacJava.StaticInner#"


==============================
example.MetacJava#staticInner.
==============================
--- metac
+++ metacp
 tpe {
   tag: TYPE_REF
   typeRef {
-    symbol: "com.javacp.MetacJava#StaticInner#"
+    symbol: "com.javacp.MetacJava.StaticInner#"
 accessibility {


================
example.Methods#
================
--- metac
+++ metacp
     declarations: "example.Methods#m11(.type)."
     declarations: "example.Methods#m11(.type+1)."
     declarations: "example.Methods#m12a({})."
+    declarations: "example.Methods#$anon#"
     declarations: "example.Methods#m12b({})."
+    declarations: "example.Methods#$anon#"
     declarations: "example.Methods#m13(Int)."
     declarations: "example.Methods#m14(T)."
     declarations: "example.Methods#m15(=>Int)."


============================
example.Methods#m13(Int).(x)
============================
--- metac
+++ metacp
 properties: 0
 name: "x"
 tpe {
-  tag: ANNOTATED_TYPE
-  annotatedType {
-    tpe {
-      tag: TYPE_REF
-      typeRef {
-        symbol: "scala.Int#"
-    annotations {
-      tpe {
-        tag: TYPE_REF
-        typeRef {
-          symbol: "scala.unchecked#"
+  tag: TYPE_REF
+  typeRef {
+    symbol: "scala.Int#"
 accessibility {


====================
example.Vals#xzlm().
====================
--- metac
+++ metacp
 symbol: "example.Vals#xzlm()."
-kind: FIELD
+kind: METHOD
 properties: 1088
 name: "xzlm"
 tpe {
-  tag: TYPE_REF
-  typeRef {
-    symbol: "scala.Int#"
+  tag: METHOD_TYPE
+  methodType {
+    return_type {
+      tag: TYPE_REF
+      typeRef {
+        symbol: "scala.Int#"
 accessibility {


===================
example.Vals#xzm().
===================
--- metac
+++ metacp
 symbol: "example.Vals#xzm()."
-kind: FIELD
+kind: METHOD
 properties: 1088
 name: "xzm"
 tpe {
-  tag: TYPE_REF
-  typeRef {
-    symbol: "scala.Int#"
+  tag: METHOD_TYPE
+  methodType {
+    return_type {
+      tag: TYPE_REF
+      typeRef {
+        symbol: "scala.Int#"
 accessibility {


======
flags.
======
--- metac
+++ metacp
 kind: PACKAGE
 properties: 0
 name: "flags"
-accessibility {
-  tag: PUBLIC
-  symbol: ""
-}
 owner: "_root_."
 language: SCALA


================
flags.p.package.
================
--- metac
+++ metacp
     declarations: "flags.p.package.C#"
     declarations: "flags.p.package.T1#"
     declarations: "flags.p.package.T2#"
+    declarations: "flags.p.package.S#"
     declarations: "flags.p.package.U#"
     declarations: "flags.p.package.V#"
     declarations: "flags.p.package.X."
+    declarations: "flags.p.package.X."
     declarations: "flags.p.package.Y#"
     declarations: "flags.p.package.Z#"
     declarations: "flags.p.package.AA#"
-    declarations: "flags.p.package.S#"
     declarations: "flags.p.package.xs1()."
     declarations: "flags.p.package.xs1."


=====================
flags.p.package.S#[T]
=====================
--- metac
+++ metacp
-annotations {
-  tpe {
-    tag: TYPE_REF
-    typeRef {
-      symbol: "scala.specialized#"
-}
 accessibility {
   tag: PUBLIC
   symbol: ""


====================
flags.p.package.x().
====================
--- metac
+++ metacp
 symbol: "flags.p.package.x()."
-kind: FIELD
+kind: METHOD
 properties: 1088
 name: "x"
 tpe {
-  tag: TYPE_REF
-  typeRef {
-    symbol: "scala.Int#"
+  tag: METHOD_TYPE
+  methodType {
+    return_type {
+      tag: TYPE_REF
+      typeRef {
+        symbol: "scala.Int#"
 accessibility {


======
types.
======
--- metac
+++ metacp
 kind: PACKAGE
 properties: 0
 name: "types"
-accessibility {
-  tag: PUBLIC
-  symbol: ""
-}
 owner: "_root_."
 language: SCALA


===========
types.Test.
===========
--- metac
+++ metacp
     declarations: "types.Test.N#"
     declarations: "types.Test.C#"
     declarations: "types.Test.Literal."
+    declarations: "types.Test.Literal."
 accessibility {


=============
types.Test.C#
=============
--- metac
+++ metacp
     declarations: "types.Test.C#superType3()."
     declarations: "types.Test.C#superType3."
     declarations: "types.Test.C#compoundType1()."
+    declarations: "types.Test.C#$anon#"
     declarations: "types.Test.C#compoundType1."
     declarations: "types.Test.C#compoundType2()."
+    declarations: "types.Test.C#$anon#"
     declarations: "types.Test.C#compoundType2."
     declarations: "types.Test.C#compoundType3()."
+    declarations: "types.Test.C#$anon#"
     declarations: "types.Test.C#compoundType3."
     declarations: "types.Test.C#annType1()."
     declarations: "types.Test.C#annType1."
     declarations: "types.Test.C#existentialType1."
     declarations: "types.Test.C#typeLambda1()."
     declarations: "types.Test.C#ClassInfoType1."
+    declarations: "types.Test.C#ClassInfoType1."
     declarations: "types.Test.C#ClassInfoType2#"
     declarations: "types.Test.C#ClassInfoType3#"
     declarations: "types.Test.C#MethodType."
+    declarations: "types.Test.C#MethodType."
     declarations: "types.Test.C#ByNameType."
+    declarations: "types.Test.C#ByNameType."
     declarations: "types.Test.C#RepeatedType#"
     declarations: "types.Test.C#RepeatedType."
+    declarations: "types.Test.C#RepeatedType."
     declarations: "types.Test.C#TypeType."
+    declarations: "types.Test.C#TypeType."
 accessibility {


========================
types.Test.C#annType1().
========================
--- metac
+++ metacp
             symbol: "types.T#"
-        annotations {
-          tpe {
-            tag: TYPE_REF
-            typeRef {
-              symbol: "types.ann#"
-              type_arguments {
-                tag: TYPE_REF
-                typeRef {
-                  symbol: "scala.Int#"


======================
types.Test.C#annType1.
======================
--- metac
+++ metacp
         symbol: "types.T#"
-    annotations {
-      tpe {
-        tag: TYPE_REF
-        typeRef {
-          symbol: "types.ann#"
-          type_arguments {
-            tag: TYPE_REF
-            typeRef {
-              symbol: "scala.Int#"
 accessibility {


========================
types.Test.C#annType2().
========================
--- metac
+++ metacp
             symbol: "types.T#"
-        annotations {
-          tpe {
-            tag: TYPE_REF
-            typeRef {
-              symbol: "types.ann1#"
-        annotations {
-          tpe {
-            tag: TYPE_REF
-            typeRef {
-              symbol: "types.ann2#"


======================
types.Test.C#annType2.
======================
--- metac
+++ metacp
         symbol: "types.T#"
-    annotations {
-      tpe {
-        tag: TYPE_REF
-        typeRef {
-          symbol: "types.ann1#"
-    annotations {
-      tpe {
-        tag: TYPE_REF
-        typeRef {
-          symbol: "types.ann2#"
 accessibility {


===========================
types.Test.C#singleType2().
===========================
--- metac
+++ metacp
             string: ""
-        symbol: "types.P#x()."
+        symbol: "types.P#x."
         primitive: 0
         string: ""


=========================
types.Test.C#singleType2.
=========================
--- metac
+++ metacp
         string: ""
-    symbol: "types.P#x()."
+    symbol: "types.P#x."
     primitive: 0
     string: ""


===================
types.Test.Literal.
===================
--- metac
+++ metacp
     declarations: "types.Test.Literal.bool."
     declarations: "types.Test.Literal.unit()."
     declarations: "types.Test.Literal.unit."
-    declarations: "types.Test.Literal.javaEnum()."
+    declarations: "types.Test.Literal.javaEnum(?)."
     declarations: "types.Test.Literal.javaEnum."
     declarations: "types.Test.Literal.clazzOf()."
     declarations: "types.Test.Literal.clazzOf."


============================
types.Test.Literal.javaEnum.
============================
--- metac
+++ metacp
 kind: FIELD
 properties: 1032
 name: "javaEnum"
-tpe {
-  tag: SINGLETON_TYPE
-  singletonType {
-    tag: SYMBOL
-    symbol: "java.nio.file.LinkOption#NOFOLLOW_LINKS."
-    primitive: 0
-    string: ""
-}
 accessibility {
   tag: PRIVATE_THIS
   symbol: ""


