===========
advanced/D#
===========
--- metac
+++ metacp
                   typeRef {
                     prefix {
-                    symbol: "local14"
+                    symbol: "advanced/D#_#"
             declarations {
               hardlinks {
-                symbol: "local14"
+                symbol: "advanced/D#_#"
                 kind: TYPE
                 properties: 4
                 name: "_"
     self {
     declarations {
+      symlinks: "advanced/D#_#"
       symlinks: "advanced/D#`<init>`()."


==========================
advanced/Existential#e1().
==========================
--- metac
+++ metacp
               typeRef {
                 prefix {
-                symbol: "local7"
+                symbol: "local0"
         declarations {
           hardlinks {
-            symbol: "local7"
+            symbol: "local0"
             kind: TYPE
             properties: 4
             name: "_"


==========================
advanced/Existential#e2().
==========================
--- metac
+++ metacp
                   typeRef {
                     prefix {
-                    symbol: "local8"
+                    symbol: "local1"
             declarations {
               hardlinks {
-                symbol: "local8"
+                symbol: "local1"
                 kind: TYPE
                 properties: 4
                 name: "T"


==========================
advanced/Existential#e4().
==========================
--- metac
+++ metacp
           typeRef {
             prefix {
-            symbol: "local10"
+            symbol: "local2"
             type_arguments {
               typeRef {
                 prefix {
         declarations {
           hardlinks {
-            symbol: "local10"
+            symbol: "local2"
             kind: TYPE
             properties: 4
             name: "U"
                     type_parameters {
                       hardlinks {
-                        symbol: "local11"
+                        symbol: "local3"
                         kind: TYPE_PARAMETER
                         properties: 0
                         name: "T"


=========================
advanced/Structural#s3().
=========================
--- metac
+++ metacp
         declarations {
           hardlinks {
-            symbol: "local3"
+            symbol: "local2"
             kind: METHOD
             properties: 0
             name: "m"
                 parameterLists {
                   hardlinks {
-                    symbol: "local4"
+                    symbol: "local3"
                     kind: PARAMETER
                     properties: 0
                     name: "x"


=================
advanced/Test.e2.
=================
--- metac
+++ metacp
                   typeRef {
                     prefix {
-                    symbol: "local8"
+                    symbol: "advanced/Test.T#"
             declarations {
               hardlinks {
-                symbol: "local8"
+                symbol: "advanced/Test.T#"
                 kind: TYPE
                 properties: 4
                 name: "T"


=================
advanced/Test.s3.
=================
--- metac
+++ metacp
         declarations {
           hardlinks {
-            symbol: "local3"
+            symbol: "local2"
             kind: METHOD
             properties: 0
             name: "m"
                 parameterLists {
                   hardlinks {
-                    symbol: "local4"
+                    symbol: "local3"
                     kind: PARAMETER
                     properties: 0
                     name: "x"


============================
classes/C3#copy$default$1().
============================
--- metac
+++ metacp
         annotations {
           tpe {
-            typeRef {
-              prefix {
-              symbol: "scala/annotation/unchecked/uncheckedVariance#"


============================
classes/C4#copy$default$1().
============================
--- metac
+++ metacp
         annotations {
           tpe {
-            typeRef {
-              prefix {
-              symbol: "scala/annotation/unchecked/uncheckedVariance#"


============================
classes/C6#copy$default$1().
============================
--- metac
+++ metacp
         annotations {
           tpe {
-            typeRef {
-              prefix {
-              symbol: "scala/annotation/unchecked/uncheckedVariance#"


====================
classes/N.anonClass.
====================
--- metac
+++ metacp
         declarations {
           hardlinks {
-            symbol: "local9"
+            symbol: "local0"
             kind: METHOD
             properties: 1024
             name: "local"


========================================
com/javacp/ClassSuffix#Inner#Bar#Fuz#[B]
========================================
--- metac
+++ metacp
 language: JAVA
 signature {
   typeSignature {
-    type_parameters {
     lower_bound {
     upper_bound {


================================================
com/javacp/ClassSuffix#Inner#Bar#Fuz#`<init>`().
================================================
--- metac
+++ metacp
 properties: 0
 name: "<init>"
 access {
-  publicAccess {
+  privateWithinAccess {
+    symbol: "com/javacp/"
 language: JAVA


============================================
com/javacp/ClassSuffix#Inner#Bar#`<init>`().
============================================
--- metac
+++ metacp
 properties: 0
 name: "<init>"
 access {
-  publicAccess {
+  privateWithinAccess {
+    symbol: "com/javacp/"
 language: JAVA


================================
com/javacp/ClassSuffix#Inner#[A]
================================
--- metac
+++ metacp
 language: JAVA
 signature {
   typeSignature {
-    type_parameters {
     lower_bound {
     upper_bound {


========================================
com/javacp/ClassSuffix#Inner#`<init>`().
========================================
--- metac
+++ metacp
 properties: 0
 name: "<init>"
 access {
-  publicAccess {
+  privateWithinAccess {
+    symbol: "com/javacp/"
 language: JAVA


==============================
com/javacp/ClassSuffix#suffix.
==============================
--- metac
+++ metacp
             prefix {
               typeRef {
                 prefix {
-                  typeRef {
-                    prefix {
-                    symbol: "com/javacp/ClassSuffix#"
                 symbol: "com/javacp/ClassSuffix#Inner#"
                 type_arguments {


================
com/javacp/Coin#
================
--- metac
+++ metacp
       symlinks: "com/javacp/Coin#NICKEL."
       symlinks: "com/javacp/Coin#PENNY."
       symlinks: "com/javacp/Coin#QUARTER."
+      symlinks: "com/javacp/Coin#`<init>`()."
       symlinks: "com/javacp/Coin#value()."
       symlinks: "com/javacp/Coin#value."
       symlinks: "com/javacp/Coin#valueOf()."


======================
com/javacp/Coin#value.
======================
--- metac
+++ metacp
 symbol: "com/javacp/Coin#value."
 kind: FIELD
-properties: 0
+properties: 8
 name: "value"
 access {
   privateAccess {


==========================
com/javacp/Coin#valueOf().
==========================
--- metac
+++ metacp
     type_parameters {
     parameterLists {
-      symlinks: "com/javacp/Coin#valueOf().(x)"
+      symlinks: "com/javacp/Coin#valueOf().(name)"
     return_type {
       typeRef {


===================================
com/javacp/MetacJava#overload().(a)
===================================
--- metac
+++ metacp
     tpe {
       typeRef {
         prefix {
-          typeRef {
-            prefix {
-            symbol: "com/javacp/MetacJava#Overload1#"
         symbol: "com/javacp/MetacJava#Overload1#A#"


=====================================
com/javacp/MetacJava#overload(+1).(a)
=====================================
--- metac
+++ metacp
     tpe {
       typeRef {
         prefix {
-          typeRef {
-            prefix {
-            symbol: "com/javacp/MetacJava#Overload2#"
         symbol: "com/javacp/MetacJava#Overload2#A#"


==============================
com/javacp/Recursive#Inner#[A]
==============================
--- metac
+++ metacp
 language: JAVA
 signature {
   typeSignature {
-    type_parameters {
     lower_bound {
     upper_bound {


==============================
com/javacp/Recursive#Inner#[B]
==============================
--- metac
+++ metacp
 language: JAVA
 signature {
   typeSignature {
-    type_parameters {
     lower_bound {
     upper_bound {


===============================
com/javacp/Recursive#Inner2#[C]
===============================
--- metac
+++ metacp
 language: JAVA
 signature {
   typeSignature {
-    type_parameters {
     lower_bound {
     upper_bound {


========================
com/javacp/Recursive#[A]
========================
--- metac
+++ metacp
 language: JAVA
 signature {
   typeSignature {
-    type_parameters {
     lower_bound {
     upper_bound {


========================
com/javacp/Recursive#[B]
========================
--- metac
+++ metacp
 language: JAVA
 signature {
   typeSignature {
-    type_parameters {
     lower_bound {
     upper_bound {


=================================
com/javacp/Recursive#foo().[Anon]
=================================
--- metac
+++ metacp
 language: JAVA
 signature {
   typeSignature {
-    type_parameters {
     lower_bound {
     upper_bound {


========================================
com/javacp/Test#InnerShadowTypeParam#[A]
========================================
--- metac
+++ metacp
 language: JAVA
 signature {
   typeSignature {
-    type_parameters {
     lower_bound {
     upper_bound {


================================================
com/javacp/Test#InnerShadowTypeParam#`<init>`().
================================================
--- metac
+++ metacp
 properties: 0
 name: "<init>"
 access {
-  publicAccess {
+  privateWithinAccess {
+    symbol: "com/javacp/"
 language: JAVA


=======================================
com/javacp/Test#StaticClass#`<init>`().
=======================================
--- metac
+++ metacp
 properties: 0
 name: "<init>"
 access {
-  publicAccess {
+  privateWithinAccess {
+    symbol: "com/javacp/"
 language: JAVA


===================
com/javacp/Test#[A]
===================
--- metac
+++ metacp
 language: JAVA
 signature {
   typeSignature {
-    type_parameters {
     lower_bound {
     upper_bound {


===================
com/javacp/Test#[B]
===================
--- metac
+++ metacp
 language: JAVA
 signature {
   typeSignature {
-    type_parameters {
     lower_bound {
     upper_bound {


===========================
com/javacp/Test#arrayField.
===========================
--- metac
+++ metacp
 symbol: "com/javacp/Test#arrayField."
 kind: FIELD
-properties: 0
+properties: 8
 name: "arrayField"
 access {
   privateWithinAccess {


========================
com/javacp/Test#m1().[T]
========================
--- metac
+++ metacp
 language: JAVA
 signature {
   typeSignature {
-    type_parameters {
     lower_bound {
     upper_bound {


========================
com/javacp/Test#m2().[T]
========================
--- metac
+++ metacp
 language: JAVA
 signature {
   typeSignature {
-    type_parameters {
     lower_bound {
     upper_bound {


========================
com/javacp/Test#m3().[T]
========================
--- metac
+++ metacp
 language: JAVA
 signature {
   typeSignature {
-    type_parameters {
     lower_bound {
     upper_bound {


======================================
com/javacp/Test#methodTypeParams().[C]
======================================
--- metac
+++ metacp
 language: JAVA
 signature {
   typeSignature {
-    type_parameters {
     lower_bound {
     upper_bound {


===============================
com/javacp/Test#protectedField.
===============================
--- metac
+++ metacp
 properties: 0
 name: "protectedField"
 access {
-  protectedWithinAccess {
-    symbol: "com/javacp/"
+  protectedAccess {
 language: JAVA


==================================
com/javacp/Test#protectedMethod().
==================================
--- metac
+++ metacp
 properties: 0
 name: "protectedMethod"
 access {
-  protectedWithinAccess {
-    symbol: "com/javacp/"
+  protectedAccess {
 language: JAVA


=================================
com/javacp/Test#strictfpMethod().
=================================
--- metac
+++ metacp
 kind: METHOD
 properties: 0
 name: "strictfpMethod"
+annotations {
+  tpe {
+    typeRef {
+      prefix {
+      symbol: "scala/annotation/strictfp#"
+}
 access {
   privateWithinAccess {
     symbol: "com/javacp/"


=====================================
com/javacp/Test#wildcard().(wildcard)
=====================================
--- metac
+++ metacp
 signature {
   valueSignature {
     tpe {
-      existentialType {
-        tpe {
+      typeRef {
+        prefix {
+        symbol: "java/util/ArrayList#"
+        type_arguments {
           typeRef {
             prefix {
-            symbol: "java/util/ArrayList#"
-            type_arguments {
-              typeRef {
-                prefix {
-                symbol: "local0"
+            symbol: "local_wildcard"
-        declarations {
-          hardlinks {
-            symbol: "local0"
-            kind: TYPE
-            properties: 4
-            name: "_"
-            access {
-              publicAccess {
-            language: SCALA
-            signature {
-              typeSignature {
-                type_parameters {
-                lower_bound {
-                  typeRef {
-                    prefix {
-                    symbol: "scala/Nothing#"
-                upper_bound {
-                  typeRef {
-                    prefix {
-                    symbol: "scala/Any#"


================================
com/javacp/Test#wildcard(+1).(a)
================================
--- metac
+++ metacp
 signature {
   valueSignature {
     tpe {
-      existentialType {
-        tpe {
+      typeRef {
+        prefix {
+        symbol: "java/util/Collection#"
+        type_arguments {
           typeRef {
             prefix {
-            symbol: "java/util/Collection#"
-            type_arguments {
-              typeRef {
-                prefix {
-                symbol: "local2"
+            symbol: "java/lang/Number#"
-        declarations {
-          hardlinks {
-            symbol: "local2"
-            kind: TYPE
-            properties: 4
-            name: "_"
-            access {
-              publicAccess {
-            language: SCALA
-            signature {
-              typeSignature {
-                type_parameters {
-                lower_bound {
-                  typeRef {
-                    prefix {
-                    symbol: "scala/Nothing#"
-                upper_bound {
-                  typeRef {
-                    prefix {
-                    symbol: "java/lang/Number#"


================================
com/javacp/Test#wildcard(+1).(b)
================================
--- metac
+++ metacp
 signature {
   valueSignature {
     tpe {
-      existentialType {
-        tpe {
+      typeRef {
+        prefix {
+        symbol: "java/util/Collection#"
+        type_arguments {
           typeRef {
             prefix {
-            symbol: "java/util/Collection#"
-            type_arguments {
-              typeRef {
-                prefix {
-                symbol: "local4"
+            symbol: "java/lang/Number#"
-        declarations {
-          hardlinks {
-            symbol: "local4"
-            kind: TYPE
-            properties: 4
-            name: "_"
-            access {
-              publicAccess {
-            language: SCALA
-            signature {
-              typeSignature {
-                type_parameters {
-                lower_bound {
-                  typeRef {
-                    prefix {
-                    symbol: "java/lang/Number#"
-                upper_bound {
-                  typeRef {
-                    prefix {
-                    symbol: "scala/Any#"


=============
com/javacp/X#
=============
--- metac
+++ metacp
 properties: 4
 name: "X"
 access {
-  privateWithinAccess {
-    symbol: "com/javacp/"
+  publicAccess {
 language: JAVA


=============
com/javacp/Y#
=============
--- metac
+++ metacp
 properties: 4
 name: "Y"
 access {
-  privateWithinAccess {
-    symbol: "com/javacp/"
+  publicAccess {
 language: JAVA


=============
com/javacp/Z#
=============
--- metac
+++ metacp
 properties: 4
 name: "Z"
 access {
-  privateWithinAccess {
-    symbol: "com/javacp/"
+  publicAccess {
 language: JAVA


===============
example/Access#
===============
--- metac
+++ metacp
       symlinks: "example/Access#`<init>`()."
       symlinks: "example/Access#m1()."
       symlinks: "example/Access#m2()."
-      symlinks: "example/Access#m3()."
       symlinks: "example/Access#m4()."
       symlinks: "example/Access#m5()."
       symlinks: "example/Access#m6()."
       symlinks: "example/Access#m7()."
+      symlinks: "example/Access#m3()."


=========================
example/Methods#m13().(x)
=========================
--- metac
+++ metacp
 signature {
   valueSignature {
     tpe {
-      annotatedType {
-        tpe {
-          typeRef {
-            prefix {
-            symbol: "scala/Int#"
+      typeRef {
+        prefix {
-        annotations {
-          tpe {
-            typeRef {
-              prefix {
-              symbol: "scala/unchecked#"
+        symbol: "scala/Int#"


================================
example/Methods#m19$default$2().
================================
--- metac
+++ metacp
         annotations {
           tpe {
-            typeRef {
-              prefix {
-              symbol: "scala/annotation/unchecked/uncheckedVariance#"


================================
example/Methods#m19$default$3().
================================
--- metac
+++ metacp
         annotations {
           tpe {
-            typeRef {
-              prefix {
-              symbol: "scala/annotation/unchecked/uncheckedVariance#"


======================
example/Synthetic#x$2.
======================
--- metac
+++ metacp
 properties: 1024
 name: "x$2"
 access {
-  publicAccess {
+  privateThisAccess {
 language: SCALA


================
flags/p/package.
================
--- metac
+++ metacp
       symlinks: "flags/p/package.C#"
       symlinks: "flags/p/package.T1#"
       symlinks: "flags/p/package.T2#"
+      symlinks: "flags/p/package.S#"
       symlinks: "flags/p/package.U#"
       symlinks: "flags/p/package.V#"
       symlinks: "flags/p/package.X."
       symlinks: "flags/p/package.Y#"
       symlinks: "flags/p/package.Z#"
       symlinks: "flags/p/package.AA#"
-      symlinks: "flags/p/package.S#"
       symlinks: "flags/p/package.xs1."


======================
types/Test.C#annType1.
======================
--- metac
+++ metacp
         annotations {
           tpe {
-            typeRef {
-              prefix {
-              symbol: "types/ann#"
-              type_arguments {
-                typeRef {
-                  prefix {
-                  symbol: "scala/Int#"


======================
types/Test.C#annType2.
======================
--- metac
+++ metacp
         annotations {
           tpe {
-            typeRef {
-              prefix {
-              symbol: "types/ann1#"
         annotations {
           tpe {
-            typeRef {
-              prefix {
-              symbol: "types/ann2#"


===========================
types/Test.C#compoundType3.
===========================
--- metac
+++ metacp
         declarations {
           hardlinks {
-            symbol: "local2"
+            symbol: "local1"
             kind: METHOD
             properties: 4
             name: "k"


===========================
types/Test.C#compoundType4.
===========================
--- metac
+++ metacp
         declarations {
           hardlinks {
-            symbol: "local5"
+            symbol: "local2"
             kind: METHOD
             properties: 0
             name: "k"


===========================
types/Test.C#compoundType6.
===========================
--- metac
+++ metacp
         declarations {
           hardlinks {
-            symbol: "local7"
+            symbol: "local3"
             kind: METHOD
             properties: 0
             name: "k"


==============================
types/Test.C#existentialType1.
==============================
--- metac
+++ metacp
           typeRef {
             prefix {
-            symbol: "local9"
+            symbol: "local4"
         declarations {
           hardlinks {
-            symbol: "local9"
+            symbol: "local4"
             kind: TYPE
             properties: 4
             name: "T"


==============================
types/Test.C#existentialType2.
==============================
--- metac
+++ metacp
               typeRef {
                 prefix {
-                symbol: "local11"
+                symbol: "local5"
         declarations {
           hardlinks {
-            symbol: "local11"
+            symbol: "local5"
             kind: TYPE
             properties: 4
             name: "_"


==============================
types/Test.C#existentialType3.
==============================
--- metac
+++ metacp
               typeRef {
                 prefix {
-                symbol: "local12"
+                symbol: "local6"
         declarations {
           hardlinks {
-            symbol: "local12"
+            symbol: "local6"
             kind: TYPE
             properties: 4
             name: "?0"


==============================
types/Test.C#existentialType4.
==============================
--- metac
+++ metacp
               typeRef {
                 prefix {
-                symbol: "local13"
+                symbol: "local7"
         declarations {
           hardlinks {
-            symbol: "local13"
+            symbol: "local7"
             kind: TYPE
             properties: 4
             name: "?0"


============================
types/Test.Literal.javaEnum.
============================
--- metac
+++ metacp
 language: SCALA
 signature {
-  methodSignature {
-    type_parameters {
-    return_type {
-      singleType {
-        prefix {
-        symbol: "java/nio/file/LinkOption#NOFOLLOW_LINKS."


