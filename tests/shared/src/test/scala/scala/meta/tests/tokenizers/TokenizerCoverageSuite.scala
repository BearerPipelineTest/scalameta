package scala.meta.tests.tokenizers

import scala.meta._

class TokenizerCoverageSuite() extends BaseTokenizerCoverageSuite {
  check[Term.ApplyUnary]("→-← →(a)←")
  check[Term.Apply     ]("→(f)← (→(((a)))←)")
  check[Term.Apply     ]("→(f)← (→(a)←)")
  check[Term.Apply     ]("→(f)← (→{ case a => a }←)")
  check[Term.Apply     ]("→(f)← (→{ x }←)")
  check[Term.ApplyType ]("→(f)← [→A←]")
  check[Term.ApplyType ]("→(f)← [→A←,→B←]")
  check[Term.ApplyInfix]("→1← →+← →1←")
  check[Term.ApplyInfix]("→a← →f← →(b)←")
  check[Term.ApplyInfix]("→(a)← →op← →(b)←")
  check[Term.ApplyInfix]("→(a, b)← →op← (→c←, →d←)")
  check[Term.ApplyInfix]("→(a, b)← →op← →((c, d))←")
  check[Term.Ascribe   ]("→(a)←: →(A)←")
  check[Term.Assign    ]("→(a)← = →(b)←")
  check[Term.Annotate  ]("→(a)←: →@A←")
  check[Term.Block     ]("{ →(a)←; →(b)← }")
  check[Term.Do        ]("do →d← while (→p←)")
  check[Term.Eta]("→(f)← _")
  check[Term.For]("for { →x <- xs← } →(f)←")
  check[Term.ForYield]("for { →x <- xs← } yield →(f)←")
  check[Term.Function]("(→(a)←, →(b)←) => →(a)←")
  check[Term.If]("if (→p←) →(t)←")
  check[Term.If]("if (→p←) →(t)← else →(f)←")
  check[Term.If]("if (→p←) →if (p2) t←")
  check[Term.If]("if (→p←) →{}←")
  check[Term.Interpolate](""" →s←"→start ←${→(a)←}→ end←" """)
  check[Term.Match]("→(a)← match { →case x => x← }")
  checkNone[Term.Name]("(x)")
  check[Term.New]("new →(A)←")
  check[Term.NewAnonymous]("new →(A){}←")
  check[Term.PartialFunction]("{ →case x => x;← →case y => y← }")
  checkNone[Term.Placeholder]("(_)")
  check[Term.Apply, Term.Repeated]("f(→(x)←: _*)")
  check[Term.Return]("return →(a)←")
  
  // check[Term.Select]("→(a)←.→b←")
  // check[Term.Select]("a.b")
  // check[Term.Super]("a.super.b")
  // check[Term.Super]("a.super[b].c")
  // check[Term.Super]("super[a].b")
  // check[Term.This]("a.this")
  // check[Term.Throw]("throw e")
  // check[Term.Try]("try f catch { case _ => }")
  // check[Term.Try]("try f finally {}")
  // check[Term.TryWithHandler]("try f catch h finally {}")
  // check[Term.TryWithHandler]("try f catch h")
  // check[Term.Tuple]("(1, 1)")
  // check[Term.While]("while (→p←) →d←")
  // check[Term.Xml]("<a>b {c}</a>")

  // // check("def f(x: A): B")             // Term.Param
  // // check("def f(x: A = 1): B")         // Term.Param (default parameter)
  
  
}